{"ast":null,"code":"'use strict';\n\nlet Declaration = require('./declaration');\n\nlet PreviousMap = require('./previous-map');\n\nlet Comment = require('./comment');\n\nlet AtRule = require('./at-rule');\n\nlet Input = require('./input');\n\nlet Root = require('./root');\n\nlet Rule = require('./rule');\n\nfunction fromJSON(json, inputs) {\n  if (Array.isArray(json)) return json.map(n => fromJSON(n));\n  let {\n    inputs: ownInputs,\n    ...defaults\n  } = json;\n\n  if (ownInputs) {\n    inputs = [];\n\n    for (let input of ownInputs) {\n      let inputHydrated = { ...input,\n        __proto__: Input.prototype\n      };\n\n      if (inputHydrated.map) {\n        inputHydrated.map = { ...inputHydrated.map,\n          __proto__: PreviousMap.prototype\n        };\n      }\n\n      inputs.push(inputHydrated);\n    }\n  }\n\n  if (defaults.nodes) {\n    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs));\n  }\n\n  if (defaults.source) {\n    let {\n      inputId,\n      ...source\n    } = defaults.source;\n    defaults.source = source;\n\n    if (inputId != null) {\n      defaults.source.input = inputs[inputId];\n    }\n  }\n\n  if (defaults.type === 'root') {\n    return new Root(defaults);\n  } else if (defaults.type === 'decl') {\n    return new Declaration(defaults);\n  } else if (defaults.type === 'rule') {\n    return new Rule(defaults);\n  } else if (defaults.type === 'comment') {\n    return new Comment(defaults);\n  } else if (defaults.type === 'atrule') {\n    return new AtRule(defaults);\n  } else {\n    throw new Error('Unknown node type: ' + json.type);\n  }\n}\n\nmodule.exports = fromJSON;\nfromJSON.default = fromJSON;","map":{"version":3,"sources":["C:/Users/Valen/OneDrive/Documentos/Proyecto AWS/FrontServerless/node_modules/postcss/lib/fromJSON.js"],"names":["Declaration","require","PreviousMap","Comment","AtRule","Input","Root","Rule","fromJSON","json","inputs","Array","isArray","map","n","ownInputs","defaults","input","inputHydrated","__proto__","prototype","push","nodes","source","inputId","type","Error","module","exports","default"],"mappings":"AAAA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,eAAD,CAAzB;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,gBAAD,CAAzB;;AACA,IAAIE,OAAO,GAAGF,OAAO,CAAC,WAAD,CAArB;;AACA,IAAIG,MAAM,GAAGH,OAAO,CAAC,WAAD,CAApB;;AACA,IAAII,KAAK,GAAGJ,OAAO,CAAC,SAAD,CAAnB;;AACA,IAAIK,IAAI,GAAGL,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIM,IAAI,GAAGN,OAAO,CAAC,QAAD,CAAlB;;AAEA,SAASO,QAAT,CAAkBC,IAAlB,EAAwBC,MAAxB,EAAgC;AAC9B,MAAIC,KAAK,CAACC,OAAN,CAAcH,IAAd,CAAJ,EAAyB,OAAOA,IAAI,CAACI,GAAL,CAASC,CAAC,IAAIN,QAAQ,CAACM,CAAD,CAAtB,CAAP;AAEzB,MAAI;AAAEJ,IAAAA,MAAM,EAAEK,SAAV;AAAqB,OAAGC;AAAxB,MAAqCP,IAAzC;;AACA,MAAIM,SAAJ,EAAe;AACbL,IAAAA,MAAM,GAAG,EAAT;;AACA,SAAK,IAAIO,KAAT,IAAkBF,SAAlB,EAA6B;AAC3B,UAAIG,aAAa,GAAG,EAAE,GAAGD,KAAL;AAAYE,QAAAA,SAAS,EAAEd,KAAK,CAACe;AAA7B,OAApB;;AACA,UAAIF,aAAa,CAACL,GAAlB,EAAuB;AACrBK,QAAAA,aAAa,CAACL,GAAd,GAAoB,EAClB,GAAGK,aAAa,CAACL,GADC;AAElBM,UAAAA,SAAS,EAAEjB,WAAW,CAACkB;AAFL,SAApB;AAID;;AACDV,MAAAA,MAAM,CAACW,IAAP,CAAYH,aAAZ;AACD;AACF;;AACD,MAAIF,QAAQ,CAACM,KAAb,EAAoB;AAClBN,IAAAA,QAAQ,CAACM,KAAT,GAAiBb,IAAI,CAACa,KAAL,CAAWT,GAAX,CAAeC,CAAC,IAAIN,QAAQ,CAACM,CAAD,EAAIJ,MAAJ,CAA5B,CAAjB;AACD;;AACD,MAAIM,QAAQ,CAACO,MAAb,EAAqB;AACnB,QAAI;AAAEC,MAAAA,OAAF;AAAW,SAAGD;AAAd,QAAyBP,QAAQ,CAACO,MAAtC;AACAP,IAAAA,QAAQ,CAACO,MAAT,GAAkBA,MAAlB;;AACA,QAAIC,OAAO,IAAI,IAAf,EAAqB;AACnBR,MAAAA,QAAQ,CAACO,MAAT,CAAgBN,KAAhB,GAAwBP,MAAM,CAACc,OAAD,CAA9B;AACD;AACF;;AACD,MAAIR,QAAQ,CAACS,IAAT,KAAkB,MAAtB,EAA8B;AAC5B,WAAO,IAAInB,IAAJ,CAASU,QAAT,CAAP;AACD,GAFD,MAEO,IAAIA,QAAQ,CAACS,IAAT,KAAkB,MAAtB,EAA8B;AACnC,WAAO,IAAIzB,WAAJ,CAAgBgB,QAAhB,CAAP;AACD,GAFM,MAEA,IAAIA,QAAQ,CAACS,IAAT,KAAkB,MAAtB,EAA8B;AACnC,WAAO,IAAIlB,IAAJ,CAASS,QAAT,CAAP;AACD,GAFM,MAEA,IAAIA,QAAQ,CAACS,IAAT,KAAkB,SAAtB,EAAiC;AACtC,WAAO,IAAItB,OAAJ,CAAYa,QAAZ,CAAP;AACD,GAFM,MAEA,IAAIA,QAAQ,CAACS,IAAT,KAAkB,QAAtB,EAAgC;AACrC,WAAO,IAAIrB,MAAJ,CAAWY,QAAX,CAAP;AACD,GAFM,MAEA;AACL,UAAM,IAAIU,KAAJ,CAAU,wBAAwBjB,IAAI,CAACgB,IAAvC,CAAN;AACD;AACF;;AAEDE,MAAM,CAACC,OAAP,GAAiBpB,QAAjB;AACAA,QAAQ,CAACqB,OAAT,GAAmBrB,QAAnB","sourcesContent":["'use strict'\r\n\r\nlet Declaration = require('./declaration')\r\nlet PreviousMap = require('./previous-map')\r\nlet Comment = require('./comment')\r\nlet AtRule = require('./at-rule')\r\nlet Input = require('./input')\r\nlet Root = require('./root')\r\nlet Rule = require('./rule')\r\n\r\nfunction fromJSON(json, inputs) {\r\n  if (Array.isArray(json)) return json.map(n => fromJSON(n))\r\n\r\n  let { inputs: ownInputs, ...defaults } = json\r\n  if (ownInputs) {\r\n    inputs = []\r\n    for (let input of ownInputs) {\r\n      let inputHydrated = { ...input, __proto__: Input.prototype }\r\n      if (inputHydrated.map) {\r\n        inputHydrated.map = {\r\n          ...inputHydrated.map,\r\n          __proto__: PreviousMap.prototype\r\n        }\r\n      }\r\n      inputs.push(inputHydrated)\r\n    }\r\n  }\r\n  if (defaults.nodes) {\r\n    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs))\r\n  }\r\n  if (defaults.source) {\r\n    let { inputId, ...source } = defaults.source\r\n    defaults.source = source\r\n    if (inputId != null) {\r\n      defaults.source.input = inputs[inputId]\r\n    }\r\n  }\r\n  if (defaults.type === 'root') {\r\n    return new Root(defaults)\r\n  } else if (defaults.type === 'decl') {\r\n    return new Declaration(defaults)\r\n  } else if (defaults.type === 'rule') {\r\n    return new Rule(defaults)\r\n  } else if (defaults.type === 'comment') {\r\n    return new Comment(defaults)\r\n  } else if (defaults.type === 'atrule') {\r\n    return new AtRule(defaults)\r\n  } else {\r\n    throw new Error('Unknown node type: ' + json.type)\r\n  }\r\n}\r\n\r\nmodule.exports = fromJSON\r\nfromJSON.default = fromJSON\r\n"]},"metadata":{},"sourceType":"script"}