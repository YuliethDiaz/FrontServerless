{"ast":null,"code":"let parser = require('postcss-selector-parser');\n\nfunction parse(str, rule) {\n  let nodes;\n  let saver = parser(parsed => {\n    nodes = parsed;\n  });\n\n  try {\n    saver.processSync(str);\n  } catch (e) {\n    if (str.includes(':')) {\n      throw rule ? rule.error('Missed semicolon') : e;\n    } else {\n      throw rule ? rule.error(e.message) : e;\n    }\n  }\n\n  return nodes.at(0);\n}\n\nfunction replace(nodes, parent) {\n  let replaced = false;\n  nodes.each(i => {\n    if (i.type === 'nesting') {\n      let clonedParent = parent.clone();\n\n      if (i.value !== '&') {\n        i.replaceWith(parse(i.value.replace('&', clonedParent.toString())));\n      } else {\n        i.replaceWith(clonedParent);\n      }\n\n      replaced = true;\n    } else if (i.nodes) {\n      if (replace(i, parent)) {\n        replaced = true;\n      }\n    }\n  });\n  return replaced;\n}\n\nfunction selectors(parent, child) {\n  let result = [];\n  parent.selectors.forEach(i => {\n    let parentNode = parse(i, parent);\n    child.selectors.forEach(j => {\n      if (j.length) {\n        let node = parse(j, child);\n        let replaced = replace(node, parentNode);\n\n        if (!replaced) {\n          node.prepend(parser.combinator({\n            value: ' '\n          }));\n          node.prepend(parentNode.clone());\n        }\n\n        result.push(node.toString());\n      }\n    });\n  });\n  return result;\n}\n\nfunction pickComment(comment, after) {\n  if (comment && comment.type === 'comment') {\n    after.after(comment);\n    return comment;\n  } else {\n    return after;\n  }\n}\n\nfunction createFnAtruleChilds(bubble) {\n  return function atruleChilds(rule, atrule, bubbling) {\n    let children = [];\n    atrule.each(child => {\n      if (child.type === 'comment') {\n        children.push(child);\n      } else if (child.type === 'decl') {\n        children.push(child);\n      } else if (child.type === 'rule' && bubbling) {\n        child.selectors = selectors(rule, child);\n      } else if (child.type === 'atrule') {\n        if (child.nodes && bubble[child.name]) {\n          atruleChilds(rule, child, true);\n        } else {\n          children.push(child);\n        }\n      }\n    });\n\n    if (bubbling) {\n      if (children.length) {\n        let clone = rule.clone({\n          nodes: []\n        });\n\n        for (let child of children) {\n          clone.append(child);\n        }\n\n        atrule.prepend(clone);\n      }\n    }\n  };\n}\n\nfunction pickDeclarations(selector, declarations, after, Rule) {\n  let parent = new Rule({\n    selector,\n    nodes: []\n  });\n\n  for (let declaration of declarations) {\n    parent.append(declaration);\n  }\n\n  after.after(parent);\n  return parent;\n}\n\nfunction atruleNames(defaults, custom) {\n  let list = {};\n\n  for (let i of defaults) {\n    list[i] = true;\n  }\n\n  if (custom) {\n    for (let i of custom) {\n      let name = i.replace(/^@/, '');\n      list[name] = true;\n    }\n  }\n\n  return list;\n}\n\nmodule.exports = (opts = {}) => {\n  let bubble = atruleNames(['media', 'supports'], opts.bubble);\n  let atruleChilds = createFnAtruleChilds(bubble);\n  let unwrap = atruleNames(['document', 'font-face', 'keyframes', '-webkit-keyframes', '-moz-keyframes'], opts.unwrap);\n  let preserveEmpty = opts.preserveEmpty;\n  return {\n    postcssPlugin: 'postcss-nested',\n\n    Rule(rule, {\n      Rule\n    }) {\n      let unwrapped = false;\n      let after = rule;\n      let copyDeclarations = false;\n      let declarations = [];\n      rule.each(child => {\n        if (child.type === 'rule') {\n          if (declarations.length) {\n            after = pickDeclarations(rule.selector, declarations, after, Rule);\n            declarations = [];\n          }\n\n          copyDeclarations = true;\n          unwrapped = true;\n          child.selectors = selectors(rule, child);\n          after = pickComment(child.prev(), after);\n          after.after(child);\n          after = child;\n        } else if (child.type === 'atrule') {\n          if (declarations.length) {\n            after = pickDeclarations(rule.selector, declarations, after, Rule);\n            declarations = [];\n          }\n\n          if (child.name === 'at-root') {\n            unwrapped = true;\n            atruleChilds(rule, child, false);\n            let nodes = child.nodes;\n\n            if (child.params) {\n              nodes = new Rule({\n                selector: child.params,\n                nodes\n              });\n            }\n\n            after.after(nodes);\n            after = nodes;\n            child.remove();\n          } else if (bubble[child.name]) {\n            copyDeclarations = true;\n            unwrapped = true;\n            atruleChilds(rule, child, true);\n            after = pickComment(child.prev(), after);\n            after.after(child);\n            after = child;\n          } else if (unwrap[child.name]) {\n            copyDeclarations = true;\n            unwrapped = true;\n            atruleChilds(rule, child, false);\n            after = pickComment(child.prev(), after);\n            after.after(child);\n            after = child;\n          } else if (copyDeclarations) {\n            declarations.push(child);\n          }\n        } else if (child.type === 'decl' && copyDeclarations) {\n          declarations.push(child);\n        }\n      });\n\n      if (declarations.length) {\n        after = pickDeclarations(rule.selector, declarations, after, Rule);\n      }\n\n      if (unwrapped && preserveEmpty !== true) {\n        rule.raws.semicolon = true;\n        if (rule.nodes.length === 0) rule.remove();\n      }\n    }\n\n  };\n};\n\nmodule.exports.postcss = true;","map":{"version":3,"sources":["C:/Users/Valen/OneDrive/Documentos/Proyecto AWS/FrontServerless/node_modules/postcss-nested/index.js"],"names":["parser","require","parse","str","rule","nodes","saver","parsed","processSync","e","includes","error","message","at","replace","parent","replaced","each","i","type","clonedParent","clone","value","replaceWith","toString","selectors","child","result","forEach","parentNode","j","length","node","prepend","combinator","push","pickComment","comment","after","createFnAtruleChilds","bubble","atruleChilds","atrule","bubbling","children","name","append","pickDeclarations","selector","declarations","Rule","declaration","atruleNames","defaults","custom","list","module","exports","opts","unwrap","preserveEmpty","postcssPlugin","unwrapped","copyDeclarations","prev","params","remove","raws","semicolon","postcss"],"mappings":"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","sourcesContent":["let parser = require('postcss-selector-parser')\r\n\r\nfunction parse (str, rule) {\r\n  let nodes\r\n  let saver = parser(parsed => {\r\n    nodes = parsed\r\n  })\r\n  try {\r\n    saver.processSync(str)\r\n  } catch (e) {\r\n    if (str.includes(':')) {\r\n      throw rule ? rule.error('Missed semicolon') : e\r\n    } else {\r\n      throw rule ? rule.error(e.message) : e\r\n    }\r\n  }\r\n  return nodes.at(0)\r\n}\r\n\r\nfunction replace (nodes, parent) {\r\n  let replaced = false\r\n  nodes.each(i => {\r\n    if (i.type === 'nesting') {\r\n      let clonedParent = parent.clone()\r\n      if (i.value !== '&') {\r\n        i.replaceWith(parse(i.value.replace('&', clonedParent.toString())))\r\n      } else {\r\n        i.replaceWith(clonedParent)\r\n      }\r\n      replaced = true\r\n    } else if (i.nodes) {\r\n      if (replace(i, parent)) {\r\n        replaced = true\r\n      }\r\n    }\r\n  })\r\n  return replaced\r\n}\r\n\r\nfunction selectors (parent, child) {\r\n  let result = []\r\n  parent.selectors.forEach(i => {\r\n    let parentNode = parse(i, parent)\r\n\r\n    child.selectors.forEach(j => {\r\n      if (j.length) {\r\n        let node = parse(j, child)\r\n        let replaced = replace(node, parentNode)\r\n        if (!replaced) {\r\n          node.prepend(parser.combinator({ value: ' ' }))\r\n          node.prepend(parentNode.clone())\r\n        }\r\n        result.push(node.toString())\r\n      }\r\n    })\r\n  })\r\n  return result\r\n}\r\n\r\nfunction pickComment (comment, after) {\r\n  if (comment && comment.type === 'comment') {\r\n    after.after(comment)\r\n    return comment\r\n  } else {\r\n    return after\r\n  }\r\n}\r\n\r\nfunction createFnAtruleChilds (bubble) {\r\n  return function atruleChilds (rule, atrule, bubbling) {\r\n    let children = []\r\n    atrule.each(child => {\r\n      if (child.type === 'comment') {\r\n        children.push(child)\r\n      } else if (child.type === 'decl') {\r\n        children.push(child)\r\n      } else if (child.type === 'rule' && bubbling) {\r\n        child.selectors = selectors(rule, child)\r\n      } else if (child.type === 'atrule') {\r\n        if (child.nodes && bubble[child.name]) {\r\n          atruleChilds(rule, child, true)\r\n        } else {\r\n          children.push(child)\r\n        }\r\n      }\r\n    })\r\n    if (bubbling) {\r\n      if (children.length) {\r\n        let clone = rule.clone({ nodes: [] })\r\n        for (let child of children) {\r\n          clone.append(child)\r\n        }\r\n        atrule.prepend(clone)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nfunction pickDeclarations (selector, declarations, after, Rule) {\r\n  let parent = new Rule({\r\n    selector,\r\n    nodes: []\r\n  })\r\n\r\n  for (let declaration of declarations) {\r\n    parent.append(declaration)\r\n  }\r\n\r\n  after.after(parent)\r\n  return parent\r\n}\r\n\r\nfunction atruleNames (defaults, custom) {\r\n  let list = {}\r\n  for (let i of defaults) {\r\n    list[i] = true\r\n  }\r\n  if (custom) {\r\n    for (let i of custom) {\r\n      let name = i.replace(/^@/, '')\r\n      list[name] = true\r\n    }\r\n  }\r\n  return list\r\n}\r\n\r\nmodule.exports = (opts = {}) => {\r\n  let bubble = atruleNames(['media', 'supports'], opts.bubble)\r\n  let atruleChilds = createFnAtruleChilds(bubble)\r\n  let unwrap = atruleNames(\r\n    [\r\n      'document',\r\n      'font-face',\r\n      'keyframes',\r\n      '-webkit-keyframes',\r\n      '-moz-keyframes'\r\n    ],\r\n    opts.unwrap\r\n  )\r\n  let preserveEmpty = opts.preserveEmpty\r\n\r\n  return {\r\n    postcssPlugin: 'postcss-nested',\r\n    Rule (rule, { Rule }) {\r\n      let unwrapped = false\r\n      let after = rule\r\n      let copyDeclarations = false\r\n      let declarations = []\r\n\r\n      rule.each(child => {\r\n        if (child.type === 'rule') {\r\n          if (declarations.length) {\r\n            after = pickDeclarations(rule.selector, declarations, after, Rule)\r\n            declarations = []\r\n          }\r\n\r\n          copyDeclarations = true\r\n          unwrapped = true\r\n          child.selectors = selectors(rule, child)\r\n          after = pickComment(child.prev(), after)\r\n          after.after(child)\r\n          after = child\r\n        } else if (child.type === 'atrule') {\r\n          if (declarations.length) {\r\n            after = pickDeclarations(rule.selector, declarations, after, Rule)\r\n            declarations = []\r\n          }\r\n\r\n          if (child.name === 'at-root') {\r\n            unwrapped = true\r\n            atruleChilds(rule, child, false)\r\n\r\n            let nodes = child.nodes\r\n            if (child.params) {\r\n              nodes = new Rule({ selector: child.params, nodes })\r\n            }\r\n\r\n            after.after(nodes)\r\n            after = nodes\r\n            child.remove()\r\n          } else if (bubble[child.name]) {\r\n            copyDeclarations = true\r\n            unwrapped = true\r\n            atruleChilds(rule, child, true)\r\n            after = pickComment(child.prev(), after)\r\n            after.after(child)\r\n            after = child\r\n          } else if (unwrap[child.name]) {\r\n            copyDeclarations = true\r\n            unwrapped = true\r\n            atruleChilds(rule, child, false)\r\n            after = pickComment(child.prev(), after)\r\n            after.after(child)\r\n            after = child\r\n          } else if (copyDeclarations) {\r\n            declarations.push(child)\r\n          }\r\n        } else if (child.type === 'decl' && copyDeclarations) {\r\n          declarations.push(child)\r\n        }\r\n      })\r\n\r\n      if (declarations.length) {\r\n        after = pickDeclarations(rule.selector, declarations, after, Rule)\r\n      }\r\n\r\n      if (unwrapped && preserveEmpty !== true) {\r\n        rule.raws.semicolon = true\r\n        if (rule.nodes.length === 0) rule.remove()\r\n      }\r\n    }\r\n  }\r\n}\r\nmodule.exports.postcss = true\r\n"]},"metadata":{},"sourceType":"script"}