{"ast":null,"code":"'use strict';\n\nvar isWindows = process.platform === 'win32'; // Regex to split a windows path into three parts: [*, device, slash,\n// tail] windows-only\n\nvar splitDeviceRe = /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/; // Regex to split the tail part of the above into [*, dir, basename, ext]\n\nvar splitTailRe = /^([\\s\\S]*?)((?:\\.{1,2}|[^\\\\\\/]+?|)(\\.[^.\\/\\\\]*|))(?:[\\\\\\/]*)$/;\nvar win32 = {}; // Function to split a filename into [root, dir, basename, ext]\n\nfunction win32SplitPath(filename) {\n  // Separate device+slash from tail\n  var result = splitDeviceRe.exec(filename),\n      device = (result[1] || '') + (result[2] || ''),\n      tail = result[3] || ''; // Split the tail into dir, basename and extension\n\n  var result2 = splitTailRe.exec(tail),\n      dir = result2[1],\n      basename = result2[2],\n      ext = result2[3];\n  return [device, dir, basename, ext];\n}\n\nwin32.parse = function (pathString) {\n  if (typeof pathString !== 'string') {\n    throw new TypeError(\"Parameter 'pathString' must be a string, not \" + typeof pathString);\n  }\n\n  var allParts = win32SplitPath(pathString);\n\n  if (!allParts || allParts.length !== 4) {\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n  }\n\n  return {\n    root: allParts[0],\n    dir: allParts[0] + allParts[1].slice(0, -1),\n    base: allParts[2],\n    ext: allParts[3],\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\n  };\n}; // Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\n\n\nvar splitPathRe = /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar posix = {};\n\nfunction posixSplitPath(filename) {\n  return splitPathRe.exec(filename).slice(1);\n}\n\nposix.parse = function (pathString) {\n  if (typeof pathString !== 'string') {\n    throw new TypeError(\"Parameter 'pathString' must be a string, not \" + typeof pathString);\n  }\n\n  var allParts = posixSplitPath(pathString);\n\n  if (!allParts || allParts.length !== 4) {\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\n  }\n\n  allParts[1] = allParts[1] || '';\n  allParts[2] = allParts[2] || '';\n  allParts[3] = allParts[3] || '';\n  return {\n    root: allParts[0],\n    dir: allParts[0] + allParts[1].slice(0, -1),\n    base: allParts[2],\n    ext: allParts[3],\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\n  };\n};\n\nif (isWindows) module.exports = win32.parse;else\n  /* posix */\n  module.exports = posix.parse;\nmodule.exports.posix = posix.parse;\nmodule.exports.win32 = win32.parse;","map":{"version":3,"sources":["C:/Users/Valen/OneDrive/Documentos/Proyecto AWS/FrontServerless/node_modules/path-parse/index.js"],"names":["isWindows","process","platform","splitDeviceRe","splitTailRe","win32","win32SplitPath","filename","result","exec","device","tail","result2","dir","basename","ext","parse","pathString","TypeError","allParts","length","root","slice","base","name","splitPathRe","posix","posixSplitPath","module","exports"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nvar isWindows = process.platform === 'win32';\r\n\r\n// Regex to split a windows path into three parts: [*, device, slash,\r\n// tail] windows-only\r\nvar splitDeviceRe =\r\n    /^([a-zA-Z]:|[\\\\\\/]{2}[^\\\\\\/]+[\\\\\\/]+[^\\\\\\/]+)?([\\\\\\/])?([\\s\\S]*?)$/;\r\n\r\n// Regex to split the tail part of the above into [*, dir, basename, ext]\r\nvar splitTailRe =\r\n    /^([\\s\\S]*?)((?:\\.{1,2}|[^\\\\\\/]+?|)(\\.[^.\\/\\\\]*|))(?:[\\\\\\/]*)$/;\r\n\r\nvar win32 = {};\r\n\r\n// Function to split a filename into [root, dir, basename, ext]\r\nfunction win32SplitPath(filename) {\r\n  // Separate device+slash from tail\r\n  var result = splitDeviceRe.exec(filename),\r\n      device = (result[1] || '') + (result[2] || ''),\r\n      tail = result[3] || '';\r\n  // Split the tail into dir, basename and extension\r\n  var result2 = splitTailRe.exec(tail),\r\n      dir = result2[1],\r\n      basename = result2[2],\r\n      ext = result2[3];\r\n  return [device, dir, basename, ext];\r\n}\r\n\r\nwin32.parse = function(pathString) {\r\n  if (typeof pathString !== 'string') {\r\n    throw new TypeError(\r\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\r\n    );\r\n  }\r\n  var allParts = win32SplitPath(pathString);\r\n  if (!allParts || allParts.length !== 4) {\r\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\r\n  }\r\n  return {\r\n    root: allParts[0],\r\n    dir: allParts[0] + allParts[1].slice(0, -1),\r\n    base: allParts[2],\r\n    ext: allParts[3],\r\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\r\n  };\r\n};\r\n\r\n\r\n\r\n// Split a filename into [root, dir, basename, ext], unix version\r\n// 'root' is just a slash, or nothing.\r\nvar splitPathRe =\r\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\r\nvar posix = {};\r\n\r\n\r\nfunction posixSplitPath(filename) {\r\n  return splitPathRe.exec(filename).slice(1);\r\n}\r\n\r\n\r\nposix.parse = function(pathString) {\r\n  if (typeof pathString !== 'string') {\r\n    throw new TypeError(\r\n        \"Parameter 'pathString' must be a string, not \" + typeof pathString\r\n    );\r\n  }\r\n  var allParts = posixSplitPath(pathString);\r\n  if (!allParts || allParts.length !== 4) {\r\n    throw new TypeError(\"Invalid path '\" + pathString + \"'\");\r\n  }\r\n  allParts[1] = allParts[1] || '';\r\n  allParts[2] = allParts[2] || '';\r\n  allParts[3] = allParts[3] || '';\r\n\r\n  return {\r\n    root: allParts[0],\r\n    dir: allParts[0] + allParts[1].slice(0, -1),\r\n    base: allParts[2],\r\n    ext: allParts[3],\r\n    name: allParts[2].slice(0, allParts[2].length - allParts[3].length)\r\n  };\r\n};\r\n\r\n\r\nif (isWindows)\r\n  module.exports = win32.parse;\r\nelse /* posix */\r\n  module.exports = posix.parse;\r\n\r\nmodule.exports.posix = posix.parse;\r\nmodule.exports.win32 = win32.parse;\r\n"]},"metadata":{},"sourceType":"script"}