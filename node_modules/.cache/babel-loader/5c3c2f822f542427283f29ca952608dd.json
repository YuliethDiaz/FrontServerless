{"ast":null,"code":"import _slicedToArray from\"C:/Personal/TemplateCursoServerless/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from'react';import swal from'sweetalert';var useToken=function useToken(){var getToken=function getToken(){var tokenString=localStorage.getItem('Token');var LOGIN=process.env.REACT_APP_LOGIN_URL;var userToken=\"\";var now=new Date();if(tokenString!=null&&tokenString.includes(\"value\")){userToken=JSON.parse(tokenString);// compare the expiry time of the item with the current time\nif(now.getTime()>userToken.expiry){// If the item is expired, delete the item from storage\n// and return null\nswal({title:\"Alerta\",text:\"La sesión ha expirado\",icon:\"warning\"}).then(function(){window.localStorage.clear();window.location.href=LOGIN;});}}return userToken;};var _useState=useState(getToken()),_useState2=_slicedToArray(_useState,2),Token=_useState2[0],setToken=_useState2[1];var saveToken=function saveToken(userToken){var now=new Date();// `item` is an object which contains the original value\n// as well as the time when it's supposed to expire\nvar item={value:userToken,expiry:now.setMinutes(now.getMinutes()+180)};localStorage.setItem('Token',JSON.stringify(item));setToken(userToken);};return{setToken:saveToken,Token:Token};};export default useToken;","map":{"version":3,"sources":["C:/Personal/TemplateCursoServerless/src/components/Hooks/useToken.jsx"],"names":["useState","swal","useToken","getToken","tokenString","localStorage","getItem","LOGIN","process","env","REACT_APP_LOGIN_URL","userToken","now","Date","includes","JSON","parse","getTime","expiry","title","text","icon","then","window","clear","location","href","Token","setToken","saveToken","item","value","setMinutes","getMinutes","setItem","stringify"],"mappings":"0JAAA,OAASA,QAAT,KAAyB,OAAzB,CACA,MAAOC,CAAAA,IAAP,KAAiB,YAAjB,CAEA,GAAMC,CAAAA,QAAQ,CAAE,QAAVA,CAAAA,QAAU,EAAO,CACrB,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACrB,GAAMC,CAAAA,WAAW,CAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAApB,CACA,GAAMC,CAAAA,KAAK,CAAGC,OAAO,CAACC,GAAR,CAAYC,mBAA1B,CACA,GAAIC,CAAAA,SAAS,CAAG,EAAhB,CACA,GAAMC,CAAAA,GAAG,CAAG,GAAIC,CAAAA,IAAJ,EAAZ,CAEA,GAAGT,WAAW,EAAG,IAAd,EAAsBA,WAAW,CAACU,QAAZ,CAAqB,OAArB,CAAzB,CAAuD,CACpDH,SAAS,CAAGI,IAAI,CAACC,KAAL,CAAWZ,WAAX,CAAZ,CAEC;AACE,GAAIQ,GAAG,CAACK,OAAJ,GAAgBN,SAAS,CAACO,MAA9B,CAAsC,CACtC;AACA;AAEAjB,IAAI,CAAC,CACHkB,KAAK,CAAC,QADH,CAEHC,IAAI,CAAC,uBAFF,CAGHC,IAAI,CAAE,SAHH,CAAD,CAAJ,CAIGC,IAJH,CAIQ,UAAM,CACZC,MAAM,CAAClB,YAAP,CAAoBmB,KAApB,GACAD,MAAM,CAACE,QAAP,CAAgBC,IAAhB,CAAuBnB,KAAvB,CAED,CARD,EAWD,CAEJ,CAED,MAAOI,CAAAA,SAAP,CACD,CA9BD,CAgCA,cAA0BX,QAAQ,CAACG,QAAQ,EAAT,CAAlC,wCAAOwB,KAAP,eAAcC,QAAd,eAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,CAAAlB,SAAS,CAAI,CAE7B,GAAMC,CAAAA,GAAG,CAAG,GAAIC,CAAAA,IAAJ,EAAZ,CAEM;AACA;AACA,GAAMiB,CAAAA,IAAI,CAAG,CACXC,KAAK,CAAEpB,SADI,CAEXO,MAAM,CAAEN,GAAG,CAACoB,UAAJ,CAAgBpB,GAAG,CAACqB,UAAJ,GAAmB,GAAnC,CAFG,CAAb,CAMN5B,YAAY,CAAC6B,OAAb,CAAqB,OAArB,CAA8BnB,IAAI,CAACoB,SAAL,CAAeL,IAAf,CAA9B,EACAF,QAAQ,CAACjB,SAAD,CAAR,CACD,CAdD,CAgBA,MAAO,CACLiB,QAAQ,CAAEC,SADL,CAELF,KAAK,CAALA,KAFK,CAAP,CAID,CAvDD,CAwDA,cAAezB,CAAAA,QAAf","sourcesContent":["import { useState } from 'react';\r\nimport swal from 'sweetalert';\r\n\r\nconst useToken= () =>  { \r\n  const getToken = () => {\r\n    const tokenString = localStorage.getItem('Token');\r\n    const LOGIN = process.env.REACT_APP_LOGIN_URL;\r\n    let userToken = \"\";\r\n    const now = new Date()\r\n  \r\n    if(tokenString !=null && tokenString.includes(\"value\")){\r\n       userToken = JSON.parse(tokenString);\r\n\r\n        // compare the expiry time of the item with the current time\r\n          if (now.getTime() > userToken.expiry) {\r\n          // If the item is expired, delete the item from storage\r\n          // and return null\r\n\r\n          swal({  \r\n            title:\"Alerta\",\r\n            text:\"La sesión ha expirado\",\r\n            icon: \"warning\"\r\n          }).then(() => {\r\n            window.localStorage.clear();      \r\n            window.location.href = LOGIN; \r\n\r\n          });\r\n\r\n\r\n        }\r\n\r\n    }\r\n  \r\n    return userToken\r\n  };\r\n\r\n  const [Token, setToken] = useState(getToken());\r\n\r\n  const saveToken = userToken => {\r\n\r\n    const now = new Date()\r\n  \r\n          // `item` is an object which contains the original value\r\n          // as well as the time when it's supposed to expire\r\n          const item = {\r\n            value: userToken,\r\n            expiry: now.setMinutes( now.getMinutes() + 180 )\r\n            ,\r\n          }\r\n\r\n    localStorage.setItem('Token', JSON.stringify(item));\r\n    setToken(userToken);\r\n  };\r\n\r\n  return {\r\n    setToken: saveToken,\r\n    Token\r\n  }\r\n}\r\nexport default useToken;"]},"metadata":{},"sourceType":"module"}