{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.virtual_scrolling.js)\r\n * Version: 21.2.5\r\n * Build date: Mon Jan 17 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { getOuterHeight } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { getWindow } from \"../../core/utils/window\";\nimport { VirtualScrollController, subscribeToExternalScrollers } from \"./ui.grid_core.virtual_scrolling_core\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nimport { each } from \"../../core/utils/iterator\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport LoadIndicator from \"../load_indicator\";\nimport browser from \"../../core/utils/browser\";\nimport { getBoundingRect } from \"../../core/utils/position\";\nimport { isDefined } from \"../../core/utils/type\";\nvar BOTTOM_LOAD_PANEL_CLASS = \"bottom-load-panel\";\nvar TABLE_CONTENT_CLASS = \"table-content\";\nvar GROUP_SPACE_CLASS = \"group-space\";\nvar CONTENT_CLASS = \"content\";\nvar FREESPACE_CLASS = \"dx-freespace-row\";\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\nvar VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\nvar SCROLLING_MODE_INFINITE = \"infinite\";\nvar SCROLLING_MODE_VIRTUAL = \"virtual\";\nvar LOAD_TIMEOUT = 300;\nvar LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\nvar VISIBLE_PAGE_INDEX = \"paging.pageIndex\";\n\nvar isVirtualMode = function (that) {\n  return that.option(\"scrolling.mode\") === SCROLLING_MODE_VIRTUAL;\n};\n\nvar isAppendMode = function (that) {\n  return that.option(\"scrolling.mode\") === SCROLLING_MODE_INFINITE;\n};\n\nvar isVirtualPaging = function (that) {\n  return isVirtualMode(that) || isAppendMode(that);\n};\n\nvar _correctCount = function (items, count, fromEnd, isItemCountableFunc) {\n  for (var i = 0; i < count + 1; i++) {\n    var item = items[fromEnd ? items.length - 1 - i : i];\n\n    if (item && !isItemCountableFunc(item, i === count, fromEnd)) {\n      count++;\n    }\n  }\n\n  return count;\n};\n\nvar isItemCountableByDataSource = function (item, dataSource) {\n  return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && dataSource.isGroupItemCountable(item.data);\n};\n\nvar updateItemIndices = function (items) {\n  items.forEach(function (item, index) {\n    item.rowIndex = index;\n  });\n  return items;\n};\n\nvar VirtualScrollingDataSourceAdapterExtender = function () {\n  var _updateLoading = function (that) {\n    var beginPageIndex = that._virtualScrollController.beginPageIndex(-1);\n\n    if (isVirtualMode(that)) {\n      if (beginPageIndex < 0 || that.viewportSize() >= 0 && that.getViewportItemIndex() >= 0 && (beginPageIndex * that.pageSize() > that.getViewportItemIndex() || beginPageIndex * that.pageSize() + that.itemsCount() < that.getViewportItemIndex() + that.viewportSize()) && that._dataSource.isLoading()) {\n        if (!that._isLoading) {\n          that._isLoading = true;\n          that.loadingChanged.fire(true);\n        }\n      } else if (that._isLoading) {\n        that._isLoading = false;\n        that.loadingChanged.fire(false);\n      }\n    }\n  };\n\n  var result = {\n    init: function () {\n      this.callBase.apply(this, arguments);\n      this._items = [];\n      this._isLoaded = true;\n      this._loadPageCount = 1;\n      this._virtualScrollController = new VirtualScrollController(this.component, this._getVirtualScrollDataOptions());\n    },\n    _getVirtualScrollDataOptions: function () {\n      var that = this;\n      return {\n        pageSize: function () {\n          return that.pageSize();\n        },\n        totalItemsCount: function () {\n          return that.totalItemsCount();\n        },\n        hasKnownLastPage: function () {\n          return that.hasKnownLastPage();\n        },\n        pageIndex: function (index) {\n          return that._dataSource.pageIndex(index);\n        },\n        isLoading: function () {\n          return that._dataSource.isLoading() && !that.isCustomLoading();\n        },\n        pageCount: function () {\n          return that.pageCount();\n        },\n        load: function () {\n          return that._dataSource.load();\n        },\n        updateLoading: function () {\n          _updateLoading(that);\n        },\n        itemsCount: function () {\n          return that.itemsCount(true);\n        },\n        items: function () {\n          return that._dataSource.items();\n        },\n        viewportItems: function (items) {\n          if (items) {\n            that._items = items;\n          }\n\n          return that._items;\n        },\n        onChanged: function (e) {\n          that.changed.fire(e);\n        },\n        changingDuration: function (e) {\n          if (that.isLoading()) {\n            return LOAD_TIMEOUT;\n          }\n\n          return that._renderTime || 0;\n        }\n      };\n    },\n    _handleLoadingChanged: function (isLoading) {\n      if (false === this.option(LEGACY_SCROLLING_MODE)) {\n        this.callBase.apply(this, arguments);\n        return;\n      }\n\n      if (!isVirtualMode(this) || this._isLoadingAll) {\n        this._isLoading = isLoading;\n        this.callBase.apply(this, arguments);\n      }\n\n      if (isLoading) {\n        this._startLoadTime = new Date();\n      } else {\n        this._startLoadTime = void 0;\n      }\n    },\n    _handleLoadError: function () {\n      if (false !== this.option(LEGACY_SCROLLING_MODE)) {\n        this._isLoading = false;\n        this.loadingChanged.fire(false);\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    _handleDataChanged: function (e) {\n      if (false === this.option(LEGACY_SCROLLING_MODE)) {\n        this._items = this._dataSource.items().slice();\n        this.callBase.apply(this, arguments);\n        return;\n      }\n\n      var callBase = this.callBase.bind(this);\n\n      this._virtualScrollController.handleDataChanged(callBase, e);\n    },\n    _customizeRemoteOperations: function (options, operationTypes) {\n      var newMode = false === this.option(LEGACY_SCROLLING_MODE);\n      var renderAsync = this.option(\"scrolling.renderAsync\");\n\n      if (!isDefined(renderAsync)) {\n        renderAsync = this._renderTime >= this.option(\"scrolling.renderingThreshold\");\n      }\n\n      if ((isVirtualMode(this) || isAppendMode(this) && newMode) && !operationTypes.reload && (operationTypes.skip || newMode) && !renderAsync) {\n        options.delay = void 0;\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    items: function () {\n      return this._items;\n    },\n    itemsCount: function (isBase) {\n      if (isBase || false === this.option(LEGACY_SCROLLING_MODE)) {\n        return this.callBase();\n      }\n\n      return this._virtualScrollController.itemsCount();\n    },\n    load: function (loadOptions) {\n      if (false === this.option(LEGACY_SCROLLING_MODE) || loadOptions) {\n        return this.callBase(loadOptions);\n      }\n\n      return this._virtualScrollController.load();\n    },\n    isLoading: function () {\n      return false === this.option(LEGACY_SCROLLING_MODE) ? this._dataSource.isLoading() : this._isLoading;\n    },\n    isLoaded: function () {\n      return this._dataSource.isLoaded() && this._isLoaded;\n    },\n    resetPagesCache: function (isLiveUpdate) {\n      if (!isLiveUpdate) {\n        this._virtualScrollController.reset(true);\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    _changeRowExpandCore: function () {\n      var result = this.callBase.apply(this, arguments);\n\n      if (false === this.option(LEGACY_SCROLLING_MODE)) {\n        return result;\n      }\n\n      this.resetPagesCache();\n\n      _updateLoading(this);\n\n      return result;\n    },\n    reload: function () {\n      this._dataSource.pageIndex(this.pageIndex());\n\n      var virtualScrollController = this._virtualScrollController;\n\n      if (false !== this.option(LEGACY_SCROLLING_MODE) && virtualScrollController) {\n        var d = new Deferred();\n        this.callBase.apply(this, arguments).done(function (r) {\n          var delayDeferred = virtualScrollController.getDelayDeferred();\n\n          if (delayDeferred) {\n            delayDeferred.done(d.resolve).fail(d.reject);\n          } else {\n            d.resolve(r);\n          }\n        }).fail(d.reject);\n        return d;\n      } else {\n        return this.callBase.apply(this, arguments);\n      }\n    },\n    refresh: function (options, operationTypes) {\n      if (false !== this.option(LEGACY_SCROLLING_MODE)) {\n        var storeLoadOptions = options.storeLoadOptions;\n        var dataSource = this._dataSource;\n\n        if (operationTypes.reload) {\n          this._virtualScrollController.reset();\n\n          dataSource.items().length = 0;\n          this._isLoaded = false;\n\n          _updateLoading(this);\n\n          this._isLoaded = true;\n\n          if (isAppendMode(this)) {\n            this.pageIndex(0);\n            dataSource.pageIndex(0);\n            storeLoadOptions.pageIndex = 0;\n            options.pageIndex = 0;\n            storeLoadOptions.skip = 0;\n          } else {\n            dataSource.pageIndex(this.pageIndex());\n\n            if (dataSource.paginate()) {\n              options.pageIndex = this.pageIndex();\n              storeLoadOptions.skip = this.pageIndex() * this.pageSize();\n            }\n          }\n        } else if (isAppendMode(this) && storeLoadOptions.skip && this._totalCountCorrection < 0) {\n          storeLoadOptions.skip += this._totalCountCorrection;\n        }\n      }\n\n      return this.callBase.apply(this, arguments);\n    },\n    dispose: function () {\n      this._virtualScrollController.dispose();\n\n      this.callBase.apply(this, arguments);\n    },\n    loadPageCount: function (count) {\n      if (!isDefined(count)) {\n        return this._loadPageCount;\n      }\n\n      this._loadPageCount = count;\n    },\n    _handleDataLoading: function (options) {\n      var loadPageCount = this.loadPageCount();\n      var pageSize = this.pageSize();\n      options.loadPageCount = loadPageCount;\n\n      if (!options.isCustomLoading && false === this.option(LEGACY_SCROLLING_MODE) && loadPageCount > 1 && pageSize > 0) {\n        options.storeLoadOptions.take = loadPageCount * pageSize;\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    _loadPageSize: function () {\n      return this.callBase.apply(this, arguments) * this.loadPageCount();\n    }\n  };\n  [\"beginPageIndex\", \"endPageIndex\", \"pageIndex\"].forEach(function (name) {\n    result[name] = function () {\n      if (false === this.option(LEGACY_SCROLLING_MODE)) {\n        var dataSource = this._dataSource;\n        return dataSource.pageIndex.apply(dataSource, arguments);\n      }\n\n      var virtualScrollController = this._virtualScrollController;\n      return virtualScrollController[name].apply(virtualScrollController, arguments);\n    };\n  });\n  [\"virtualItemsCount\", \"getContentOffset\", \"getVirtualContentSize\", \"setContentItemSizes\", \"setViewportPosition\", \"getViewportItemIndex\", \"setViewportItemIndex\", \"getItemIndexByPosition\", \"viewportSize\", \"viewportItemSize\", \"getItemSize\", \"getItemSizes\", \"loadIfNeed\"].forEach(function (name) {\n    result[name] = function () {\n      var virtualScrollController = this._virtualScrollController;\n      return virtualScrollController[name].apply(virtualScrollController, arguments);\n    };\n  });\n  return result;\n}();\n\nvar VirtualScrollingRowsViewExtender = function () {\n  var removeEmptyRows = function ($emptyRows, className) {\n    var tBodies = $emptyRows.toArray().map(row => $(row).parent(\".\" + className).get(0)).filter(row => row);\n\n    if (tBodies.length) {\n      $emptyRows = $(tBodies);\n    }\n\n    var rowCount = className === FREESPACE_CLASS ? $emptyRows.length - 1 : $emptyRows.length;\n\n    for (var i = 0; i < rowCount; i++) {\n      $emptyRows.eq(i).remove();\n    }\n  };\n\n  return {\n    init: function () {\n      var _dataController$state;\n\n      var dataController = this.getController(\"data\");\n      this.callBase();\n      dataController.pageChanged.add(pageIndex => {\n        this.scrollToPage(null !== pageIndex && void 0 !== pageIndex ? pageIndex : dataController.pageIndex());\n      });\n      dataController.dataSourceChanged.add(() => {\n        !this._scrollTop && this._scrollToCurrentPageOnResize();\n      });\n      null === (_dataController$state = dataController.stateLoaded) || void 0 === _dataController$state ? void 0 : _dataController$state.add(() => {\n        this._scrollToCurrentPageOnResize();\n      });\n\n      this._scrollToCurrentPageOnResize();\n    },\n    _scrollToCurrentPageOnResize: function () {\n      var dataController = this.getController(\"data\");\n\n      if (dataController.pageIndex() > 0) {\n        var resizeHandler = () => {\n          this.resizeCompleted.remove(resizeHandler);\n          this.scrollToPage(dataController.pageIndex());\n        };\n\n        this.resizeCompleted.add(resizeHandler);\n      }\n    },\n    scrollToPage: function (pageIndex) {\n      var dataController = this._dataController;\n      var pageSize = dataController ? dataController.pageSize() : 0;\n      var scrollPosition;\n\n      if (isVirtualMode(this) || isAppendMode(this)) {\n        var itemSize = dataController.getItemSize();\n        var itemSizes = dataController.getItemSizes();\n        var itemIndex = pageIndex * pageSize;\n        scrollPosition = itemIndex * itemSize;\n\n        for (var index in itemSizes) {\n          if (index < itemIndex) {\n            scrollPosition += itemSizes[index] - itemSize;\n          }\n        }\n      } else {\n        scrollPosition = 0;\n      }\n\n      this.scrollTo({\n        y: scrollPosition,\n        x: this._scrollLeft\n      });\n    },\n    renderDelayedTemplates: function (e) {\n      this._updateContentPosition(true);\n\n      this.callBase.apply(this, arguments);\n    },\n    _renderCore: function (e) {\n      var startRenderTime = new Date();\n      this.callBase.apply(this, arguments);\n      var dataSource = this._dataController._dataSource;\n\n      if (dataSource && e) {\n        var itemCount = e.items ? e.items.length : 20;\n        var viewportSize = this._dataController.viewportSize() || 20;\n\n        if (gridCoreUtils.isVirtualRowRendering(this) && itemCount > 0 && false !== this.option(LEGACY_SCROLLING_MODE)) {\n          dataSource._renderTime = (new Date() - startRenderTime) * viewportSize / itemCount;\n        } else {\n          dataSource._renderTime = new Date() - startRenderTime;\n        }\n      }\n    },\n    _getRowElements: function (tableElement) {\n      var $rows = this.callBase(tableElement);\n      return $rows && $rows.not(\".\" + VIRTUAL_ROW_CLASS);\n    },\n    _removeRowsElements: function (contentTable, removeCount, changeType) {\n      var rowElements = this._getRowElements(contentTable).toArray();\n\n      if (\"append\" === changeType) {\n        rowElements = rowElements.slice(0, removeCount);\n      } else {\n        rowElements = rowElements.slice(-removeCount);\n      }\n\n      var errorHandlingController = this.getController(\"errorHandling\");\n      rowElements.map(rowElement => {\n        var $rowElement = $(rowElement);\n        errorHandlingController && errorHandlingController.removeErrorRow($rowElement.next());\n        $rowElement.remove();\n      });\n    },\n    _updateContent: function (tableElement, change) {\n      var $freeSpaceRowElements;\n\n      var contentElement = this._findContentElement();\n\n      var changeType = change && change.changeType;\n      var contentTable = contentElement.children().first();\n\n      if (\"append\" === changeType || \"prepend\" === changeType) {\n        var $tBodies = this._getBodies(tableElement);\n\n        if (1 === $tBodies.length) {\n          this._getBodies(contentTable)[\"append\" === changeType ? \"append\" : \"prepend\"]($tBodies.children());\n        } else {\n          $tBodies[\"append\" === changeType ? \"appendTo\" : \"prependTo\"](contentTable);\n        }\n\n        tableElement.remove();\n        $freeSpaceRowElements = this._getFreeSpaceRowElements(contentTable);\n        removeEmptyRows($freeSpaceRowElements, FREESPACE_CLASS);\n\n        if (change.removeCount) {\n          this._removeRowsElements(contentTable, change.removeCount, changeType);\n        }\n\n        this._restoreErrorRow(contentTable);\n      } else {\n        this.callBase.apply(this, arguments);\n\n        if (\"update\" === changeType) {\n          this._restoreErrorRow(contentTable);\n        }\n      }\n\n      this._updateBottomLoading();\n    },\n    _addVirtualRow: function ($table, isFixed, location, position) {\n      if (!position) {\n        return;\n      }\n\n      var $virtualRow = this._createEmptyRow(VIRTUAL_ROW_CLASS, isFixed, position);\n\n      $virtualRow = this._wrapRowIfNeed($table, $virtualRow);\n\n      this._appendEmptyRow($table, $virtualRow, location);\n    },\n    _getRowHeights: function () {\n      var rowHeights = this._getRowElements(this._tableElement).toArray().map(function (row) {\n        return getBoundingRect(row).height;\n      });\n\n      return rowHeights;\n    },\n    _correctRowHeights: function (rowHeights) {\n      var dataController = this._dataController;\n      var dataSource = dataController._dataSource;\n      var correctedRowHeights = [];\n      var visibleRows = dataController.getVisibleRows();\n      var itemSize = 0;\n      var firstCountableItem = true;\n      var lastLoadIndex = -1;\n\n      for (var i = 0; i < rowHeights.length; i++) {\n        var currentItem = visibleRows[i];\n\n        if (!isDefined(currentItem)) {\n          continue;\n        }\n\n        if (false === this.option(LEGACY_SCROLLING_MODE)) {\n          if (lastLoadIndex >= 0 && lastLoadIndex !== currentItem.loadIndex) {\n            correctedRowHeights.push(itemSize);\n            itemSize = 0;\n          }\n\n          lastLoadIndex = currentItem.loadIndex;\n        } else if (isItemCountableByDataSource(currentItem, dataSource)) {\n          if (firstCountableItem) {\n            firstCountableItem = false;\n          } else {\n            correctedRowHeights.push(itemSize);\n            itemSize = 0;\n          }\n        }\n\n        itemSize += rowHeights[i];\n      }\n\n      itemSize > 0 && correctedRowHeights.push(itemSize);\n      return correctedRowHeights;\n    },\n    _updateContentPosition: function (isRender) {\n      var dataController = this._dataController;\n      var rowHeight = this._rowHeight || 20;\n      dataController.viewportItemSize(rowHeight);\n\n      if (isVirtualMode(this) || gridCoreUtils.isVirtualRowRendering(this)) {\n        if (!isRender) {\n          var rowHeights = this._getRowHeights();\n\n          var correctedRowHeights = this._correctRowHeights(rowHeights);\n\n          dataController.setContentItemSizes(correctedRowHeights);\n        }\n\n        var top = dataController.getContentOffset(\"begin\");\n        var bottom = dataController.getContentOffset(\"end\");\n        var $tables = this.getTableElements();\n        var $virtualRows = $tables.children(\"tbody\").children(\".\" + VIRTUAL_ROW_CLASS);\n        removeEmptyRows($virtualRows, VIRTUAL_ROW_CLASS);\n        $tables.each((index, element) => {\n          var isFixed = index > 0;\n          this._isFixedTableRendering = isFixed;\n\n          this._addVirtualRow($(element), isFixed, \"top\", top);\n\n          this._addVirtualRow($(element), isFixed, \"bottom\", bottom);\n\n          this._isFixedTableRendering = false;\n        });\n      }\n    },\n    _isTableLinesDisplaysCorrect: function (table) {\n      var hasColumnLines = table.find(\".\" + COLUMN_LINES_CLASS).length > 0;\n      return hasColumnLines === this.option(\"showColumnLines\");\n    },\n    _isColumnElementsEqual: function ($columns, $virtualColumns) {\n      var result = $columns.length === $virtualColumns.length;\n\n      if (result) {\n        each($columns, function (index, element) {\n          if (element.style.width !== $virtualColumns[index].style.width) {\n            result = false;\n            return result;\n          }\n        });\n      }\n\n      return result;\n    },\n    _getCellClasses: function (column) {\n      var classes = [];\n      var cssClass = column.cssClass;\n      var isExpandColumn = \"expand\" === column.command;\n      cssClass && classes.push(cssClass);\n      isExpandColumn && classes.push(this.addWidgetPrefix(GROUP_SPACE_CLASS));\n      return classes;\n    },\n    _findBottomLoadPanel: function ($contentElement) {\n      var $element = $contentElement || this.element();\n      var $bottomLoadPanel = $element && $element.find(\".\" + this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS));\n\n      if ($bottomLoadPanel && $bottomLoadPanel.length) {\n        return $bottomLoadPanel;\n      }\n    },\n    _updateBottomLoading: function () {\n      var virtualMode = isVirtualMode(this);\n      var appendMode = isAppendMode(this);\n      var showBottomLoading = !this._dataController.hasKnownLastPage() && this._dataController.isLoaded() && (virtualMode || appendMode);\n\n      var $contentElement = this._findContentElement();\n\n      var bottomLoadPanelElement = this._findBottomLoadPanel($contentElement);\n\n      if (showBottomLoading) {\n        if (!bottomLoadPanelElement) {\n          $(\"<div>\").addClass(this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS)).append(this._createComponent($(\"<div>\"), LoadIndicator).$element()).appendTo($contentElement);\n        }\n      } else if (bottomLoadPanelElement) {\n        bottomLoadPanelElement.remove();\n      }\n    },\n    _handleScroll: function (e) {\n      var legacyScrollingMode = true === this.option(LEGACY_SCROLLING_MODE);\n      var zeroTopPosition = 0 === e.scrollOffset.top;\n\n      if ((this._hasHeight || !legacyScrollingMode && zeroTopPosition) && this._rowHeight) {\n        this._dataController.setViewportPosition(e.scrollOffset.top);\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    _needUpdateRowHeight: function (itemsCount) {\n      return this.callBase.apply(this, arguments) || itemsCount > 0 && isAppendMode(this) && !gridCoreUtils.isVirtualRowRendering(this);\n    },\n    _updateRowHeight: function () {\n      this.callBase.apply(this, arguments);\n\n      if (this._rowHeight) {\n        this._updateContentPosition();\n\n        var viewportHeight = this._hasHeight ? getOuterHeight(this.element()) : getOuterHeight(getWindow());\n        var dataController = this._dataController;\n\n        if (false === this.option(LEGACY_SCROLLING_MODE)) {\n          dataController.viewportHeight(viewportHeight);\n          dataController.updateViewport();\n        } else {\n          dataController.viewportSize(Math.ceil(viewportHeight / this._rowHeight));\n        }\n      }\n    },\n    updateFreeSpaceRowHeight: function () {\n      var result = this.callBase.apply(this, arguments);\n\n      if (result) {\n        this._updateContentPosition();\n      }\n\n      return result;\n    },\n    setLoading: function (isLoading, messageText) {\n      var dataController = this._dataController;\n      var hasBottomLoadPanel = dataController.pageIndex() > 0 && dataController.isLoaded() && !!this._findBottomLoadPanel();\n\n      if (false === this.option(LEGACY_SCROLLING_MODE) && isLoading && dataController.isViewportChanging()) {\n        return;\n      }\n\n      if (hasBottomLoadPanel) {\n        isLoading = false;\n      }\n\n      this.callBase.call(this, isLoading, messageText);\n    },\n    _resizeCore: function () {\n      var that = this;\n      var $element = that.element();\n      that.callBase();\n\n      if (that.component.$element() && !that._windowScroll && $element.closest(getWindow().document).length) {\n        that._windowScroll = subscribeToExternalScrollers($element, function (scrollPos) {\n          if (!that._hasHeight && that._rowHeight) {\n            that._dataController.setViewportPosition(scrollPos);\n          }\n        }, that.component.$element());\n        that.on(\"disposing\", function () {\n          that._windowScroll.dispose();\n        });\n      }\n\n      if (false !== this.option(LEGACY_SCROLLING_MODE)) {\n        that.loadIfNeed();\n      }\n    },\n    loadIfNeed: function () {\n      var _dataController$loadI;\n\n      var dataController = this._dataController;\n      null === dataController || void 0 === dataController ? void 0 : null === (_dataController$loadI = dataController.loadIfNeed) || void 0 === _dataController$loadI ? void 0 : _dataController$loadI.call(dataController);\n    },\n    setColumnWidths: function (widths) {\n      var scrollable = this.getScrollable();\n      var $content;\n      this.callBase.apply(this, arguments);\n\n      if (\"virtual\" === this.option(\"scrolling.mode\")) {\n        $content = scrollable ? $(scrollable.content()) : this.element();\n        this.callBase(widths, $content.children(\".\" + this.addWidgetPrefix(CONTENT_CLASS)).children(\":not(.\" + this.addWidgetPrefix(TABLE_CONTENT_CLASS) + \")\"));\n      }\n    },\n    _restoreErrorRow: function () {\n      if (false === this.option(LEGACY_SCROLLING_MODE)) {\n        var errorHandling = this.getController(\"errorHandling\");\n        null === errorHandling || void 0 === errorHandling ? void 0 : errorHandling.removeErrorRow();\n      }\n\n      this.callBase.apply(this, arguments);\n    },\n    dispose: function () {\n      clearTimeout(this._scrollTimeoutID);\n      this.callBase();\n    }\n  };\n}();\n\nexport var virtualScrollingModule = {\n  defaultOptions: function () {\n    return {\n      scrolling: {\n        timeout: 300,\n        updateTimeout: 300,\n        minTimeout: 0,\n        renderingThreshold: 100,\n        removeInvisiblePages: true,\n        rowPageSize: 5,\n        prerenderedRowChunkSize: 1,\n        mode: \"standard\",\n        preloadEnabled: false,\n        rowRenderingMode: \"standard\",\n        loadTwoPagesOnStart: false,\n        legacyMode: false,\n        prerenderedRowCount: 1\n      }\n    };\n  },\n  extenders: {\n    dataSourceAdapter: VirtualScrollingDataSourceAdapterExtender,\n    controllers: {\n      data: function () {\n        var members = {\n          _refreshDataSource: function () {\n            var baseResult = this.callBase.apply(this, arguments) || new Deferred().resolve().promise();\n            baseResult.done(this.initVirtualRows.bind(this));\n            return baseResult;\n          },\n          _loadDataSource: function () {\n            if (this._rowsScrollController) {\n              var _this$getLoadPagePara, _this$_dataSource;\n\n              var {\n                loadPageCount: loadPageCount\n              } = null !== (_this$getLoadPagePara = this.getLoadPageParams()) && void 0 !== _this$getLoadPagePara ? _this$getLoadPagePara : {};\n              loadPageCount >= 1 && (null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.loadPageCount(loadPageCount));\n            }\n\n            return this.callBase.apply(this, arguments);\n          },\n          getRowPageSize: function () {\n            var rowPageSize = this.option(\"scrolling.rowPageSize\");\n            var pageSize = this.pageSize();\n            return pageSize && pageSize < rowPageSize ? pageSize : rowPageSize;\n          },\n          reload: function () {\n            var rowsScrollController = this._rowsScrollController || this._dataSource;\n            var itemIndex = rowsScrollController && rowsScrollController.getItemIndexByPosition();\n            var result = this.callBase.apply(this, arguments);\n            return result && result.done(() => {\n              if (isVirtualMode(this) || gridCoreUtils.isVirtualRowRendering(this)) {\n                var rowIndexOffset = this.getRowIndexOffset();\n                var rowIndex = Math.floor(itemIndex) - rowIndexOffset;\n                var component = this.component;\n                var scrollable = component.getScrollable && component.getScrollable();\n                var isSortingOperation = this.dataSource().operationTypes().sorting;\n\n                if (scrollable && !isSortingOperation) {\n                  var rowElement = component.getRowElement(rowIndex);\n                  var $rowElement = rowElement && rowElement[0] && $(rowElement[0]);\n                  var top = $rowElement && $rowElement.position().top;\n                  var isChromeLatest = browser.chrome && browser.version >= 91;\n                  var allowedTopOffset = browser.mozilla || isChromeLatest ? 1 : 0;\n\n                  if (top > allowedTopOffset) {\n                    top = Math.round(top + getOuterHeight($rowElement) * (itemIndex % 1));\n                    scrollable.scrollTo({\n                      y: top\n                    });\n                  }\n                }\n              }\n            });\n          },\n          initVirtualRows: function () {\n            var virtualRowsRendering = gridCoreUtils.isVirtualRowRendering(this);\n            this._allItems = null;\n            this._loadViewportParams = null;\n\n            if (\"virtual\" !== this.option(\"scrolling.mode\") && true !== virtualRowsRendering || false === virtualRowsRendering || false !== this.option(LEGACY_SCROLLING_MODE) && !this.option(\"scrolling.rowPageSize\")) {\n              this._visibleItems = null;\n              this._rowsScrollController = null;\n              return;\n            }\n\n            var pageIndex = !isVirtualMode(this) && this.pageIndex() >= this.pageCount() ? this.pageCount() - 1 : this.pageIndex();\n            this._rowPageIndex = Math.ceil(pageIndex * this.pageSize() / this.getRowPageSize());\n            this._visibleItems = false === this.option(LEGACY_SCROLLING_MODE) ? null : [];\n            this._viewportChanging = false;\n            this._needUpdateViewportAfterLoading = false;\n\n            if (!this._rowsScrollController) {\n              this._rowsScrollController = new VirtualScrollController(this.component, this._getRowsScrollDataOptions(), true);\n\n              this._rowsScrollController.positionChanged.add(() => {\n                var _this$_dataSource2;\n\n                if (false === this.option(LEGACY_SCROLLING_MODE)) {\n                  this._viewportChanging = true;\n                  this.loadViewport();\n                  this._viewportChanging = false;\n                  return;\n                }\n\n                null === (_this$_dataSource2 = this._dataSource) || void 0 === _this$_dataSource2 ? void 0 : _this$_dataSource2.setViewportItemIndex(this._rowsScrollController.getViewportItemIndex());\n              });\n            }\n\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\n              this._updateLoadViewportParams();\n            }\n\n            if (this.isLoaded() && false !== this.option(LEGACY_SCROLLING_MODE)) {\n              this._rowsScrollController.load();\n            }\n          },\n          isViewportChanging: function () {\n            return this._viewportChanging;\n          },\n          _getRowsScrollDataOptions: function () {\n            var that = this;\n\n            var isItemCountable = function (item) {\n              return isItemCountableByDataSource(item, that._dataSource);\n            };\n\n            return {\n              pageSize: function () {\n                return that.getRowPageSize();\n              },\n              loadedOffset: function () {\n                var _that$_dataSource;\n\n                return isVirtualMode(that) && (null === (_that$_dataSource = that._dataSource) || void 0 === _that$_dataSource ? void 0 : _that$_dataSource.lastLoadOptions().skip) || 0;\n              },\n              loadedItemCount: function () {\n                return that._itemCount;\n              },\n              totalItemsCount: function () {\n                if (isVirtualPaging(that)) {\n                  return that.totalItemsCount();\n                }\n\n                return false === that.option(LEGACY_SCROLLING_MODE) ? that._itemCount : that._items.filter(isItemCountable).length;\n              },\n              hasKnownLastPage: function () {\n                return true;\n              },\n              pageIndex: function (index) {\n                if (void 0 !== index) {\n                  that._rowPageIndex = index;\n                }\n\n                return that._rowPageIndex;\n              },\n              isLoading: function () {\n                return that.isLoading();\n              },\n              pageCount: function () {\n                var pageCount = Math.ceil(this.totalItemsCount() / this.pageSize());\n                return pageCount ? pageCount : 1;\n              },\n              load: function () {\n                if (that._rowsScrollController.pageIndex() >= this.pageCount()) {\n                  that._rowPageIndex = this.pageCount() - 1;\n\n                  that._rowsScrollController.pageIndex(that._rowPageIndex);\n                }\n\n                if (!this.items().length && this.totalItemsCount()) {\n                  return;\n                }\n\n                that._rowsScrollController.handleDataChanged(change => {\n                  change = change || {};\n                  change.changeType = change.changeType || \"refresh\";\n                  change.items = change.items || that._visibleItems;\n\n                  that._visibleItems.forEach((item, index) => {\n                    item.rowIndex = index;\n                  });\n\n                  that._fireChanged(change);\n                });\n              },\n              updateLoading: function () {},\n              itemsCount: function () {\n                return this.items(true).length;\n              },\n              correctCount: function (items, count, fromEnd) {\n                return _correctCount(items, count, fromEnd, (item, isNextAfterLast, fromEnd) => {\n                  if (item.isNewRow) {\n                    return isNextAfterLast && !fromEnd;\n                  }\n\n                  if (isNextAfterLast && fromEnd) {\n                    return !item.isNewRow;\n                  }\n\n                  return isItemCountable(item);\n                });\n              },\n              items: function (countableOnly) {\n                var result = that._items;\n\n                if (that.option(LEGACY_SCROLLING_MODE)) {\n                  var dataSource = that.dataSource();\n                  var virtualItemsCount = null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount();\n                  var begin = virtualItemsCount ? virtualItemsCount.begin : 0;\n                  var rowPageSize = that.getRowPageSize();\n                  var skip = that._rowPageIndex * rowPageSize - begin;\n                  var take = rowPageSize;\n\n                  if (skip < 0) {\n                    return [];\n                  }\n\n                  if (skip) {\n                    skip = this.correctCount(result, skip);\n                    result = result.slice(skip);\n                  }\n\n                  if (take) {\n                    take = this.correctCount(result, take);\n                    result = result.slice(0, take);\n                  }\n                }\n\n                return countableOnly ? result.filter(isItemCountable) : result;\n              },\n              viewportItems: function (items) {\n                if (items && false !== that.option(LEGACY_SCROLLING_MODE)) {\n                  that._visibleItems = items;\n                }\n\n                return that._visibleItems;\n              },\n              onChanged: function () {},\n              changingDuration: function (e) {\n                var dataSource = that.dataSource();\n\n                if (null !== dataSource && void 0 !== dataSource && dataSource.isLoading() && false !== that.option(LEGACY_SCROLLING_MODE)) {\n                  return LOAD_TIMEOUT;\n                }\n\n                return (null === dataSource || void 0 === dataSource ? void 0 : dataSource._renderTime) || 0;\n              }\n            };\n          },\n          _updateItemsCore: function (change) {\n            var delta = this.getRowIndexDelta();\n            this.callBase.apply(this, arguments);\n\n            if (false === this.option(LEGACY_SCROLLING_MODE) && gridCoreUtils.isVirtualRowRendering(this)) {\n              if (\"update\" === change.changeType && 0 === change.rowIndices.length && change.cancelEmptyChanges) {\n                change.cancel = true;\n              }\n\n              return;\n            }\n\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              var visibleItems = this._visibleItems;\n              var isRefresh = \"refresh\" === change.changeType || change.isLiveUpdate;\n\n              if (\"append\" === change.changeType && change.items && !change.items.length) {\n                return;\n              }\n\n              if (isRefresh || \"append\" === change.changeType || \"prepend\" === change.changeType) {\n                change.cancel = true;\n                isRefresh && rowsScrollController.reset(true);\n                rowsScrollController.load();\n              } else {\n                if (\"update\" === change.changeType) {\n                  change.rowIndices.forEach((rowIndex, index) => {\n                    var changeType = change.changeTypes[index];\n                    var newItem = change.items[index];\n\n                    if (\"update\" === changeType) {\n                      visibleItems[rowIndex] = newItem;\n                    } else if (\"insert\" === changeType) {\n                      visibleItems.splice(rowIndex, 0, newItem);\n                    } else if (\"remove\" === changeType) {\n                      visibleItems.splice(rowIndex, 1);\n                    }\n                  });\n                } else {\n                  visibleItems.forEach((item, index) => {\n                    visibleItems[index] = this._items[index + delta] || visibleItems[index];\n                  });\n                  change.items = visibleItems;\n                }\n\n                updateItemIndices(visibleItems);\n              }\n            }\n          },\n          _updateLoadViewportParams: function () {\n            var viewportParams = this._rowsScrollController.getViewportParams();\n\n            var pageSize = this.pageSize();\n\n            if (viewportParams && !isVirtualPaging(this) && pageSize > 0) {\n              var pageOffset = this.pageIndex() * pageSize;\n              viewportParams.skip += pageOffset;\n            }\n\n            this._loadViewportParams = viewportParams;\n          },\n          _processItems: function (items) {\n            var newItems = this.callBase.apply(this, arguments);\n\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\n              var _dataSource$lastLoadO;\n\n              var dataSource = this._dataSource;\n              var currentIndex = null !== (_dataSource$lastLoadO = null === dataSource || void 0 === dataSource ? void 0 : dataSource.lastLoadOptions().skip) && void 0 !== _dataSource$lastLoadO ? _dataSource$lastLoadO : 0;\n              var prevCountable;\n              var prevRowType;\n              var isPrevRowNew;\n              var wasCountableItem = false;\n              newItems.forEach(item => {\n                var rowType = item.rowType;\n                var itemCountable = isItemCountableByDataSource(item, dataSource);\n\n                if (!item.isNewRow && isDefined(prevCountable)) {\n                  var isNextGroupItem = \"group\" === rowType && (prevCountable || itemCountable || \"group\" !== prevRowType && currentIndex > 0);\n                  var isNextDataItem = \"data\" === rowType && itemCountable && (prevCountable || \"group\" !== prevRowType);\n                  var isPrevNewRowFirst = isPrevRowNew && !wasCountableItem;\n\n                  if (isNextGroupItem || isNextDataItem) {\n                    wasCountableItem = true;\n\n                    if (!isPrevNewRowFirst) {\n                      currentIndex++;\n                    }\n                  }\n                }\n\n                item.loadIndex = currentIndex;\n                prevCountable = itemCountable;\n                prevRowType = rowType;\n                isPrevRowNew = item.isNewRow;\n              });\n            }\n\n            return newItems;\n          },\n          _afterProcessItems: function (items) {\n            this._itemCount = items.filter(item => isItemCountableByDataSource(item, this._dataSource)).length;\n\n            if (isDefined(this._loadViewportParams)) {\n              this._updateLoadViewportParams();\n\n              var result = items;\n              this._allItems = items;\n\n              if (items.length) {\n                var {\n                  skipForCurrentPage: skipForCurrentPage\n                } = this.getLoadPageParams(true);\n                var skip = items[0].loadIndex + skipForCurrentPage;\n                var take = this._loadViewportParams.take;\n                result = items.filter(it => {\n                  var isNewRowOnStart = it.isNewRow && it.loadIndex >= skip - 1;\n                  var isNewRowInEmptyData = it.isNewRow && it.loadIndex === skip && 0 === take;\n                  var isLoadIndexGreaterStart = it.loadIndex >= skip || isNewRowOnStart;\n                  var isLoadIndexLessEnd = it.loadIndex < skip + take || isNewRowInEmptyData;\n                  return isLoadIndexGreaterStart && isLoadIndexLessEnd;\n                });\n              }\n\n              return result;\n            }\n\n            return this.callBase.apply(this, arguments);\n          },\n          _applyChange: function (change) {\n            var that = this;\n            var items = change.items;\n            var changeType = change.changeType;\n            var removeCount = change.removeCount;\n\n            if (removeCount) {\n              var fromEnd = \"prepend\" === changeType;\n              removeCount = _correctCount(that._items, removeCount, fromEnd, function (item, isNextAfterLast) {\n                return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && (that._dataSource.isGroupItemCountable(item.data) || isNextAfterLast);\n              });\n              change.removeCount = removeCount;\n            }\n\n            switch (changeType) {\n              case \"prepend\":\n                that._items.unshift.apply(that._items, items);\n\n                if (removeCount) {\n                  that._items.splice(-removeCount);\n                }\n\n                break;\n\n              case \"append\":\n                that._items.push.apply(that._items, items);\n\n                if (removeCount) {\n                  that._items.splice(0, removeCount);\n                }\n\n                break;\n\n              default:\n                that.callBase(change);\n            }\n          },\n          items: function (allItems) {\n            return allItems ? this._allItems || this._items : this._visibleItems || this._items;\n          },\n          getRowIndexDelta: function () {\n            var delta = 0;\n\n            if (this.option(LEGACY_SCROLLING_MODE)) {\n              var visibleItems = this._visibleItems;\n\n              if (visibleItems && visibleItems[0]) {\n                delta = this._items.indexOf(visibleItems[0]);\n              }\n            }\n\n            return delta < 0 ? 0 : delta;\n          },\n          getRowIndexOffset: function (byLoadedRows) {\n            var offset = 0;\n            var dataSource = this.dataSource();\n            var rowsScrollController = this._rowsScrollController;\n            var newMode = false === this.option(LEGACY_SCROLLING_MODE);\n            var virtualPaging = isVirtualPaging(this);\n\n            if (rowsScrollController && !byLoadedRows) {\n              if (newMode && isDefined(this._loadViewportParams)) {\n                var {\n                  skipForCurrentPage: skipForCurrentPage,\n                  pageIndex: pageIndex\n                } = this.getLoadPageParams(true);\n                var items = this.items(true);\n                offset = virtualPaging ? pageIndex * this.pageSize() : 0;\n\n                if (items.length) {\n                  var firstLoadIndex = items[0].loadIndex;\n                  offset += items.filter(item => item.loadIndex < firstLoadIndex + skipForCurrentPage).length;\n                }\n              } else {\n                offset = rowsScrollController.beginPageIndex() * rowsScrollController.pageSize();\n              }\n            } else if (virtualPaging && newMode && dataSource) {\n              var _dataSource$lastLoadO2;\n\n              offset = null !== (_dataSource$lastLoadO2 = dataSource.lastLoadOptions().skip) && void 0 !== _dataSource$lastLoadO2 ? _dataSource$lastLoadO2 : 0;\n            } else if (isVirtualMode(this) && dataSource) {\n              offset = dataSource.beginPageIndex() * dataSource.pageSize();\n            }\n\n            return offset;\n          },\n          viewportSize: function () {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n            var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportSize.apply(rowsScrollController, arguments);\n\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\n              return result;\n            }\n\n            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportSize.apply(dataSource, arguments);\n          },\n          viewportHeight: function (height) {\n            var _this$_rowsScrollCont;\n\n            null === (_this$_rowsScrollCont = this._rowsScrollController) || void 0 === _this$_rowsScrollCont ? void 0 : _this$_rowsScrollCont.viewportHeight(height);\n          },\n          viewportItemSize: function () {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n            var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportItemSize.apply(rowsScrollController, arguments);\n\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\n              return result;\n            }\n\n            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportItemSize.apply(dataSource, arguments);\n          },\n          setViewportPosition: function () {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n\n            if (rowsScrollController) {\n              rowsScrollController.setViewportPosition.apply(rowsScrollController, arguments);\n            } else {\n              null === dataSource || void 0 === dataSource ? void 0 : dataSource.setViewportPosition.apply(dataSource, arguments);\n            }\n          },\n          setContentItemSizes: function (sizes) {\n            var rowsScrollController = this._rowsScrollController;\n            var dataSource = this._dataSource;\n            var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.setContentItemSizes(sizes);\n\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\n              return result;\n            }\n\n            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.setContentItemSizes(sizes);\n          },\n          getPreloadedRowCount: function () {\n            var preloadCount = this.option(\"scrolling.preloadedRowCount\");\n            var preloadEnabled = this.option(\"scrolling.preloadEnabled\");\n\n            if (isDefined(preloadCount)) {\n              return preloadCount;\n            }\n\n            var viewportSize = this.viewportSize();\n            return preloadEnabled ? 2 * viewportSize : viewportSize;\n          },\n          getLoadPageParams: function (byLoadedPage) {\n            var _this$_dataSource3, _this$_dataSource4;\n\n            var pageSize = this.pageSize();\n            var viewportParams = this._loadViewportParams;\n            var lastLoadOptions = null === (_this$_dataSource3 = this._dataSource) || void 0 === _this$_dataSource3 ? void 0 : _this$_dataSource3.lastLoadOptions();\n            var loadedPageIndex = (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.pageIndex) || 0;\n            var loadedTake = (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.take) || 0;\n\n            var isScrollingBack = this._rowsScrollController.isScrollingBack();\n\n            var topPreloadCount = isScrollingBack ? this.getPreloadedRowCount() : 0;\n            var bottomPreloadCount = isScrollingBack ? 0 : this.getPreloadedRowCount();\n            var totalCountCorrection = (null === (_this$_dataSource4 = this._dataSource) || void 0 === _this$_dataSource4 ? void 0 : _this$_dataSource4.totalCountCorrection()) || 0;\n            var skipWithPreload = Math.max(0, viewportParams.skip - topPreloadCount);\n            var pageIndex = byLoadedPage ? loadedPageIndex : Math.floor(pageSize ? skipWithPreload / pageSize : 0);\n            var pageOffset = pageIndex * pageSize;\n            var skipForCurrentPage = viewportParams.skip - pageOffset;\n            var loadingTake = viewportParams.take + skipForCurrentPage + bottomPreloadCount - totalCountCorrection;\n            var take = byLoadedPage ? loadedTake : loadingTake;\n            var loadPageCount = Math.ceil(pageSize ? take / pageSize : 0);\n            return {\n              pageIndex: pageIndex,\n              loadPageCount: Math.max(1, loadPageCount),\n              skipForCurrentPage: Math.max(0, skipForCurrentPage)\n            };\n          },\n          _updateVisiblePageIndex: function (currentPageIndex) {\n            if (!this._rowsScrollController) {\n              return;\n            }\n\n            if (isDefined(currentPageIndex)) {\n              this._silentOption(VISIBLE_PAGE_INDEX, currentPageIndex);\n\n              this.pageChanged.fire();\n              return;\n            }\n\n            var viewPortItemIndex = this._rowsScrollController.getViewportItemIndex();\n\n            var newPageIndex = Math.floor(viewPortItemIndex / this.pageSize());\n\n            if (this.pageIndex() !== newPageIndex) {\n              this._silentOption(VISIBLE_PAGE_INDEX, newPageIndex);\n\n              this.updateItems({\n                changeType: \"pageIndex\"\n              });\n            }\n          },\n          _getChangedLoadParams: function () {\n            var loadedPageParams = this.getLoadPageParams(true);\n            var {\n              pageIndex: pageIndex,\n              loadPageCount: loadPageCount\n            } = this.getLoadPageParams();\n            var result = null;\n\n            if (!this._isLoading && (pageIndex !== loadedPageParams.pageIndex || loadPageCount !== loadedPageParams.loadPageCount)) {\n              result = {\n                pageIndex: pageIndex,\n                loadPageCount: loadPageCount\n              };\n            }\n\n            return result;\n          },\n          _loadItems: function (checkLoading) {\n            var _dataSourceAdapter$lo, _dataSourceAdapter$pa;\n\n            var virtualPaging = isVirtualPaging(this);\n            var dataSourceAdapter = this._dataSource;\n\n            var changedParams = this._getChangedLoadParams();\n\n            var currentLoadPageCount = null !== (_dataSourceAdapter$lo = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.loadPageCount()) && void 0 !== _dataSourceAdapter$lo ? _dataSourceAdapter$lo : 0;\n            var lastRequiredItemCount = this.pageSize() * currentLoadPageCount;\n            var currentPageIndex = null !== (_dataSourceAdapter$pa = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.pageIndex()) && void 0 !== _dataSourceAdapter$pa ? _dataSourceAdapter$pa : 0;\n            var pageIndexNotChanged = (null === changedParams || void 0 === changedParams ? void 0 : changedParams.pageIndex) === currentPageIndex;\n            var allLoadedInAppendMode = isAppendMode(this) && this.totalItemsCount() < lastRequiredItemCount;\n            var result = false;\n\n            if (!dataSourceAdapter || virtualPaging && checkLoading && ((null === changedParams || void 0 === changedParams ? void 0 : changedParams.pageIndex) > currentPageIndex || pageIndexNotChanged && allLoadedInAppendMode)) {\n              return result;\n            }\n\n            if (virtualPaging && this._isLoading) {\n              this._needUpdateViewportAfterLoading = true;\n            }\n\n            if (virtualPaging && changedParams) {\n              result = true;\n              dataSourceAdapter.pageIndex(changedParams.pageIndex);\n              dataSourceAdapter.loadPageCount(changedParams.loadPageCount);\n              this._repaintChangesOnly = true;\n              this._needUpdateDimensions = true;\n              var viewportChanging = this._viewportChanging;\n              this.load().always(() => {\n                this._repaintChangesOnly = void 0;\n                this._needUpdateDimensions = void 0;\n              }).done(() => {\n                var isLastPage = this.pageCount() > 0 && this.pageIndex() === this.pageCount() - 1;\n                (viewportChanging || isLastPage) && this._updateVisiblePageIndex();\n\n                if (this._needUpdateViewportAfterLoading) {\n                  this._needUpdateViewportAfterLoading = false;\n                  this.loadViewport({\n                    checkLoadedParamsOnly: true\n                  });\n                }\n              });\n            }\n\n            return result;\n          },\n          loadViewport: function (params) {\n            var {\n              checkLoadedParamsOnly: checkLoadedParamsOnly,\n              checkLoading: checkLoading\n            } = null !== params && void 0 !== params ? params : {};\n            var virtualPaging = isVirtualPaging(this);\n\n            if (virtualPaging || gridCoreUtils.isVirtualRowRendering(this)) {\n              this._updateLoadViewportParams();\n\n              var loadingItemsStarted = this._loadItems(checkLoading);\n\n              if (!loadingItemsStarted && !(this._isLoading && checkLoading) && !checkLoadedParamsOnly) {\n                this.updateItems({\n                  repaintChangesOnly: true,\n                  needUpdateDimensions: true,\n                  useProcessedItemsCache: true,\n                  cancelEmptyChanges: true\n                });\n              }\n            }\n          },\n          updateViewport: function () {\n            var _this$_loadViewportPa, _this$_loadViewportPa2;\n\n            var viewportSize = this.viewportSize();\n            var itemCount = this.items().length;\n            var viewportIsNotFilled = viewportSize > itemCount;\n            var currentTake = null !== (_this$_loadViewportPa = null === (_this$_loadViewportPa2 = this._loadViewportParams) || void 0 === _this$_loadViewportPa2 ? void 0 : _this$_loadViewportPa2.take) && void 0 !== _this$_loadViewportPa ? _this$_loadViewportPa : 0;\n            var rowsScrollController = this._rowsScrollController;\n            var newTake = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.getViewportParams().take;\n            (viewportIsNotFilled || currentTake < newTake) && itemCount && this.loadViewport({\n              checkLoading: true\n            });\n          },\n          loadIfNeed: function () {\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\n              return;\n            }\n\n            var rowsScrollController = this._rowsScrollController;\n            rowsScrollController && rowsScrollController.loadIfNeed();\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.loadIfNeed();\n          },\n          getItemSize: function () {\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              return rowsScrollController.getItemSize.apply(rowsScrollController, arguments);\n            }\n\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.getItemSize.apply(dataSource, arguments);\n          },\n          getItemSizes: function () {\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              return rowsScrollController.getItemSizes.apply(rowsScrollController, arguments);\n            }\n\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.getItemSizes.apply(dataSource, arguments);\n          },\n          getContentOffset: function () {\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              return rowsScrollController.getContentOffset.apply(rowsScrollController, arguments);\n            }\n\n            var dataSource = this._dataSource;\n            return dataSource && dataSource.getContentOffset.apply(dataSource, arguments);\n          },\n          refresh: function (options) {\n            var dataSource = this._dataSource;\n\n            if (dataSource && options && options.load && isAppendMode(this)) {\n              dataSource.resetCurrentTotalCount();\n            }\n\n            return this.callBase.apply(this, arguments);\n          },\n          dispose: function () {\n            var rowsScrollController = this._rowsScrollController;\n            rowsScrollController && rowsScrollController.dispose();\n            this.callBase.apply(this, arguments);\n          },\n          topItemIndex: function () {\n            var _this$_loadViewportPa3;\n\n            return null === (_this$_loadViewportPa3 = this._loadViewportParams) || void 0 === _this$_loadViewportPa3 ? void 0 : _this$_loadViewportPa3.skip;\n          },\n          bottomItemIndex: function () {\n            var viewportParams = this._loadViewportParams;\n            return viewportParams && viewportParams.skip + viewportParams.take;\n          },\n          virtualItemsCount: function () {\n            var rowsScrollController = this._rowsScrollController;\n\n            if (rowsScrollController) {\n              return rowsScrollController.virtualItemsCount.apply(rowsScrollController, arguments);\n            }\n\n            var dataSource = this._dataSource;\n            return null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount.apply(dataSource, arguments);\n          },\n          pageIndex: function (_pageIndex) {\n            var virtualPaging = isVirtualPaging(this);\n            var rowsScrollController = this._rowsScrollController;\n\n            if (false === this.option(LEGACY_SCROLLING_MODE) && virtualPaging && rowsScrollController) {\n              if (void 0 === _pageIndex) {\n                var _this$option;\n\n                return null !== (_this$option = this.option(VISIBLE_PAGE_INDEX)) && void 0 !== _this$option ? _this$option : 0;\n              }\n            }\n\n            return this.callBase.apply(this, arguments);\n          },\n          _fireChanged: function (e) {\n            this.callBase.apply(this, arguments);\n            var {\n              operationTypes: operationTypes\n            } = e;\n\n            if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this) && operationTypes) {\n              if (e.isDataChanged && operationTypes.pageIndex && !operationTypes.fullReload) {\n                this._updateVisiblePageIndex(this._dataSource.pageIndex());\n              }\n            }\n          },\n          _getPagingOptionValue: function (optionName) {\n            var result = this.callBase.apply(this, arguments);\n\n            if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this)) {\n              result = this[optionName]();\n            }\n\n            return result;\n          },\n          isEmpty: function () {\n            return false === this.option(LEGACY_SCROLLING_MODE) ? !this.items(true).length : this.callBase(this, arguments);\n          },\n          isLastPageLoaded: function () {\n            var result = false;\n\n            if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this)) {\n              var {\n                pageIndex: pageIndex,\n                loadPageCount: loadPageCount\n              } = this.getLoadPageParams(true);\n              var pageCount = this.pageCount();\n              result = pageIndex + loadPageCount >= pageCount;\n            } else {\n              result = this.callBase.apply(this, arguments);\n            }\n\n            return result;\n          },\n          reset: function () {\n            this._itemCount = 0;\n            this._allItems = null;\n            this.callBase.apply(this, arguments);\n          }\n        };\n        gridCoreUtils.proxyMethod(members, \"getVirtualContentSize\");\n        gridCoreUtils.proxyMethod(members, \"setViewportItemIndex\");\n        return members;\n      }(),\n      resizing: {\n        resize: function () {\n          var that = this;\n          var callBase = that.callBase;\n          var result;\n\n          if (isVirtualMode(that) || gridCoreUtils.isVirtualRowRendering(that)) {\n            clearTimeout(that._resizeTimeout);\n            var diff = new Date() - that._lastTime;\n            var updateTimeout = that.option(\"scrolling.updateTimeout\");\n\n            if (that._lastTime && diff < updateTimeout) {\n              result = new Deferred();\n              that._resizeTimeout = setTimeout(function () {\n                callBase.apply(that).done(result.resolve).fail(result.reject);\n                that._lastTime = new Date();\n              }, updateTimeout);\n              that._lastTime = new Date();\n            } else {\n              result = callBase.apply(that);\n\n              if (that._dataController.isLoaded()) {\n                that._lastTime = new Date();\n              }\n            }\n          } else {\n            result = callBase.apply(that);\n          }\n\n          return result;\n        },\n        dispose: function () {\n          this.callBase.apply(this, arguments);\n          clearTimeout(this._resizeTimeout);\n        }\n      }\n    },\n    views: {\n      rowsView: VirtualScrollingRowsViewExtender\n    }\n  }\n};","map":{"version":3,"sources":["C:/Personal/Tracker/FrontServerless/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.virtual_scrolling.js"],"names":["getOuterHeight","$","getWindow","VirtualScrollController","subscribeToExternalScrollers","gridCoreUtils","each","Deferred","LoadIndicator","browser","getBoundingRect","isDefined","BOTTOM_LOAD_PANEL_CLASS","TABLE_CONTENT_CLASS","GROUP_SPACE_CLASS","CONTENT_CLASS","FREESPACE_CLASS","COLUMN_LINES_CLASS","VIRTUAL_ROW_CLASS","SCROLLING_MODE_INFINITE","SCROLLING_MODE_VIRTUAL","LOAD_TIMEOUT","LEGACY_SCROLLING_MODE","VISIBLE_PAGE_INDEX","isVirtualMode","that","option","isAppendMode","isVirtualPaging","_correctCount","items","count","fromEnd","isItemCountableFunc","i","item","length","isItemCountableByDataSource","dataSource","rowType","isNewRow","isGroupItemCountable","data","updateItemIndices","forEach","index","rowIndex","VirtualScrollingDataSourceAdapterExtender","_updateLoading","beginPageIndex","_virtualScrollController","viewportSize","getViewportItemIndex","pageSize","itemsCount","_dataSource","isLoading","_isLoading","loadingChanged","fire","result","init","callBase","apply","arguments","_items","_isLoaded","_loadPageCount","component","_getVirtualScrollDataOptions","totalItemsCount","hasKnownLastPage","pageIndex","isCustomLoading","pageCount","load","updateLoading","viewportItems","onChanged","e","changed","changingDuration","_renderTime","_handleLoadingChanged","_isLoadingAll","_startLoadTime","Date","_handleLoadError","_handleDataChanged","slice","bind","handleDataChanged","_customizeRemoteOperations","options","operationTypes","newMode","renderAsync","reload","skip","delay","isBase","loadOptions","isLoaded","resetPagesCache","isLiveUpdate","reset","_changeRowExpandCore","virtualScrollController","d","done","r","delayDeferred","getDelayDeferred","resolve","fail","reject","refresh","storeLoadOptions","paginate","_totalCountCorrection","dispose","loadPageCount","_handleDataLoading","take","_loadPageSize","name","VirtualScrollingRowsViewExtender","removeEmptyRows","$emptyRows","className","tBodies","toArray","map","row","parent","get","filter","rowCount","eq","remove","_dataController$state","dataController","getController","pageChanged","add","scrollToPage","dataSourceChanged","_scrollTop","_scrollToCurrentPageOnResize","stateLoaded","resizeHandler","resizeCompleted","_dataController","scrollPosition","itemSize","getItemSize","itemSizes","getItemSizes","itemIndex","scrollTo","y","x","_scrollLeft","renderDelayedTemplates","_updateContentPosition","_renderCore","startRenderTime","itemCount","isVirtualRowRendering","_getRowElements","tableElement","$rows","not","_removeRowsElements","contentTable","removeCount","changeType","rowElements","errorHandlingController","rowElement","$rowElement","removeErrorRow","next","_updateContent","change","$freeSpaceRowElements","contentElement","_findContentElement","children","first","$tBodies","_getBodies","_getFreeSpaceRowElements","_restoreErrorRow","_updateBottomLoading","_addVirtualRow","$table","isFixed","location","position","$virtualRow","_createEmptyRow","_wrapRowIfNeed","_appendEmptyRow","_getRowHeights","rowHeights","_tableElement","height","_correctRowHeights","correctedRowHeights","visibleRows","getVisibleRows","firstCountableItem","lastLoadIndex","currentItem","loadIndex","push","isRender","rowHeight","_rowHeight","viewportItemSize","setContentItemSizes","top","getContentOffset","bottom","$tables","getTableElements","$virtualRows","element","_isFixedTableRendering","_isTableLinesDisplaysCorrect","table","hasColumnLines","find","_isColumnElementsEqual","$columns","$virtualColumns","style","width","_getCellClasses","column","classes","cssClass","isExpandColumn","command","addWidgetPrefix","_findBottomLoadPanel","$contentElement","$element","$bottomLoadPanel","virtualMode","appendMode","showBottomLoading","bottomLoadPanelElement","addClass","append","_createComponent","appendTo","_handleScroll","legacyScrollingMode","zeroTopPosition","scrollOffset","_hasHeight","setViewportPosition","_needUpdateRowHeight","_updateRowHeight","viewportHeight","updateViewport","Math","ceil","updateFreeSpaceRowHeight","setLoading","messageText","hasBottomLoadPanel","isViewportChanging","call","_resizeCore","_windowScroll","closest","document","scrollPos","on","loadIfNeed","_dataController$loadI","setColumnWidths","widths","scrollable","getScrollable","$content","content","errorHandling","clearTimeout","_scrollTimeoutID","virtualScrollingModule","defaultOptions","scrolling","timeout","updateTimeout","minTimeout","renderingThreshold","removeInvisiblePages","rowPageSize","prerenderedRowChunkSize","mode","preloadEnabled","rowRenderingMode","loadTwoPagesOnStart","legacyMode","prerenderedRowCount","extenders","dataSourceAdapter","controllers","members","_refreshDataSource","baseResult","promise","initVirtualRows","_loadDataSource","_rowsScrollController","_this$getLoadPagePara","_this$_dataSource","getLoadPageParams","getRowPageSize","rowsScrollController","getItemIndexByPosition","rowIndexOffset","getRowIndexOffset","floor","isSortingOperation","sorting","getRowElement","isChromeLatest","chrome","version","allowedTopOffset","mozilla","round","virtualRowsRendering","_allItems","_loadViewportParams","_visibleItems","_rowPageIndex","_viewportChanging","_needUpdateViewportAfterLoading","_getRowsScrollDataOptions","positionChanged","_this$_dataSource2","loadViewport","setViewportItemIndex","_updateLoadViewportParams","isItemCountable","loadedOffset","_that$_dataSource","lastLoadOptions","loadedItemCount","_itemCount","_fireChanged","correctCount","isNextAfterLast","countableOnly","virtualItemsCount","begin","_updateItemsCore","delta","getRowIndexDelta","rowIndices","cancelEmptyChanges","cancel","visibleItems","isRefresh","changeTypes","newItem","splice","viewportParams","getViewportParams","pageOffset","_processItems","newItems","_dataSource$lastLoadO","currentIndex","prevCountable","prevRowType","isPrevRowNew","wasCountableItem","itemCountable","isNextGroupItem","isNextDataItem","isPrevNewRowFirst","_afterProcessItems","skipForCurrentPage","it","isNewRowOnStart","isNewRowInEmptyData","isLoadIndexGreaterStart","isLoadIndexLessEnd","_applyChange","unshift","allItems","indexOf","byLoadedRows","offset","virtualPaging","firstLoadIndex","_dataSource$lastLoadO2","_this$_rowsScrollCont","sizes","getPreloadedRowCount","preloadCount","byLoadedPage","_this$_dataSource3","_this$_dataSource4","loadedPageIndex","loadedTake","isScrollingBack","topPreloadCount","bottomPreloadCount","totalCountCorrection","skipWithPreload","max","loadingTake","_updateVisiblePageIndex","currentPageIndex","_silentOption","viewPortItemIndex","newPageIndex","updateItems","_getChangedLoadParams","loadedPageParams","_loadItems","checkLoading","_dataSourceAdapter$lo","_dataSourceAdapter$pa","changedParams","currentLoadPageCount","lastRequiredItemCount","pageIndexNotChanged","allLoadedInAppendMode","_repaintChangesOnly","_needUpdateDimensions","viewportChanging","always","isLastPage","checkLoadedParamsOnly","params","loadingItemsStarted","repaintChangesOnly","needUpdateDimensions","useProcessedItemsCache","_this$_loadViewportPa","_this$_loadViewportPa2","viewportIsNotFilled","currentTake","newTake","resetCurrentTotalCount","topItemIndex","_this$_loadViewportPa3","bottomItemIndex","_pageIndex","_this$option","isDataChanged","fullReload","_getPagingOptionValue","optionName","isEmpty","isLastPageLoaded","proxyMethod","resizing","resize","_resizeTimeout","diff","_lastTime","setTimeout","views","rowsView"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.virtual_scrolling.js)\r\n * Version: 21.2.5\r\n * Build date: Mon Jan 17 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    getOuterHeight\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    getWindow\r\n} from \"../../core/utils/window\";\r\nimport {\r\n    VirtualScrollController,\r\n    subscribeToExternalScrollers\r\n} from \"./ui.grid_core.virtual_scrolling_core\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport LoadIndicator from \"../load_indicator\";\r\nimport browser from \"../../core/utils/browser\";\r\nimport {\r\n    getBoundingRect\r\n} from \"../../core/utils/position\";\r\nimport {\r\n    isDefined\r\n} from \"../../core/utils/type\";\r\nvar BOTTOM_LOAD_PANEL_CLASS = \"bottom-load-panel\";\r\nvar TABLE_CONTENT_CLASS = \"table-content\";\r\nvar GROUP_SPACE_CLASS = \"group-space\";\r\nvar CONTENT_CLASS = \"content\";\r\nvar FREESPACE_CLASS = \"dx-freespace-row\";\r\nvar COLUMN_LINES_CLASS = \"dx-column-lines\";\r\nvar VIRTUAL_ROW_CLASS = \"dx-virtual-row\";\r\nvar SCROLLING_MODE_INFINITE = \"infinite\";\r\nvar SCROLLING_MODE_VIRTUAL = \"virtual\";\r\nvar LOAD_TIMEOUT = 300;\r\nvar LEGACY_SCROLLING_MODE = \"scrolling.legacyMode\";\r\nvar VISIBLE_PAGE_INDEX = \"paging.pageIndex\";\r\nvar isVirtualMode = function(that) {\r\n    return that.option(\"scrolling.mode\") === SCROLLING_MODE_VIRTUAL\r\n};\r\nvar isAppendMode = function(that) {\r\n    return that.option(\"scrolling.mode\") === SCROLLING_MODE_INFINITE\r\n};\r\nvar isVirtualPaging = function(that) {\r\n    return isVirtualMode(that) || isAppendMode(that)\r\n};\r\nvar _correctCount = function(items, count, fromEnd, isItemCountableFunc) {\r\n    for (var i = 0; i < count + 1; i++) {\r\n        var item = items[fromEnd ? items.length - 1 - i : i];\r\n        if (item && !isItemCountableFunc(item, i === count, fromEnd)) {\r\n            count++\r\n        }\r\n    }\r\n    return count\r\n};\r\nvar isItemCountableByDataSource = function(item, dataSource) {\r\n    return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && dataSource.isGroupItemCountable(item.data)\r\n};\r\nvar updateItemIndices = function(items) {\r\n    items.forEach((function(item, index) {\r\n        item.rowIndex = index\r\n    }));\r\n    return items\r\n};\r\nvar VirtualScrollingDataSourceAdapterExtender = function() {\r\n    var _updateLoading = function(that) {\r\n        var beginPageIndex = that._virtualScrollController.beginPageIndex(-1);\r\n        if (isVirtualMode(that)) {\r\n            if (beginPageIndex < 0 || that.viewportSize() >= 0 && that.getViewportItemIndex() >= 0 && (beginPageIndex * that.pageSize() > that.getViewportItemIndex() || beginPageIndex * that.pageSize() + that.itemsCount() < that.getViewportItemIndex() + that.viewportSize()) && that._dataSource.isLoading()) {\r\n                if (!that._isLoading) {\r\n                    that._isLoading = true;\r\n                    that.loadingChanged.fire(true)\r\n                }\r\n            } else if (that._isLoading) {\r\n                that._isLoading = false;\r\n                that.loadingChanged.fire(false)\r\n            }\r\n        }\r\n    };\r\n    var result = {\r\n        init: function() {\r\n            this.callBase.apply(this, arguments);\r\n            this._items = [];\r\n            this._isLoaded = true;\r\n            this._loadPageCount = 1;\r\n            this._virtualScrollController = new VirtualScrollController(this.component, this._getVirtualScrollDataOptions())\r\n        },\r\n        _getVirtualScrollDataOptions: function() {\r\n            var that = this;\r\n            return {\r\n                pageSize: function() {\r\n                    return that.pageSize()\r\n                },\r\n                totalItemsCount: function() {\r\n                    return that.totalItemsCount()\r\n                },\r\n                hasKnownLastPage: function() {\r\n                    return that.hasKnownLastPage()\r\n                },\r\n                pageIndex: function(index) {\r\n                    return that._dataSource.pageIndex(index)\r\n                },\r\n                isLoading: function() {\r\n                    return that._dataSource.isLoading() && !that.isCustomLoading()\r\n                },\r\n                pageCount: function() {\r\n                    return that.pageCount()\r\n                },\r\n                load: function() {\r\n                    return that._dataSource.load()\r\n                },\r\n                updateLoading: function() {\r\n                    _updateLoading(that)\r\n                },\r\n                itemsCount: function() {\r\n                    return that.itemsCount(true)\r\n                },\r\n                items: function() {\r\n                    return that._dataSource.items()\r\n                },\r\n                viewportItems: function(items) {\r\n                    if (items) {\r\n                        that._items = items\r\n                    }\r\n                    return that._items\r\n                },\r\n                onChanged: function(e) {\r\n                    that.changed.fire(e)\r\n                },\r\n                changingDuration: function(e) {\r\n                    if (that.isLoading()) {\r\n                        return LOAD_TIMEOUT\r\n                    }\r\n                    return that._renderTime || 0\r\n                }\r\n            }\r\n        },\r\n        _handleLoadingChanged: function(isLoading) {\r\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                this.callBase.apply(this, arguments);\r\n                return\r\n            }\r\n            if (!isVirtualMode(this) || this._isLoadingAll) {\r\n                this._isLoading = isLoading;\r\n                this.callBase.apply(this, arguments)\r\n            }\r\n            if (isLoading) {\r\n                this._startLoadTime = new Date\r\n            } else {\r\n                this._startLoadTime = void 0\r\n            }\r\n        },\r\n        _handleLoadError: function() {\r\n            if (false !== this.option(LEGACY_SCROLLING_MODE)) {\r\n                this._isLoading = false;\r\n                this.loadingChanged.fire(false)\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _handleDataChanged: function(e) {\r\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                this._items = this._dataSource.items().slice();\r\n                this.callBase.apply(this, arguments);\r\n                return\r\n            }\r\n            var callBase = this.callBase.bind(this);\r\n            this._virtualScrollController.handleDataChanged(callBase, e)\r\n        },\r\n        _customizeRemoteOperations: function(options, operationTypes) {\r\n            var newMode = false === this.option(LEGACY_SCROLLING_MODE);\r\n            var renderAsync = this.option(\"scrolling.renderAsync\");\r\n            if (!isDefined(renderAsync)) {\r\n                renderAsync = this._renderTime >= this.option(\"scrolling.renderingThreshold\")\r\n            }\r\n            if ((isVirtualMode(this) || isAppendMode(this) && newMode) && !operationTypes.reload && (operationTypes.skip || newMode) && !renderAsync) {\r\n                options.delay = void 0\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        items: function() {\r\n            return this._items\r\n        },\r\n        itemsCount: function(isBase) {\r\n            if (isBase || false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                return this.callBase()\r\n            }\r\n            return this._virtualScrollController.itemsCount()\r\n        },\r\n        load: function(loadOptions) {\r\n            if (false === this.option(LEGACY_SCROLLING_MODE) || loadOptions) {\r\n                return this.callBase(loadOptions)\r\n            }\r\n            return this._virtualScrollController.load()\r\n        },\r\n        isLoading: function() {\r\n            return false === this.option(LEGACY_SCROLLING_MODE) ? this._dataSource.isLoading() : this._isLoading\r\n        },\r\n        isLoaded: function() {\r\n            return this._dataSource.isLoaded() && this._isLoaded\r\n        },\r\n        resetPagesCache: function(isLiveUpdate) {\r\n            if (!isLiveUpdate) {\r\n                this._virtualScrollController.reset(true)\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _changeRowExpandCore: function() {\r\n            var result = this.callBase.apply(this, arguments);\r\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                return result\r\n            }\r\n            this.resetPagesCache();\r\n            _updateLoading(this);\r\n            return result\r\n        },\r\n        reload: function() {\r\n            this._dataSource.pageIndex(this.pageIndex());\r\n            var virtualScrollController = this._virtualScrollController;\r\n            if (false !== this.option(LEGACY_SCROLLING_MODE) && virtualScrollController) {\r\n                var d = new Deferred;\r\n                this.callBase.apply(this, arguments).done((function(r) {\r\n                    var delayDeferred = virtualScrollController.getDelayDeferred();\r\n                    if (delayDeferred) {\r\n                        delayDeferred.done(d.resolve).fail(d.reject)\r\n                    } else {\r\n                        d.resolve(r)\r\n                    }\r\n                })).fail(d.reject);\r\n                return d\r\n            } else {\r\n                return this.callBase.apply(this, arguments)\r\n            }\r\n        },\r\n        refresh: function(options, operationTypes) {\r\n            if (false !== this.option(LEGACY_SCROLLING_MODE)) {\r\n                var storeLoadOptions = options.storeLoadOptions;\r\n                var dataSource = this._dataSource;\r\n                if (operationTypes.reload) {\r\n                    this._virtualScrollController.reset();\r\n                    dataSource.items().length = 0;\r\n                    this._isLoaded = false;\r\n                    _updateLoading(this);\r\n                    this._isLoaded = true;\r\n                    if (isAppendMode(this)) {\r\n                        this.pageIndex(0);\r\n                        dataSource.pageIndex(0);\r\n                        storeLoadOptions.pageIndex = 0;\r\n                        options.pageIndex = 0;\r\n                        storeLoadOptions.skip = 0\r\n                    } else {\r\n                        dataSource.pageIndex(this.pageIndex());\r\n                        if (dataSource.paginate()) {\r\n                            options.pageIndex = this.pageIndex();\r\n                            storeLoadOptions.skip = this.pageIndex() * this.pageSize()\r\n                        }\r\n                    }\r\n                } else if (isAppendMode(this) && storeLoadOptions.skip && this._totalCountCorrection < 0) {\r\n                    storeLoadOptions.skip += this._totalCountCorrection\r\n                }\r\n            }\r\n            return this.callBase.apply(this, arguments)\r\n        },\r\n        dispose: function() {\r\n            this._virtualScrollController.dispose();\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        loadPageCount: function(count) {\r\n            if (!isDefined(count)) {\r\n                return this._loadPageCount\r\n            }\r\n            this._loadPageCount = count\r\n        },\r\n        _handleDataLoading: function(options) {\r\n            var loadPageCount = this.loadPageCount();\r\n            var pageSize = this.pageSize();\r\n            options.loadPageCount = loadPageCount;\r\n            if (!options.isCustomLoading && false === this.option(LEGACY_SCROLLING_MODE) && loadPageCount > 1 && pageSize > 0) {\r\n                options.storeLoadOptions.take = loadPageCount * pageSize\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _loadPageSize: function() {\r\n            return this.callBase.apply(this, arguments) * this.loadPageCount()\r\n        }\r\n    };\r\n    [\"beginPageIndex\", \"endPageIndex\", \"pageIndex\"].forEach((function(name) {\r\n        result[name] = function() {\r\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                var dataSource = this._dataSource;\r\n                return dataSource.pageIndex.apply(dataSource, arguments)\r\n            }\r\n            var virtualScrollController = this._virtualScrollController;\r\n            return virtualScrollController[name].apply(virtualScrollController, arguments)\r\n        }\r\n    }));\r\n    [\"virtualItemsCount\", \"getContentOffset\", \"getVirtualContentSize\", \"setContentItemSizes\", \"setViewportPosition\", \"getViewportItemIndex\", \"setViewportItemIndex\", \"getItemIndexByPosition\", \"viewportSize\", \"viewportItemSize\", \"getItemSize\", \"getItemSizes\", \"loadIfNeed\"].forEach((function(name) {\r\n        result[name] = function() {\r\n            var virtualScrollController = this._virtualScrollController;\r\n            return virtualScrollController[name].apply(virtualScrollController, arguments)\r\n        }\r\n    }));\r\n    return result\r\n}();\r\nvar VirtualScrollingRowsViewExtender = function() {\r\n    var removeEmptyRows = function($emptyRows, className) {\r\n        var tBodies = $emptyRows.toArray().map(row => $(row).parent(\".\" + className).get(0)).filter(row => row);\r\n        if (tBodies.length) {\r\n            $emptyRows = $(tBodies)\r\n        }\r\n        var rowCount = className === FREESPACE_CLASS ? $emptyRows.length - 1 : $emptyRows.length;\r\n        for (var i = 0; i < rowCount; i++) {\r\n            $emptyRows.eq(i).remove()\r\n        }\r\n    };\r\n    return {\r\n        init: function() {\r\n            var _dataController$state;\r\n            var dataController = this.getController(\"data\");\r\n            this.callBase();\r\n            dataController.pageChanged.add(pageIndex => {\r\n                this.scrollToPage(null !== pageIndex && void 0 !== pageIndex ? pageIndex : dataController.pageIndex())\r\n            });\r\n            dataController.dataSourceChanged.add(() => {\r\n                !this._scrollTop && this._scrollToCurrentPageOnResize()\r\n            });\r\n            null === (_dataController$state = dataController.stateLoaded) || void 0 === _dataController$state ? void 0 : _dataController$state.add(() => {\r\n                this._scrollToCurrentPageOnResize()\r\n            });\r\n            this._scrollToCurrentPageOnResize()\r\n        },\r\n        _scrollToCurrentPageOnResize: function() {\r\n            var dataController = this.getController(\"data\");\r\n            if (dataController.pageIndex() > 0) {\r\n                var resizeHandler = () => {\r\n                    this.resizeCompleted.remove(resizeHandler);\r\n                    this.scrollToPage(dataController.pageIndex())\r\n                };\r\n                this.resizeCompleted.add(resizeHandler)\r\n            }\r\n        },\r\n        scrollToPage: function(pageIndex) {\r\n            var dataController = this._dataController;\r\n            var pageSize = dataController ? dataController.pageSize() : 0;\r\n            var scrollPosition;\r\n            if (isVirtualMode(this) || isAppendMode(this)) {\r\n                var itemSize = dataController.getItemSize();\r\n                var itemSizes = dataController.getItemSizes();\r\n                var itemIndex = pageIndex * pageSize;\r\n                scrollPosition = itemIndex * itemSize;\r\n                for (var index in itemSizes) {\r\n                    if (index < itemIndex) {\r\n                        scrollPosition += itemSizes[index] - itemSize\r\n                    }\r\n                }\r\n            } else {\r\n                scrollPosition = 0\r\n            }\r\n            this.scrollTo({\r\n                y: scrollPosition,\r\n                x: this._scrollLeft\r\n            })\r\n        },\r\n        renderDelayedTemplates: function(e) {\r\n            this._updateContentPosition(true);\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _renderCore: function(e) {\r\n            var startRenderTime = new Date;\r\n            this.callBase.apply(this, arguments);\r\n            var dataSource = this._dataController._dataSource;\r\n            if (dataSource && e) {\r\n                var itemCount = e.items ? e.items.length : 20;\r\n                var viewportSize = this._dataController.viewportSize() || 20;\r\n                if (gridCoreUtils.isVirtualRowRendering(this) && itemCount > 0 && false !== this.option(LEGACY_SCROLLING_MODE)) {\r\n                    dataSource._renderTime = (new Date - startRenderTime) * viewportSize / itemCount\r\n                } else {\r\n                    dataSource._renderTime = new Date - startRenderTime\r\n                }\r\n            }\r\n        },\r\n        _getRowElements: function(tableElement) {\r\n            var $rows = this.callBase(tableElement);\r\n            return $rows && $rows.not(\".\" + VIRTUAL_ROW_CLASS)\r\n        },\r\n        _removeRowsElements: function(contentTable, removeCount, changeType) {\r\n            var rowElements = this._getRowElements(contentTable).toArray();\r\n            if (\"append\" === changeType) {\r\n                rowElements = rowElements.slice(0, removeCount)\r\n            } else {\r\n                rowElements = rowElements.slice(-removeCount)\r\n            }\r\n            var errorHandlingController = this.getController(\"errorHandling\");\r\n            rowElements.map(rowElement => {\r\n                var $rowElement = $(rowElement);\r\n                errorHandlingController && errorHandlingController.removeErrorRow($rowElement.next());\r\n                $rowElement.remove()\r\n            })\r\n        },\r\n        _updateContent: function(tableElement, change) {\r\n            var $freeSpaceRowElements;\r\n            var contentElement = this._findContentElement();\r\n            var changeType = change && change.changeType;\r\n            var contentTable = contentElement.children().first();\r\n            if (\"append\" === changeType || \"prepend\" === changeType) {\r\n                var $tBodies = this._getBodies(tableElement);\r\n                if (1 === $tBodies.length) {\r\n                    this._getBodies(contentTable)[\"append\" === changeType ? \"append\" : \"prepend\"]($tBodies.children())\r\n                } else {\r\n                    $tBodies[\"append\" === changeType ? \"appendTo\" : \"prependTo\"](contentTable)\r\n                }\r\n                tableElement.remove();\r\n                $freeSpaceRowElements = this._getFreeSpaceRowElements(contentTable);\r\n                removeEmptyRows($freeSpaceRowElements, FREESPACE_CLASS);\r\n                if (change.removeCount) {\r\n                    this._removeRowsElements(contentTable, change.removeCount, changeType)\r\n                }\r\n                this._restoreErrorRow(contentTable)\r\n            } else {\r\n                this.callBase.apply(this, arguments);\r\n                if (\"update\" === changeType) {\r\n                    this._restoreErrorRow(contentTable)\r\n                }\r\n            }\r\n            this._updateBottomLoading()\r\n        },\r\n        _addVirtualRow: function($table, isFixed, location, position) {\r\n            if (!position) {\r\n                return\r\n            }\r\n            var $virtualRow = this._createEmptyRow(VIRTUAL_ROW_CLASS, isFixed, position);\r\n            $virtualRow = this._wrapRowIfNeed($table, $virtualRow);\r\n            this._appendEmptyRow($table, $virtualRow, location)\r\n        },\r\n        _getRowHeights: function() {\r\n            var rowHeights = this._getRowElements(this._tableElement).toArray().map((function(row) {\r\n                return getBoundingRect(row).height\r\n            }));\r\n            return rowHeights\r\n        },\r\n        _correctRowHeights: function(rowHeights) {\r\n            var dataController = this._dataController;\r\n            var dataSource = dataController._dataSource;\r\n            var correctedRowHeights = [];\r\n            var visibleRows = dataController.getVisibleRows();\r\n            var itemSize = 0;\r\n            var firstCountableItem = true;\r\n            var lastLoadIndex = -1;\r\n            for (var i = 0; i < rowHeights.length; i++) {\r\n                var currentItem = visibleRows[i];\r\n                if (!isDefined(currentItem)) {\r\n                    continue\r\n                }\r\n                if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                    if (lastLoadIndex >= 0 && lastLoadIndex !== currentItem.loadIndex) {\r\n                        correctedRowHeights.push(itemSize);\r\n                        itemSize = 0\r\n                    }\r\n                    lastLoadIndex = currentItem.loadIndex\r\n                } else if (isItemCountableByDataSource(currentItem, dataSource)) {\r\n                    if (firstCountableItem) {\r\n                        firstCountableItem = false\r\n                    } else {\r\n                        correctedRowHeights.push(itemSize);\r\n                        itemSize = 0\r\n                    }\r\n                }\r\n                itemSize += rowHeights[i]\r\n            }\r\n            itemSize > 0 && correctedRowHeights.push(itemSize);\r\n            return correctedRowHeights\r\n        },\r\n        _updateContentPosition: function(isRender) {\r\n            var dataController = this._dataController;\r\n            var rowHeight = this._rowHeight || 20;\r\n            dataController.viewportItemSize(rowHeight);\r\n            if (isVirtualMode(this) || gridCoreUtils.isVirtualRowRendering(this)) {\r\n                if (!isRender) {\r\n                    var rowHeights = this._getRowHeights();\r\n                    var correctedRowHeights = this._correctRowHeights(rowHeights);\r\n                    dataController.setContentItemSizes(correctedRowHeights)\r\n                }\r\n                var top = dataController.getContentOffset(\"begin\");\r\n                var bottom = dataController.getContentOffset(\"end\");\r\n                var $tables = this.getTableElements();\r\n                var $virtualRows = $tables.children(\"tbody\").children(\".\" + VIRTUAL_ROW_CLASS);\r\n                removeEmptyRows($virtualRows, VIRTUAL_ROW_CLASS);\r\n                $tables.each((index, element) => {\r\n                    var isFixed = index > 0;\r\n                    this._isFixedTableRendering = isFixed;\r\n                    this._addVirtualRow($(element), isFixed, \"top\", top);\r\n                    this._addVirtualRow($(element), isFixed, \"bottom\", bottom);\r\n                    this._isFixedTableRendering = false\r\n                })\r\n            }\r\n        },\r\n        _isTableLinesDisplaysCorrect: function(table) {\r\n            var hasColumnLines = table.find(\".\" + COLUMN_LINES_CLASS).length > 0;\r\n            return hasColumnLines === this.option(\"showColumnLines\")\r\n        },\r\n        _isColumnElementsEqual: function($columns, $virtualColumns) {\r\n            var result = $columns.length === $virtualColumns.length;\r\n            if (result) {\r\n                each($columns, (function(index, element) {\r\n                    if (element.style.width !== $virtualColumns[index].style.width) {\r\n                        result = false;\r\n                        return result\r\n                    }\r\n                }))\r\n            }\r\n            return result\r\n        },\r\n        _getCellClasses: function(column) {\r\n            var classes = [];\r\n            var cssClass = column.cssClass;\r\n            var isExpandColumn = \"expand\" === column.command;\r\n            cssClass && classes.push(cssClass);\r\n            isExpandColumn && classes.push(this.addWidgetPrefix(GROUP_SPACE_CLASS));\r\n            return classes\r\n        },\r\n        _findBottomLoadPanel: function($contentElement) {\r\n            var $element = $contentElement || this.element();\r\n            var $bottomLoadPanel = $element && $element.find(\".\" + this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS));\r\n            if ($bottomLoadPanel && $bottomLoadPanel.length) {\r\n                return $bottomLoadPanel\r\n            }\r\n        },\r\n        _updateBottomLoading: function() {\r\n            var virtualMode = isVirtualMode(this);\r\n            var appendMode = isAppendMode(this);\r\n            var showBottomLoading = !this._dataController.hasKnownLastPage() && this._dataController.isLoaded() && (virtualMode || appendMode);\r\n            var $contentElement = this._findContentElement();\r\n            var bottomLoadPanelElement = this._findBottomLoadPanel($contentElement);\r\n            if (showBottomLoading) {\r\n                if (!bottomLoadPanelElement) {\r\n                    $(\"<div>\").addClass(this.addWidgetPrefix(BOTTOM_LOAD_PANEL_CLASS)).append(this._createComponent($(\"<div>\"), LoadIndicator).$element()).appendTo($contentElement)\r\n                }\r\n            } else if (bottomLoadPanelElement) {\r\n                bottomLoadPanelElement.remove()\r\n            }\r\n        },\r\n        _handleScroll: function(e) {\r\n            var legacyScrollingMode = true === this.option(LEGACY_SCROLLING_MODE);\r\n            var zeroTopPosition = 0 === e.scrollOffset.top;\r\n            if ((this._hasHeight || !legacyScrollingMode && zeroTopPosition) && this._rowHeight) {\r\n                this._dataController.setViewportPosition(e.scrollOffset.top)\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        _needUpdateRowHeight: function(itemsCount) {\r\n            return this.callBase.apply(this, arguments) || itemsCount > 0 && isAppendMode(this) && !gridCoreUtils.isVirtualRowRendering(this)\r\n        },\r\n        _updateRowHeight: function() {\r\n            this.callBase.apply(this, arguments);\r\n            if (this._rowHeight) {\r\n                this._updateContentPosition();\r\n                var viewportHeight = this._hasHeight ? getOuterHeight(this.element()) : getOuterHeight(getWindow());\r\n                var dataController = this._dataController;\r\n                if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                    dataController.viewportHeight(viewportHeight);\r\n                    dataController.updateViewport()\r\n                } else {\r\n                    dataController.viewportSize(Math.ceil(viewportHeight / this._rowHeight))\r\n                }\r\n            }\r\n        },\r\n        updateFreeSpaceRowHeight: function() {\r\n            var result = this.callBase.apply(this, arguments);\r\n            if (result) {\r\n                this._updateContentPosition()\r\n            }\r\n            return result\r\n        },\r\n        setLoading: function(isLoading, messageText) {\r\n            var dataController = this._dataController;\r\n            var hasBottomLoadPanel = dataController.pageIndex() > 0 && dataController.isLoaded() && !!this._findBottomLoadPanel();\r\n            if (false === this.option(LEGACY_SCROLLING_MODE) && isLoading && dataController.isViewportChanging()) {\r\n                return\r\n            }\r\n            if (hasBottomLoadPanel) {\r\n                isLoading = false\r\n            }\r\n            this.callBase.call(this, isLoading, messageText)\r\n        },\r\n        _resizeCore: function() {\r\n            var that = this;\r\n            var $element = that.element();\r\n            that.callBase();\r\n            if (that.component.$element() && !that._windowScroll && $element.closest(getWindow().document).length) {\r\n                that._windowScroll = subscribeToExternalScrollers($element, (function(scrollPos) {\r\n                    if (!that._hasHeight && that._rowHeight) {\r\n                        that._dataController.setViewportPosition(scrollPos)\r\n                    }\r\n                }), that.component.$element());\r\n                that.on(\"disposing\", (function() {\r\n                    that._windowScroll.dispose()\r\n                }))\r\n            }\r\n            if (false !== this.option(LEGACY_SCROLLING_MODE)) {\r\n                that.loadIfNeed()\r\n            }\r\n        },\r\n        loadIfNeed: function() {\r\n            var _dataController$loadI;\r\n            var dataController = this._dataController;\r\n            null === dataController || void 0 === dataController ? void 0 : null === (_dataController$loadI = dataController.loadIfNeed) || void 0 === _dataController$loadI ? void 0 : _dataController$loadI.call(dataController)\r\n        },\r\n        setColumnWidths: function(widths) {\r\n            var scrollable = this.getScrollable();\r\n            var $content;\r\n            this.callBase.apply(this, arguments);\r\n            if (\"virtual\" === this.option(\"scrolling.mode\")) {\r\n                $content = scrollable ? $(scrollable.content()) : this.element();\r\n                this.callBase(widths, $content.children(\".\" + this.addWidgetPrefix(CONTENT_CLASS)).children(\":not(.\" + this.addWidgetPrefix(TABLE_CONTENT_CLASS) + \")\"))\r\n            }\r\n        },\r\n        _restoreErrorRow: function() {\r\n            if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                var errorHandling = this.getController(\"errorHandling\");\r\n                null === errorHandling || void 0 === errorHandling ? void 0 : errorHandling.removeErrorRow()\r\n            }\r\n            this.callBase.apply(this, arguments)\r\n        },\r\n        dispose: function() {\r\n            clearTimeout(this._scrollTimeoutID);\r\n            this.callBase()\r\n        }\r\n    }\r\n}();\r\nexport var virtualScrollingModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            scrolling: {\r\n                timeout: 300,\r\n                updateTimeout: 300,\r\n                minTimeout: 0,\r\n                renderingThreshold: 100,\r\n                removeInvisiblePages: true,\r\n                rowPageSize: 5,\r\n                prerenderedRowChunkSize: 1,\r\n                mode: \"standard\",\r\n                preloadEnabled: false,\r\n                rowRenderingMode: \"standard\",\r\n                loadTwoPagesOnStart: false,\r\n                legacyMode: false,\r\n                prerenderedRowCount: 1\r\n            }\r\n        }\r\n    },\r\n    extenders: {\r\n        dataSourceAdapter: VirtualScrollingDataSourceAdapterExtender,\r\n        controllers: {\r\n            data: function() {\r\n                var members = {\r\n                    _refreshDataSource: function() {\r\n                        var baseResult = this.callBase.apply(this, arguments) || (new Deferred).resolve().promise();\r\n                        baseResult.done(this.initVirtualRows.bind(this));\r\n                        return baseResult\r\n                    },\r\n                    _loadDataSource: function() {\r\n                        if (this._rowsScrollController) {\r\n                            var _this$getLoadPagePara, _this$_dataSource;\r\n                            var {\r\n                                loadPageCount: loadPageCount\r\n                            } = null !== (_this$getLoadPagePara = this.getLoadPageParams()) && void 0 !== _this$getLoadPagePara ? _this$getLoadPagePara : {};\r\n                            loadPageCount >= 1 && (null === (_this$_dataSource = this._dataSource) || void 0 === _this$_dataSource ? void 0 : _this$_dataSource.loadPageCount(loadPageCount))\r\n                        }\r\n                        return this.callBase.apply(this, arguments)\r\n                    },\r\n                    getRowPageSize: function() {\r\n                        var rowPageSize = this.option(\"scrolling.rowPageSize\");\r\n                        var pageSize = this.pageSize();\r\n                        return pageSize && pageSize < rowPageSize ? pageSize : rowPageSize\r\n                    },\r\n                    reload: function() {\r\n                        var rowsScrollController = this._rowsScrollController || this._dataSource;\r\n                        var itemIndex = rowsScrollController && rowsScrollController.getItemIndexByPosition();\r\n                        var result = this.callBase.apply(this, arguments);\r\n                        return result && result.done(() => {\r\n                            if (isVirtualMode(this) || gridCoreUtils.isVirtualRowRendering(this)) {\r\n                                var rowIndexOffset = this.getRowIndexOffset();\r\n                                var rowIndex = Math.floor(itemIndex) - rowIndexOffset;\r\n                                var component = this.component;\r\n                                var scrollable = component.getScrollable && component.getScrollable();\r\n                                var isSortingOperation = this.dataSource().operationTypes().sorting;\r\n                                if (scrollable && !isSortingOperation) {\r\n                                    var rowElement = component.getRowElement(rowIndex);\r\n                                    var $rowElement = rowElement && rowElement[0] && $(rowElement[0]);\r\n                                    var top = $rowElement && $rowElement.position().top;\r\n                                    var isChromeLatest = browser.chrome && browser.version >= 91;\r\n                                    var allowedTopOffset = browser.mozilla || isChromeLatest ? 1 : 0;\r\n                                    if (top > allowedTopOffset) {\r\n                                        top = Math.round(top + getOuterHeight($rowElement) * (itemIndex % 1));\r\n                                        scrollable.scrollTo({\r\n                                            y: top\r\n                                        })\r\n                                    }\r\n                                }\r\n                            }\r\n                        })\r\n                    },\r\n                    initVirtualRows: function() {\r\n                        var virtualRowsRendering = gridCoreUtils.isVirtualRowRendering(this);\r\n                        this._allItems = null;\r\n                        this._loadViewportParams = null;\r\n                        if (\"virtual\" !== this.option(\"scrolling.mode\") && true !== virtualRowsRendering || false === virtualRowsRendering || false !== this.option(LEGACY_SCROLLING_MODE) && !this.option(\"scrolling.rowPageSize\")) {\r\n                            this._visibleItems = null;\r\n                            this._rowsScrollController = null;\r\n                            return\r\n                        }\r\n                        var pageIndex = !isVirtualMode(this) && this.pageIndex() >= this.pageCount() ? this.pageCount() - 1 : this.pageIndex();\r\n                        this._rowPageIndex = Math.ceil(pageIndex * this.pageSize() / this.getRowPageSize());\r\n                        this._visibleItems = false === this.option(LEGACY_SCROLLING_MODE) ? null : [];\r\n                        this._viewportChanging = false;\r\n                        this._needUpdateViewportAfterLoading = false;\r\n                        if (!this._rowsScrollController) {\r\n                            this._rowsScrollController = new VirtualScrollController(this.component, this._getRowsScrollDataOptions(), true);\r\n                            this._rowsScrollController.positionChanged.add(() => {\r\n                                var _this$_dataSource2;\r\n                                if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                                    this._viewportChanging = true;\r\n                                    this.loadViewport();\r\n                                    this._viewportChanging = false;\r\n                                    return\r\n                                }\r\n                                null === (_this$_dataSource2 = this._dataSource) || void 0 === _this$_dataSource2 ? void 0 : _this$_dataSource2.setViewportItemIndex(this._rowsScrollController.getViewportItemIndex())\r\n                            })\r\n                        }\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                            this._updateLoadViewportParams()\r\n                        }\r\n                        if (this.isLoaded() && false !== this.option(LEGACY_SCROLLING_MODE)) {\r\n                            this._rowsScrollController.load()\r\n                        }\r\n                    },\r\n                    isViewportChanging: function() {\r\n                        return this._viewportChanging\r\n                    },\r\n                    _getRowsScrollDataOptions: function() {\r\n                        var that = this;\r\n                        var isItemCountable = function(item) {\r\n                            return isItemCountableByDataSource(item, that._dataSource)\r\n                        };\r\n                        return {\r\n                            pageSize: function() {\r\n                                return that.getRowPageSize()\r\n                            },\r\n                            loadedOffset: function() {\r\n                                var _that$_dataSource;\r\n                                return isVirtualMode(that) && (null === (_that$_dataSource = that._dataSource) || void 0 === _that$_dataSource ? void 0 : _that$_dataSource.lastLoadOptions().skip) || 0\r\n                            },\r\n                            loadedItemCount: function() {\r\n                                return that._itemCount\r\n                            },\r\n                            totalItemsCount: function() {\r\n                                if (isVirtualPaging(that)) {\r\n                                    return that.totalItemsCount()\r\n                                }\r\n                                return false === that.option(LEGACY_SCROLLING_MODE) ? that._itemCount : that._items.filter(isItemCountable).length\r\n                            },\r\n                            hasKnownLastPage: function() {\r\n                                return true\r\n                            },\r\n                            pageIndex: function(index) {\r\n                                if (void 0 !== index) {\r\n                                    that._rowPageIndex = index\r\n                                }\r\n                                return that._rowPageIndex\r\n                            },\r\n                            isLoading: function() {\r\n                                return that.isLoading()\r\n                            },\r\n                            pageCount: function() {\r\n                                var pageCount = Math.ceil(this.totalItemsCount() / this.pageSize());\r\n                                return pageCount ? pageCount : 1\r\n                            },\r\n                            load: function() {\r\n                                if (that._rowsScrollController.pageIndex() >= this.pageCount()) {\r\n                                    that._rowPageIndex = this.pageCount() - 1;\r\n                                    that._rowsScrollController.pageIndex(that._rowPageIndex)\r\n                                }\r\n                                if (!this.items().length && this.totalItemsCount()) {\r\n                                    return\r\n                                }\r\n                                that._rowsScrollController.handleDataChanged(change => {\r\n                                    change = change || {};\r\n                                    change.changeType = change.changeType || \"refresh\";\r\n                                    change.items = change.items || that._visibleItems;\r\n                                    that._visibleItems.forEach((item, index) => {\r\n                                        item.rowIndex = index\r\n                                    });\r\n                                    that._fireChanged(change)\r\n                                })\r\n                            },\r\n                            updateLoading: function() {},\r\n                            itemsCount: function() {\r\n                                return this.items(true).length\r\n                            },\r\n                            correctCount: function(items, count, fromEnd) {\r\n                                return _correctCount(items, count, fromEnd, (item, isNextAfterLast, fromEnd) => {\r\n                                    if (item.isNewRow) {\r\n                                        return isNextAfterLast && !fromEnd\r\n                                    }\r\n                                    if (isNextAfterLast && fromEnd) {\r\n                                        return !item.isNewRow\r\n                                    }\r\n                                    return isItemCountable(item)\r\n                                })\r\n                            },\r\n                            items: function(countableOnly) {\r\n                                var result = that._items;\r\n                                if (that.option(LEGACY_SCROLLING_MODE)) {\r\n                                    var dataSource = that.dataSource();\r\n                                    var virtualItemsCount = null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount();\r\n                                    var begin = virtualItemsCount ? virtualItemsCount.begin : 0;\r\n                                    var rowPageSize = that.getRowPageSize();\r\n                                    var skip = that._rowPageIndex * rowPageSize - begin;\r\n                                    var take = rowPageSize;\r\n                                    if (skip < 0) {\r\n                                        return []\r\n                                    }\r\n                                    if (skip) {\r\n                                        skip = this.correctCount(result, skip);\r\n                                        result = result.slice(skip)\r\n                                    }\r\n                                    if (take) {\r\n                                        take = this.correctCount(result, take);\r\n                                        result = result.slice(0, take)\r\n                                    }\r\n                                }\r\n                                return countableOnly ? result.filter(isItemCountable) : result\r\n                            },\r\n                            viewportItems: function(items) {\r\n                                if (items && false !== that.option(LEGACY_SCROLLING_MODE)) {\r\n                                    that._visibleItems = items\r\n                                }\r\n                                return that._visibleItems\r\n                            },\r\n                            onChanged: function() {},\r\n                            changingDuration: function(e) {\r\n                                var dataSource = that.dataSource();\r\n                                if (null !== dataSource && void 0 !== dataSource && dataSource.isLoading() && false !== that.option(LEGACY_SCROLLING_MODE)) {\r\n                                    return LOAD_TIMEOUT\r\n                                }\r\n                                return (null === dataSource || void 0 === dataSource ? void 0 : dataSource._renderTime) || 0\r\n                            }\r\n                        }\r\n                    },\r\n                    _updateItemsCore: function(change) {\r\n                        var delta = this.getRowIndexDelta();\r\n                        this.callBase.apply(this, arguments);\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE) && gridCoreUtils.isVirtualRowRendering(this)) {\r\n                            if (\"update\" === change.changeType && 0 === change.rowIndices.length && change.cancelEmptyChanges) {\r\n                                change.cancel = true\r\n                            }\r\n                            return\r\n                        }\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            var visibleItems = this._visibleItems;\r\n                            var isRefresh = \"refresh\" === change.changeType || change.isLiveUpdate;\r\n                            if (\"append\" === change.changeType && change.items && !change.items.length) {\r\n                                return\r\n                            }\r\n                            if (isRefresh || \"append\" === change.changeType || \"prepend\" === change.changeType) {\r\n                                change.cancel = true;\r\n                                isRefresh && rowsScrollController.reset(true);\r\n                                rowsScrollController.load()\r\n                            } else {\r\n                                if (\"update\" === change.changeType) {\r\n                                    change.rowIndices.forEach((rowIndex, index) => {\r\n                                        var changeType = change.changeTypes[index];\r\n                                        var newItem = change.items[index];\r\n                                        if (\"update\" === changeType) {\r\n                                            visibleItems[rowIndex] = newItem\r\n                                        } else if (\"insert\" === changeType) {\r\n                                            visibleItems.splice(rowIndex, 0, newItem)\r\n                                        } else if (\"remove\" === changeType) {\r\n                                            visibleItems.splice(rowIndex, 1)\r\n                                        }\r\n                                    })\r\n                                } else {\r\n                                    visibleItems.forEach((item, index) => {\r\n                                        visibleItems[index] = this._items[index + delta] || visibleItems[index]\r\n                                    });\r\n                                    change.items = visibleItems\r\n                                }\r\n                                updateItemIndices(visibleItems)\r\n                            }\r\n                        }\r\n                    },\r\n                    _updateLoadViewportParams: function() {\r\n                        var viewportParams = this._rowsScrollController.getViewportParams();\r\n                        var pageSize = this.pageSize();\r\n                        if (viewportParams && !isVirtualPaging(this) && pageSize > 0) {\r\n                            var pageOffset = this.pageIndex() * pageSize;\r\n                            viewportParams.skip += pageOffset\r\n                        }\r\n                        this._loadViewportParams = viewportParams\r\n                    },\r\n                    _processItems: function(items) {\r\n                        var newItems = this.callBase.apply(this, arguments);\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                            var _dataSource$lastLoadO;\r\n                            var dataSource = this._dataSource;\r\n                            var currentIndex = null !== (_dataSource$lastLoadO = null === dataSource || void 0 === dataSource ? void 0 : dataSource.lastLoadOptions().skip) && void 0 !== _dataSource$lastLoadO ? _dataSource$lastLoadO : 0;\r\n                            var prevCountable;\r\n                            var prevRowType;\r\n                            var isPrevRowNew;\r\n                            var wasCountableItem = false;\r\n                            newItems.forEach(item => {\r\n                                var rowType = item.rowType;\r\n                                var itemCountable = isItemCountableByDataSource(item, dataSource);\r\n                                if (!item.isNewRow && isDefined(prevCountable)) {\r\n                                    var isNextGroupItem = \"group\" === rowType && (prevCountable || itemCountable || \"group\" !== prevRowType && currentIndex > 0);\r\n                                    var isNextDataItem = \"data\" === rowType && itemCountable && (prevCountable || \"group\" !== prevRowType);\r\n                                    var isPrevNewRowFirst = isPrevRowNew && !wasCountableItem;\r\n                                    if (isNextGroupItem || isNextDataItem) {\r\n                                        wasCountableItem = true;\r\n                                        if (!isPrevNewRowFirst) {\r\n                                            currentIndex++\r\n                                        }\r\n                                    }\r\n                                }\r\n                                item.loadIndex = currentIndex;\r\n                                prevCountable = itemCountable;\r\n                                prevRowType = rowType;\r\n                                isPrevRowNew = item.isNewRow\r\n                            })\r\n                        }\r\n                        return newItems\r\n                    },\r\n                    _afterProcessItems: function(items) {\r\n                        this._itemCount = items.filter(item => isItemCountableByDataSource(item, this._dataSource)).length;\r\n                        if (isDefined(this._loadViewportParams)) {\r\n                            this._updateLoadViewportParams();\r\n                            var result = items;\r\n                            this._allItems = items;\r\n                            if (items.length) {\r\n                                var {\r\n                                    skipForCurrentPage: skipForCurrentPage\r\n                                } = this.getLoadPageParams(true);\r\n                                var skip = items[0].loadIndex + skipForCurrentPage;\r\n                                var take = this._loadViewportParams.take;\r\n                                result = items.filter(it => {\r\n                                    var isNewRowOnStart = it.isNewRow && it.loadIndex >= skip - 1;\r\n                                    var isNewRowInEmptyData = it.isNewRow && it.loadIndex === skip && 0 === take;\r\n                                    var isLoadIndexGreaterStart = it.loadIndex >= skip || isNewRowOnStart;\r\n                                    var isLoadIndexLessEnd = it.loadIndex < skip + take || isNewRowInEmptyData;\r\n                                    return isLoadIndexGreaterStart && isLoadIndexLessEnd\r\n                                })\r\n                            }\r\n                            return result\r\n                        }\r\n                        return this.callBase.apply(this, arguments)\r\n                    },\r\n                    _applyChange: function(change) {\r\n                        var that = this;\r\n                        var items = change.items;\r\n                        var changeType = change.changeType;\r\n                        var removeCount = change.removeCount;\r\n                        if (removeCount) {\r\n                            var fromEnd = \"prepend\" === changeType;\r\n                            removeCount = _correctCount(that._items, removeCount, fromEnd, (function(item, isNextAfterLast) {\r\n                                return \"data\" === item.rowType && !item.isNewRow || \"group\" === item.rowType && (that._dataSource.isGroupItemCountable(item.data) || isNextAfterLast)\r\n                            }));\r\n                            change.removeCount = removeCount\r\n                        }\r\n                        switch (changeType) {\r\n                            case \"prepend\":\r\n                                that._items.unshift.apply(that._items, items);\r\n                                if (removeCount) {\r\n                                    that._items.splice(-removeCount)\r\n                                }\r\n                                break;\r\n                            case \"append\":\r\n                                that._items.push.apply(that._items, items);\r\n                                if (removeCount) {\r\n                                    that._items.splice(0, removeCount)\r\n                                }\r\n                                break;\r\n                            default:\r\n                                that.callBase(change)\r\n                        }\r\n                    },\r\n                    items: function(allItems) {\r\n                        return allItems ? this._allItems || this._items : this._visibleItems || this._items\r\n                    },\r\n                    getRowIndexDelta: function() {\r\n                        var delta = 0;\r\n                        if (this.option(LEGACY_SCROLLING_MODE)) {\r\n                            var visibleItems = this._visibleItems;\r\n                            if (visibleItems && visibleItems[0]) {\r\n                                delta = this._items.indexOf(visibleItems[0])\r\n                            }\r\n                        }\r\n                        return delta < 0 ? 0 : delta\r\n                    },\r\n                    getRowIndexOffset: function(byLoadedRows) {\r\n                        var offset = 0;\r\n                        var dataSource = this.dataSource();\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var newMode = false === this.option(LEGACY_SCROLLING_MODE);\r\n                        var virtualPaging = isVirtualPaging(this);\r\n                        if (rowsScrollController && !byLoadedRows) {\r\n                            if (newMode && isDefined(this._loadViewportParams)) {\r\n                                var {\r\n                                    skipForCurrentPage: skipForCurrentPage,\r\n                                    pageIndex: pageIndex\r\n                                } = this.getLoadPageParams(true);\r\n                                var items = this.items(true);\r\n                                offset = virtualPaging ? pageIndex * this.pageSize() : 0;\r\n                                if (items.length) {\r\n                                    var firstLoadIndex = items[0].loadIndex;\r\n                                    offset += items.filter(item => item.loadIndex < firstLoadIndex + skipForCurrentPage).length\r\n                                }\r\n                            } else {\r\n                                offset = rowsScrollController.beginPageIndex() * rowsScrollController.pageSize()\r\n                            }\r\n                        } else if (virtualPaging && newMode && dataSource) {\r\n                            var _dataSource$lastLoadO2;\r\n                            offset = null !== (_dataSource$lastLoadO2 = dataSource.lastLoadOptions().skip) && void 0 !== _dataSource$lastLoadO2 ? _dataSource$lastLoadO2 : 0\r\n                        } else if (isVirtualMode(this) && dataSource) {\r\n                            offset = dataSource.beginPageIndex() * dataSource.pageSize()\r\n                        }\r\n                        return offset\r\n                    },\r\n                    viewportSize: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var dataSource = this._dataSource;\r\n                        var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportSize.apply(rowsScrollController, arguments);\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                            return result\r\n                        }\r\n                        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportSize.apply(dataSource, arguments)\r\n                    },\r\n                    viewportHeight: function(height) {\r\n                        var _this$_rowsScrollCont;\r\n                        null === (_this$_rowsScrollCont = this._rowsScrollController) || void 0 === _this$_rowsScrollCont ? void 0 : _this$_rowsScrollCont.viewportHeight(height)\r\n                    },\r\n                    viewportItemSize: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var dataSource = this._dataSource;\r\n                        var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.viewportItemSize.apply(rowsScrollController, arguments);\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                            return result\r\n                        }\r\n                        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.viewportItemSize.apply(dataSource, arguments)\r\n                    },\r\n                    setViewportPosition: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var dataSource = this._dataSource;\r\n                        if (rowsScrollController) {\r\n                            rowsScrollController.setViewportPosition.apply(rowsScrollController, arguments)\r\n                        } else {\r\n                            null === dataSource || void 0 === dataSource ? void 0 : dataSource.setViewportPosition.apply(dataSource, arguments)\r\n                        }\r\n                    },\r\n                    setContentItemSizes: function(sizes) {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var dataSource = this._dataSource;\r\n                        var result = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.setContentItemSizes(sizes);\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                            return result\r\n                        }\r\n                        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.setContentItemSizes(sizes)\r\n                    },\r\n                    getPreloadedRowCount: function() {\r\n                        var preloadCount = this.option(\"scrolling.preloadedRowCount\");\r\n                        var preloadEnabled = this.option(\"scrolling.preloadEnabled\");\r\n                        if (isDefined(preloadCount)) {\r\n                            return preloadCount\r\n                        }\r\n                        var viewportSize = this.viewportSize();\r\n                        return preloadEnabled ? 2 * viewportSize : viewportSize\r\n                    },\r\n                    getLoadPageParams: function(byLoadedPage) {\r\n                        var _this$_dataSource3, _this$_dataSource4;\r\n                        var pageSize = this.pageSize();\r\n                        var viewportParams = this._loadViewportParams;\r\n                        var lastLoadOptions = null === (_this$_dataSource3 = this._dataSource) || void 0 === _this$_dataSource3 ? void 0 : _this$_dataSource3.lastLoadOptions();\r\n                        var loadedPageIndex = (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.pageIndex) || 0;\r\n                        var loadedTake = (null === lastLoadOptions || void 0 === lastLoadOptions ? void 0 : lastLoadOptions.take) || 0;\r\n                        var isScrollingBack = this._rowsScrollController.isScrollingBack();\r\n                        var topPreloadCount = isScrollingBack ? this.getPreloadedRowCount() : 0;\r\n                        var bottomPreloadCount = isScrollingBack ? 0 : this.getPreloadedRowCount();\r\n                        var totalCountCorrection = (null === (_this$_dataSource4 = this._dataSource) || void 0 === _this$_dataSource4 ? void 0 : _this$_dataSource4.totalCountCorrection()) || 0;\r\n                        var skipWithPreload = Math.max(0, viewportParams.skip - topPreloadCount);\r\n                        var pageIndex = byLoadedPage ? loadedPageIndex : Math.floor(pageSize ? skipWithPreload / pageSize : 0);\r\n                        var pageOffset = pageIndex * pageSize;\r\n                        var skipForCurrentPage = viewportParams.skip - pageOffset;\r\n                        var loadingTake = viewportParams.take + skipForCurrentPage + bottomPreloadCount - totalCountCorrection;\r\n                        var take = byLoadedPage ? loadedTake : loadingTake;\r\n                        var loadPageCount = Math.ceil(pageSize ? take / pageSize : 0);\r\n                        return {\r\n                            pageIndex: pageIndex,\r\n                            loadPageCount: Math.max(1, loadPageCount),\r\n                            skipForCurrentPage: Math.max(0, skipForCurrentPage)\r\n                        }\r\n                    },\r\n                    _updateVisiblePageIndex: function(currentPageIndex) {\r\n                        if (!this._rowsScrollController) {\r\n                            return\r\n                        }\r\n                        if (isDefined(currentPageIndex)) {\r\n                            this._silentOption(VISIBLE_PAGE_INDEX, currentPageIndex);\r\n                            this.pageChanged.fire();\r\n                            return\r\n                        }\r\n                        var viewPortItemIndex = this._rowsScrollController.getViewportItemIndex();\r\n                        var newPageIndex = Math.floor(viewPortItemIndex / this.pageSize());\r\n                        if (this.pageIndex() !== newPageIndex) {\r\n                            this._silentOption(VISIBLE_PAGE_INDEX, newPageIndex);\r\n                            this.updateItems({\r\n                                changeType: \"pageIndex\"\r\n                            })\r\n                        }\r\n                    },\r\n                    _getChangedLoadParams: function() {\r\n                        var loadedPageParams = this.getLoadPageParams(true);\r\n                        var {\r\n                            pageIndex: pageIndex,\r\n                            loadPageCount: loadPageCount\r\n                        } = this.getLoadPageParams();\r\n                        var result = null;\r\n                        if (!this._isLoading && (pageIndex !== loadedPageParams.pageIndex || loadPageCount !== loadedPageParams.loadPageCount)) {\r\n                            result = {\r\n                                pageIndex: pageIndex,\r\n                                loadPageCount: loadPageCount\r\n                            }\r\n                        }\r\n                        return result\r\n                    },\r\n                    _loadItems: function(checkLoading) {\r\n                        var _dataSourceAdapter$lo, _dataSourceAdapter$pa;\r\n                        var virtualPaging = isVirtualPaging(this);\r\n                        var dataSourceAdapter = this._dataSource;\r\n                        var changedParams = this._getChangedLoadParams();\r\n                        var currentLoadPageCount = null !== (_dataSourceAdapter$lo = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.loadPageCount()) && void 0 !== _dataSourceAdapter$lo ? _dataSourceAdapter$lo : 0;\r\n                        var lastRequiredItemCount = this.pageSize() * currentLoadPageCount;\r\n                        var currentPageIndex = null !== (_dataSourceAdapter$pa = null === dataSourceAdapter || void 0 === dataSourceAdapter ? void 0 : dataSourceAdapter.pageIndex()) && void 0 !== _dataSourceAdapter$pa ? _dataSourceAdapter$pa : 0;\r\n                        var pageIndexNotChanged = (null === changedParams || void 0 === changedParams ? void 0 : changedParams.pageIndex) === currentPageIndex;\r\n                        var allLoadedInAppendMode = isAppendMode(this) && this.totalItemsCount() < lastRequiredItemCount;\r\n                        var result = false;\r\n                        if (!dataSourceAdapter || virtualPaging && checkLoading && ((null === changedParams || void 0 === changedParams ? void 0 : changedParams.pageIndex) > currentPageIndex || pageIndexNotChanged && allLoadedInAppendMode)) {\r\n                            return result\r\n                        }\r\n                        if (virtualPaging && this._isLoading) {\r\n                            this._needUpdateViewportAfterLoading = true\r\n                        }\r\n                        if (virtualPaging && changedParams) {\r\n                            result = true;\r\n                            dataSourceAdapter.pageIndex(changedParams.pageIndex);\r\n                            dataSourceAdapter.loadPageCount(changedParams.loadPageCount);\r\n                            this._repaintChangesOnly = true;\r\n                            this._needUpdateDimensions = true;\r\n                            var viewportChanging = this._viewportChanging;\r\n                            this.load().always(() => {\r\n                                this._repaintChangesOnly = void 0;\r\n                                this._needUpdateDimensions = void 0\r\n                            }).done(() => {\r\n                                var isLastPage = this.pageCount() > 0 && this.pageIndex() === this.pageCount() - 1;\r\n                                (viewportChanging || isLastPage) && this._updateVisiblePageIndex();\r\n                                if (this._needUpdateViewportAfterLoading) {\r\n                                    this._needUpdateViewportAfterLoading = false;\r\n                                    this.loadViewport({\r\n                                        checkLoadedParamsOnly: true\r\n                                    })\r\n                                }\r\n                            })\r\n                        }\r\n                        return result\r\n                    },\r\n                    loadViewport: function(params) {\r\n                        var {\r\n                            checkLoadedParamsOnly: checkLoadedParamsOnly,\r\n                            checkLoading: checkLoading\r\n                        } = null !== params && void 0 !== params ? params : {};\r\n                        var virtualPaging = isVirtualPaging(this);\r\n                        if (virtualPaging || gridCoreUtils.isVirtualRowRendering(this)) {\r\n                            this._updateLoadViewportParams();\r\n                            var loadingItemsStarted = this._loadItems(checkLoading);\r\n                            if (!loadingItemsStarted && !(this._isLoading && checkLoading) && !checkLoadedParamsOnly) {\r\n                                this.updateItems({\r\n                                    repaintChangesOnly: true,\r\n                                    needUpdateDimensions: true,\r\n                                    useProcessedItemsCache: true,\r\n                                    cancelEmptyChanges: true\r\n                                })\r\n                            }\r\n                        }\r\n                    },\r\n                    updateViewport: function() {\r\n                        var _this$_loadViewportPa, _this$_loadViewportPa2;\r\n                        var viewportSize = this.viewportSize();\r\n                        var itemCount = this.items().length;\r\n                        var viewportIsNotFilled = viewportSize > itemCount;\r\n                        var currentTake = null !== (_this$_loadViewportPa = null === (_this$_loadViewportPa2 = this._loadViewportParams) || void 0 === _this$_loadViewportPa2 ? void 0 : _this$_loadViewportPa2.take) && void 0 !== _this$_loadViewportPa ? _this$_loadViewportPa : 0;\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        var newTake = null === rowsScrollController || void 0 === rowsScrollController ? void 0 : rowsScrollController.getViewportParams().take;\r\n                        (viewportIsNotFilled || currentTake < newTake) && itemCount && this.loadViewport({\r\n                            checkLoading: true\r\n                        })\r\n                    },\r\n                    loadIfNeed: function() {\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE)) {\r\n                            return\r\n                        }\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        rowsScrollController && rowsScrollController.loadIfNeed();\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.loadIfNeed()\r\n                    },\r\n                    getItemSize: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            return rowsScrollController.getItemSize.apply(rowsScrollController, arguments)\r\n                        }\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.getItemSize.apply(dataSource, arguments)\r\n                    },\r\n                    getItemSizes: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            return rowsScrollController.getItemSizes.apply(rowsScrollController, arguments)\r\n                        }\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.getItemSizes.apply(dataSource, arguments)\r\n                    },\r\n                    getContentOffset: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            return rowsScrollController.getContentOffset.apply(rowsScrollController, arguments)\r\n                        }\r\n                        var dataSource = this._dataSource;\r\n                        return dataSource && dataSource.getContentOffset.apply(dataSource, arguments)\r\n                    },\r\n                    refresh: function(options) {\r\n                        var dataSource = this._dataSource;\r\n                        if (dataSource && options && options.load && isAppendMode(this)) {\r\n                            dataSource.resetCurrentTotalCount()\r\n                        }\r\n                        return this.callBase.apply(this, arguments)\r\n                    },\r\n                    dispose: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        rowsScrollController && rowsScrollController.dispose();\r\n                        this.callBase.apply(this, arguments)\r\n                    },\r\n                    topItemIndex: function() {\r\n                        var _this$_loadViewportPa3;\r\n                        return null === (_this$_loadViewportPa3 = this._loadViewportParams) || void 0 === _this$_loadViewportPa3 ? void 0 : _this$_loadViewportPa3.skip\r\n                    },\r\n                    bottomItemIndex: function() {\r\n                        var viewportParams = this._loadViewportParams;\r\n                        return viewportParams && viewportParams.skip + viewportParams.take\r\n                    },\r\n                    virtualItemsCount: function() {\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (rowsScrollController) {\r\n                            return rowsScrollController.virtualItemsCount.apply(rowsScrollController, arguments)\r\n                        }\r\n                        var dataSource = this._dataSource;\r\n                        return null === dataSource || void 0 === dataSource ? void 0 : dataSource.virtualItemsCount.apply(dataSource, arguments)\r\n                    },\r\n                    pageIndex: function(_pageIndex) {\r\n                        var virtualPaging = isVirtualPaging(this);\r\n                        var rowsScrollController = this._rowsScrollController;\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE) && virtualPaging && rowsScrollController) {\r\n                            if (void 0 === _pageIndex) {\r\n                                var _this$option;\r\n                                return null !== (_this$option = this.option(VISIBLE_PAGE_INDEX)) && void 0 !== _this$option ? _this$option : 0\r\n                            }\r\n                        }\r\n                        return this.callBase.apply(this, arguments)\r\n                    },\r\n                    _fireChanged: function(e) {\r\n                        this.callBase.apply(this, arguments);\r\n                        var {\r\n                            operationTypes: operationTypes\r\n                        } = e;\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this) && operationTypes) {\r\n                            if (e.isDataChanged && operationTypes.pageIndex && !operationTypes.fullReload) {\r\n                                this._updateVisiblePageIndex(this._dataSource.pageIndex())\r\n                            }\r\n                        }\r\n                    },\r\n                    _getPagingOptionValue: function(optionName) {\r\n                        var result = this.callBase.apply(this, arguments);\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this)) {\r\n                            result = this[optionName]()\r\n                        }\r\n                        return result\r\n                    },\r\n                    isEmpty: function() {\r\n                        return false === this.option(LEGACY_SCROLLING_MODE) ? !this.items(true).length : this.callBase(this, arguments)\r\n                    },\r\n                    isLastPageLoaded: function() {\r\n                        var result = false;\r\n                        if (false === this.option(LEGACY_SCROLLING_MODE) && isVirtualPaging(this)) {\r\n                            var {\r\n                                pageIndex: pageIndex,\r\n                                loadPageCount: loadPageCount\r\n                            } = this.getLoadPageParams(true);\r\n                            var pageCount = this.pageCount();\r\n                            result = pageIndex + loadPageCount >= pageCount\r\n                        } else {\r\n                            result = this.callBase.apply(this, arguments)\r\n                        }\r\n                        return result\r\n                    },\r\n                    reset: function() {\r\n                        this._itemCount = 0;\r\n                        this._allItems = null;\r\n                        this.callBase.apply(this, arguments)\r\n                    }\r\n                };\r\n                gridCoreUtils.proxyMethod(members, \"getVirtualContentSize\");\r\n                gridCoreUtils.proxyMethod(members, \"setViewportItemIndex\");\r\n                return members\r\n            }(),\r\n            resizing: {\r\n                resize: function() {\r\n                    var that = this;\r\n                    var callBase = that.callBase;\r\n                    var result;\r\n                    if (isVirtualMode(that) || gridCoreUtils.isVirtualRowRendering(that)) {\r\n                        clearTimeout(that._resizeTimeout);\r\n                        var diff = new Date - that._lastTime;\r\n                        var updateTimeout = that.option(\"scrolling.updateTimeout\");\r\n                        if (that._lastTime && diff < updateTimeout) {\r\n                            result = new Deferred;\r\n                            that._resizeTimeout = setTimeout((function() {\r\n                                callBase.apply(that).done(result.resolve).fail(result.reject);\r\n                                that._lastTime = new Date\r\n                            }), updateTimeout);\r\n                            that._lastTime = new Date\r\n                        } else {\r\n                            result = callBase.apply(that);\r\n                            if (that._dataController.isLoaded()) {\r\n                                that._lastTime = new Date\r\n                            }\r\n                        }\r\n                    } else {\r\n                        result = callBase.apply(that)\r\n                    }\r\n                    return result\r\n                },\r\n                dispose: function() {\r\n                    this.callBase.apply(this, arguments);\r\n                    clearTimeout(this._resizeTimeout)\r\n                }\r\n            }\r\n        },\r\n        views: {\r\n            rowsView: VirtualScrollingRowsViewExtender\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}