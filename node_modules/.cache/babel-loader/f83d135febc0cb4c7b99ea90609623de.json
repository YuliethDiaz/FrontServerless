{"ast":null,"code":"import _classCallCheck from \"C:/Users/Valen/OneDrive/Documentos/Proyecto AWS/FrontServerless/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/Valen/OneDrive/Documentos/Proyecto AWS/FrontServerless/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * DevExtreme (esm/ui/overlay/overlay_drag.js)\r\n * Version: 21.2.5\r\n * Build date: Mon Jan 17 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { locate, move } from \"../../animation/translator\";\nimport domAdapter from \"../../core/dom_adapter\";\nimport { getOffset, getOuterWidth, getOuterHeight } from \"../../core/utils/size\";\nimport { fitIntoRange } from \"../../core/utils/math\";\nimport { isWindow } from \"../../core/utils/type\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport { start as dragStartEvent, move as dragMoveEvent, end as dragEndEvent } from \"../../events/drag\";\nimport { addNamespace } from \"../../events/utils/index\";\nvar KEYBOARD_DRAG_STEP = 5;\n\nvar OverlayDrag = /*#__PURE__*/function () {\n  function OverlayDrag(config) {\n    _classCallCheck(this, OverlayDrag);\n\n    this.init(config);\n  }\n\n  _createClass(OverlayDrag, [{\n    key: \"init\",\n    value: function init(_ref) {\n      var dragEnabled = _ref.dragEnabled,\n          handle = _ref.handle,\n          draggableElement = _ref.draggableElement,\n          positionController = _ref.positionController;\n      this._positionController = positionController;\n      this._draggableElement = draggableElement;\n      this._handle = handle;\n      this._dragEnabled = dragEnabled;\n      this.unsubscribe();\n\n      if (!dragEnabled) {\n        return;\n      }\n\n      this.subscribe();\n    }\n  }, {\n    key: \"moveDown\",\n    value: function moveDown(e) {\n      this._moveTo(KEYBOARD_DRAG_STEP, 0, e);\n    }\n  }, {\n    key: \"moveUp\",\n    value: function moveUp(e) {\n      this._moveTo(-KEYBOARD_DRAG_STEP, 0, e);\n    }\n  }, {\n    key: \"moveLeft\",\n    value: function moveLeft(e) {\n      this._moveTo(0, -KEYBOARD_DRAG_STEP, e);\n    }\n  }, {\n    key: \"moveRight\",\n    value: function moveRight(e) {\n      this._moveTo(0, KEYBOARD_DRAG_STEP, e);\n    }\n  }, {\n    key: \"subscribe\",\n    value: function subscribe() {\n      var _this = this;\n\n      var eventNames = this._getEventNames();\n\n      eventsEngine.on(this._handle, eventNames.startEventName, function (e) {\n        _this._dragStartHandler(e);\n      });\n      eventsEngine.on(this._handle, eventNames.updateEventName, function (e) {\n        _this._dragUpdateHandler(e);\n      });\n      eventsEngine.on(this._handle, eventNames.endEventName, function (e) {\n        _this._dragEndHandler(e);\n      });\n    }\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var eventNames = this._getEventNames();\n\n      eventsEngine.off(this._handle, eventNames.startEventName);\n      eventsEngine.off(this._handle, eventNames.updateEventName);\n      eventsEngine.off(this._handle, eventNames.endEventName);\n    }\n  }, {\n    key: \"_getEventNames\",\n    value: function _getEventNames() {\n      var startEventName = addNamespace(dragStartEvent, \"overlayDrag\");\n      var updateEventName = addNamespace(dragMoveEvent, \"overlayDrag\");\n      var endEventName = addNamespace(dragEndEvent, \"overlayDrag\");\n      return {\n        startEventName: startEventName,\n        updateEventName: updateEventName,\n        endEventName: endEventName\n      };\n    }\n  }, {\n    key: \"_dragStartHandler\",\n    value: function _dragStartHandler(e) {\n      var allowedOffsets = this._getAllowedOffsets();\n\n      this._prevOffset = {\n        x: 0,\n        y: 0\n      };\n      e.targetElements = [];\n      e.maxTopOffset = allowedOffsets.top;\n      e.maxBottomOffset = allowedOffsets.bottom;\n      e.maxLeftOffset = allowedOffsets.left;\n      e.maxRightOffset = allowedOffsets.right;\n    }\n  }, {\n    key: \"_dragUpdateHandler\",\n    value: function _dragUpdateHandler(e) {\n      var targetOffset = {\n        top: e.offset.y - this._prevOffset.y,\n        left: e.offset.x - this._prevOffset.x\n      };\n\n      this._moveByOffset(targetOffset);\n\n      this._prevOffset = e.offset;\n    }\n  }, {\n    key: \"_dragEndHandler\",\n    value: function _dragEndHandler(event) {\n      this._positionController.dragHandled();\n\n      this._positionController.detectVisualPositionChange(event);\n    }\n  }, {\n    key: \"_moveTo\",\n    value: function _moveTo(top, left, e) {\n      if (!this._dragEnabled) {\n        return;\n      }\n\n      e.preventDefault();\n      e.stopPropagation();\n\n      var offset = this._fitOffsetIntoAllowedRange(top, left);\n\n      this._moveByOffset(offset);\n\n      this._dragEndHandler(e);\n    }\n  }, {\n    key: \"_fitOffsetIntoAllowedRange\",\n    value: function _fitOffsetIntoAllowedRange(top, left) {\n      var allowedOffsets = this._getAllowedOffsets();\n\n      return {\n        top: fitIntoRange(top, -allowedOffsets.top, allowedOffsets.bottom),\n        left: fitIntoRange(left, -allowedOffsets.left, allowedOffsets.right)\n      };\n    }\n  }, {\n    key: \"_getContainerDimensions\",\n    value: function _getContainerDimensions() {\n      var document = domAdapter.getDocument();\n\n      var container = this._positionController.$dragResizeContainer.get(0);\n\n      var containerWidth = getOuterWidth(container);\n      var containerHeight = getOuterHeight(container);\n\n      if (isWindow(container)) {\n        containerHeight = Math.max(document.body.clientHeight, containerHeight);\n        containerWidth = Math.max(document.body.clientWidth, containerWidth);\n      }\n\n      return {\n        width: containerWidth,\n        height: containerHeight\n      };\n    }\n  }, {\n    key: \"_getContainerPosition\",\n    value: function _getContainerPosition() {\n      var container = this._positionController.$dragResizeContainer.get(0);\n\n      return isWindow(container) ? {\n        top: 0,\n        left: 0\n      } : getOffset(container);\n    }\n  }, {\n    key: \"_getElementPosition\",\n    value: function _getElementPosition() {\n      return getOffset(this._draggableElement);\n    }\n  }, {\n    key: \"_getInnerDelta\",\n    value: function _getInnerDelta() {\n      var containerDimensions = this._getContainerDimensions();\n\n      var elementDimensions = this._getElementDimensions();\n\n      return {\n        x: containerDimensions.width - elementDimensions.width,\n        y: containerDimensions.height - elementDimensions.height\n      };\n    }\n  }, {\n    key: \"_getOuterDelta\",\n    value: function _getOuterDelta() {\n      var _this$_getElementDime = this._getElementDimensions(),\n          width = _this$_getElementDime.width,\n          height = _this$_getElementDime.height;\n\n      var outsideDragFactor = this._positionController.outsideDragFactor;\n      return {\n        x: width * outsideDragFactor,\n        y: height * outsideDragFactor\n      };\n    }\n  }, {\n    key: \"_getFullDelta\",\n    value: function _getFullDelta() {\n      var fullDelta = this._getInnerDelta();\n\n      var outerDelta = this._getOuterDelta();\n\n      return {\n        x: fullDelta.x + outerDelta.x,\n        y: fullDelta.y + outerDelta.y\n      };\n    }\n  }, {\n    key: \"_getElementDimensions\",\n    value: function _getElementDimensions() {\n      return {\n        width: this._draggableElement.offsetWidth,\n        height: this._draggableElement.offsetHeight\n      };\n    }\n  }, {\n    key: \"_getAllowedOffsets\",\n    value: function _getAllowedOffsets() {\n      var fullDelta = this._getFullDelta();\n\n      var isDragAllowed = fullDelta.y >= 0 && fullDelta.x >= 0;\n\n      if (!isDragAllowed) {\n        return {\n          top: 0,\n          bottom: 0,\n          left: 0,\n          right: 0\n        };\n      }\n\n      var elementPosition = this._getElementPosition();\n\n      var containerPosition = this._getContainerPosition();\n\n      var outerDelta = this._getOuterDelta();\n\n      return {\n        top: elementPosition.top - containerPosition.top + outerDelta.y,\n        bottom: -elementPosition.top + containerPosition.top + fullDelta.y,\n        left: elementPosition.left - containerPosition.left + outerDelta.x,\n        right: -elementPosition.left + containerPosition.left + fullDelta.x\n      };\n    }\n  }, {\n    key: \"_moveByOffset\",\n    value: function _moveByOffset(offset) {\n      var currentPosition = locate(this._draggableElement);\n      var newPosition = {\n        left: currentPosition.left + offset.left,\n        top: currentPosition.top + offset.top\n      };\n      move(this._draggableElement, newPosition);\n    }\n  }]);\n\n  return OverlayDrag;\n}();\n\nexport default OverlayDrag;","map":{"version":3,"sources":["C:/Users/Valen/OneDrive/Documentos/Proyecto AWS/FrontServerless/node_modules/devextreme/esm/ui/overlay/overlay_drag.js"],"names":["locate","move","domAdapter","getOffset","getOuterWidth","getOuterHeight","fitIntoRange","isWindow","eventsEngine","start","dragStartEvent","dragMoveEvent","end","dragEndEvent","addNamespace","KEYBOARD_DRAG_STEP","OverlayDrag","config","init","_ref","dragEnabled","handle","draggableElement","positionController","_positionController","_draggableElement","_handle","_dragEnabled","unsubscribe","subscribe","e","_moveTo","eventNames","_getEventNames","on","startEventName","_dragStartHandler","updateEventName","_dragUpdateHandler","endEventName","_dragEndHandler","off","allowedOffsets","_getAllowedOffsets","_prevOffset","x","y","targetElements","maxTopOffset","top","maxBottomOffset","bottom","maxLeftOffset","left","maxRightOffset","right","targetOffset","offset","_moveByOffset","event","dragHandled","detectVisualPositionChange","preventDefault","stopPropagation","_fitOffsetIntoAllowedRange","document","getDocument","container","$dragResizeContainer","get","containerWidth","containerHeight","Math","max","body","clientHeight","clientWidth","width","height","containerDimensions","_getContainerDimensions","elementDimensions","_getElementDimensions","outsideDragFactor","fullDelta","_getInnerDelta","outerDelta","_getOuterDelta","offsetWidth","offsetHeight","_getFullDelta","isDragAllowed","elementPosition","_getElementPosition","containerPosition","_getContainerPosition","currentPosition","newPosition"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/overlay/overlay_drag.js)\r\n * Version: 21.2.5\r\n * Build date: Mon Jan 17 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    locate,\r\n    move\r\n} from \"../../animation/translator\";\r\nimport domAdapter from \"../../core/dom_adapter\";\r\nimport {\r\n    getOffset,\r\n    getOuterWidth,\r\n    getOuterHeight\r\n} from \"../../core/utils/size\";\r\nimport {\r\n    fitIntoRange\r\n} from \"../../core/utils/math\";\r\nimport {\r\n    isWindow\r\n} from \"../../core/utils/type\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport {\r\n    start as dragStartEvent,\r\n    move as dragMoveEvent,\r\n    end as dragEndEvent\r\n} from \"../../events/drag\";\r\nimport {\r\n    addNamespace\r\n} from \"../../events/utils/index\";\r\nvar KEYBOARD_DRAG_STEP = 5;\r\nclass OverlayDrag {\r\n    constructor(config) {\r\n        this.init(config)\r\n    }\r\n    init(_ref) {\r\n        var {\r\n            dragEnabled: dragEnabled,\r\n            handle: handle,\r\n            draggableElement: draggableElement,\r\n            positionController: positionController\r\n        } = _ref;\r\n        this._positionController = positionController;\r\n        this._draggableElement = draggableElement;\r\n        this._handle = handle;\r\n        this._dragEnabled = dragEnabled;\r\n        this.unsubscribe();\r\n        if (!dragEnabled) {\r\n            return\r\n        }\r\n        this.subscribe()\r\n    }\r\n    moveDown(e) {\r\n        this._moveTo(KEYBOARD_DRAG_STEP, 0, e)\r\n    }\r\n    moveUp(e) {\r\n        this._moveTo(-KEYBOARD_DRAG_STEP, 0, e)\r\n    }\r\n    moveLeft(e) {\r\n        this._moveTo(0, -KEYBOARD_DRAG_STEP, e)\r\n    }\r\n    moveRight(e) {\r\n        this._moveTo(0, KEYBOARD_DRAG_STEP, e)\r\n    }\r\n    subscribe() {\r\n        var eventNames = this._getEventNames();\r\n        eventsEngine.on(this._handle, eventNames.startEventName, e => {\r\n            this._dragStartHandler(e)\r\n        });\r\n        eventsEngine.on(this._handle, eventNames.updateEventName, e => {\r\n            this._dragUpdateHandler(e)\r\n        });\r\n        eventsEngine.on(this._handle, eventNames.endEventName, e => {\r\n            this._dragEndHandler(e)\r\n        })\r\n    }\r\n    unsubscribe() {\r\n        var eventNames = this._getEventNames();\r\n        eventsEngine.off(this._handle, eventNames.startEventName);\r\n        eventsEngine.off(this._handle, eventNames.updateEventName);\r\n        eventsEngine.off(this._handle, eventNames.endEventName)\r\n    }\r\n    _getEventNames() {\r\n        var startEventName = addNamespace(dragStartEvent, \"overlayDrag\");\r\n        var updateEventName = addNamespace(dragMoveEvent, \"overlayDrag\");\r\n        var endEventName = addNamespace(dragEndEvent, \"overlayDrag\");\r\n        return {\r\n            startEventName: startEventName,\r\n            updateEventName: updateEventName,\r\n            endEventName: endEventName\r\n        }\r\n    }\r\n    _dragStartHandler(e) {\r\n        var allowedOffsets = this._getAllowedOffsets();\r\n        this._prevOffset = {\r\n            x: 0,\r\n            y: 0\r\n        };\r\n        e.targetElements = [];\r\n        e.maxTopOffset = allowedOffsets.top;\r\n        e.maxBottomOffset = allowedOffsets.bottom;\r\n        e.maxLeftOffset = allowedOffsets.left;\r\n        e.maxRightOffset = allowedOffsets.right\r\n    }\r\n    _dragUpdateHandler(e) {\r\n        var targetOffset = {\r\n            top: e.offset.y - this._prevOffset.y,\r\n            left: e.offset.x - this._prevOffset.x\r\n        };\r\n        this._moveByOffset(targetOffset);\r\n        this._prevOffset = e.offset\r\n    }\r\n    _dragEndHandler(event) {\r\n        this._positionController.dragHandled();\r\n        this._positionController.detectVisualPositionChange(event)\r\n    }\r\n    _moveTo(top, left, e) {\r\n        if (!this._dragEnabled) {\r\n            return\r\n        }\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        var offset = this._fitOffsetIntoAllowedRange(top, left);\r\n        this._moveByOffset(offset);\r\n        this._dragEndHandler(e)\r\n    }\r\n    _fitOffsetIntoAllowedRange(top, left) {\r\n        var allowedOffsets = this._getAllowedOffsets();\r\n        return {\r\n            top: fitIntoRange(top, -allowedOffsets.top, allowedOffsets.bottom),\r\n            left: fitIntoRange(left, -allowedOffsets.left, allowedOffsets.right)\r\n        }\r\n    }\r\n    _getContainerDimensions() {\r\n        var document = domAdapter.getDocument();\r\n        var container = this._positionController.$dragResizeContainer.get(0);\r\n        var containerWidth = getOuterWidth(container);\r\n        var containerHeight = getOuterHeight(container);\r\n        if (isWindow(container)) {\r\n            containerHeight = Math.max(document.body.clientHeight, containerHeight);\r\n            containerWidth = Math.max(document.body.clientWidth, containerWidth)\r\n        }\r\n        return {\r\n            width: containerWidth,\r\n            height: containerHeight\r\n        }\r\n    }\r\n    _getContainerPosition() {\r\n        var container = this._positionController.$dragResizeContainer.get(0);\r\n        return isWindow(container) ? {\r\n            top: 0,\r\n            left: 0\r\n        } : getOffset(container)\r\n    }\r\n    _getElementPosition() {\r\n        return getOffset(this._draggableElement)\r\n    }\r\n    _getInnerDelta() {\r\n        var containerDimensions = this._getContainerDimensions();\r\n        var elementDimensions = this._getElementDimensions();\r\n        return {\r\n            x: containerDimensions.width - elementDimensions.width,\r\n            y: containerDimensions.height - elementDimensions.height\r\n        }\r\n    }\r\n    _getOuterDelta() {\r\n        var {\r\n            width: width,\r\n            height: height\r\n        } = this._getElementDimensions();\r\n        var outsideDragFactor = this._positionController.outsideDragFactor;\r\n        return {\r\n            x: width * outsideDragFactor,\r\n            y: height * outsideDragFactor\r\n        }\r\n    }\r\n    _getFullDelta() {\r\n        var fullDelta = this._getInnerDelta();\r\n        var outerDelta = this._getOuterDelta();\r\n        return {\r\n            x: fullDelta.x + outerDelta.x,\r\n            y: fullDelta.y + outerDelta.y\r\n        }\r\n    }\r\n    _getElementDimensions() {\r\n        return {\r\n            width: this._draggableElement.offsetWidth,\r\n            height: this._draggableElement.offsetHeight\r\n        }\r\n    }\r\n    _getAllowedOffsets() {\r\n        var fullDelta = this._getFullDelta();\r\n        var isDragAllowed = fullDelta.y >= 0 && fullDelta.x >= 0;\r\n        if (!isDragAllowed) {\r\n            return {\r\n                top: 0,\r\n                bottom: 0,\r\n                left: 0,\r\n                right: 0\r\n            }\r\n        }\r\n        var elementPosition = this._getElementPosition();\r\n        var containerPosition = this._getContainerPosition();\r\n        var outerDelta = this._getOuterDelta();\r\n        return {\r\n            top: elementPosition.top - containerPosition.top + outerDelta.y,\r\n            bottom: -elementPosition.top + containerPosition.top + fullDelta.y,\r\n            left: elementPosition.left - containerPosition.left + outerDelta.x,\r\n            right: -elementPosition.left + containerPosition.left + fullDelta.x\r\n        }\r\n    }\r\n    _moveByOffset(offset) {\r\n        var currentPosition = locate(this._draggableElement);\r\n        var newPosition = {\r\n            left: currentPosition.left + offset.left,\r\n            top: currentPosition.top + offset.top\r\n        };\r\n        move(this._draggableElement, newPosition)\r\n    }\r\n}\r\nexport default OverlayDrag;\r\n"]},"metadata":{},"sourceType":"module"}