{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport swal from 'sweetalert';\n\nconst useToken = () => {\n  _s();\n\n  const getToken = () => {\n    const tokenString = localStorage.getItem('Token');\n    const LOGIN = process.env.REACT_APP_LOGIN_URL;\n    let userToken = \"\";\n    const now = new Date();\n\n    if (tokenString != null && tokenString.includes(\"value\")) {\n      userToken = JSON.parse(tokenString); // compare the expiry time of the item with the current time\n\n      if (now.getTime() > userToken.expiry) {\n        // If the item is expired, delete the item from storage\n        // and return null\n        swal({\n          title: \"Alerta\",\n          text: \"La sesión ha expirado\",\n          icon: \"warning\"\n        }).then(() => {\n          window.localStorage.clear();\n          window.location.href = LOGIN;\n        });\n      }\n    }\n\n    return userToken;\n  };\n\n  const [Token, setToken] = useState(getToken());\n\n  const saveToken = userToken => {\n    const now = new Date(); // `item` is an object which contains the original value\n    // as well as the time when it's supposed to expire\n\n    const item = {\n      value: userToken,\n      expiry: now.setMinutes(now.getMinutes() + 180)\n    };\n    localStorage.setItem('Token', JSON.stringify(item));\n    setToken(userToken);\n  };\n\n  return {\n    setToken: saveToken,\n    Token\n  };\n};\n\n_s(useToken, \"WSlxuJe+i/FLoVRDiBydnAgrRwk=\");\n\nexport default useToken;","map":{"version":3,"sources":["C:/Personal/TemplateCursoServerless/src/components/Hooks/useToken.jsx"],"names":["useState","swal","useToken","getToken","tokenString","localStorage","getItem","LOGIN","process","env","REACT_APP_LOGIN_URL","userToken","now","Date","includes","JSON","parse","getTime","expiry","title","text","icon","then","window","clear","location","href","Token","setToken","saveToken","item","value","setMinutes","getMinutes","setItem","stringify"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,IAAP,MAAiB,YAAjB;;AAEA,MAAMC,QAAQ,GAAE,MAAO;AAAA;;AACrB,QAAMC,QAAQ,GAAG,MAAM;AACrB,UAAMC,WAAW,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAApB;AACA,UAAMC,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAYC,mBAA1B;AACA,QAAIC,SAAS,GAAG,EAAhB;AACA,UAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;AAEA,QAAGT,WAAW,IAAG,IAAd,IAAsBA,WAAW,CAACU,QAAZ,CAAqB,OAArB,CAAzB,EAAuD;AACpDH,MAAAA,SAAS,GAAGI,IAAI,CAACC,KAAL,CAAWZ,WAAX,CAAZ,CADoD,CAGnD;;AACE,UAAIQ,GAAG,CAACK,OAAJ,KAAgBN,SAAS,CAACO,MAA9B,EAAsC;AACtC;AACA;AAEAjB,QAAAA,IAAI,CAAC;AACHkB,UAAAA,KAAK,EAAC,QADH;AAEHC,UAAAA,IAAI,EAAC,uBAFF;AAGHC,UAAAA,IAAI,EAAE;AAHH,SAAD,CAAJ,CAIGC,IAJH,CAIQ,MAAM;AACZC,UAAAA,MAAM,CAAClB,YAAP,CAAoBmB,KAApB;AACAD,UAAAA,MAAM,CAACE,QAAP,CAAgBC,IAAhB,GAAuBnB,KAAvB;AAED,SARD;AAWD;AAEJ;;AAED,WAAOI,SAAP;AACD,GA9BD;;AAgCA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoB5B,QAAQ,CAACG,QAAQ,EAAT,CAAlC;;AAEA,QAAM0B,SAAS,GAAGlB,SAAS,IAAI;AAE7B,UAAMC,GAAG,GAAG,IAAIC,IAAJ,EAAZ,CAF6B,CAIvB;AACA;;AACA,UAAMiB,IAAI,GAAG;AACXC,MAAAA,KAAK,EAAEpB,SADI;AAEXO,MAAAA,MAAM,EAAEN,GAAG,CAACoB,UAAJ,CAAgBpB,GAAG,CAACqB,UAAJ,KAAmB,GAAnC;AAFG,KAAb;AAMN5B,IAAAA,YAAY,CAAC6B,OAAb,CAAqB,OAArB,EAA8BnB,IAAI,CAACoB,SAAL,CAAeL,IAAf,CAA9B;AACAF,IAAAA,QAAQ,CAACjB,SAAD,CAAR;AACD,GAdD;;AAgBA,SAAO;AACLiB,IAAAA,QAAQ,EAAEC,SADL;AAELF,IAAAA;AAFK,GAAP;AAID,CAvDD;;GAAMzB,Q;;AAwDN,eAAeA,QAAf","sourcesContent":["import { useState } from 'react';\r\nimport swal from 'sweetalert';\r\n\r\nconst useToken= () =>  { \r\n  const getToken = () => {\r\n    const tokenString = localStorage.getItem('Token');\r\n    const LOGIN = process.env.REACT_APP_LOGIN_URL;\r\n    let userToken = \"\";\r\n    const now = new Date()\r\n  \r\n    if(tokenString !=null && tokenString.includes(\"value\")){\r\n       userToken = JSON.parse(tokenString);\r\n\r\n        // compare the expiry time of the item with the current time\r\n          if (now.getTime() > userToken.expiry) {\r\n          // If the item is expired, delete the item from storage\r\n          // and return null\r\n\r\n          swal({  \r\n            title:\"Alerta\",\r\n            text:\"La sesión ha expirado\",\r\n            icon: \"warning\"\r\n          }).then(() => {\r\n            window.localStorage.clear();      \r\n            window.location.href = LOGIN; \r\n\r\n          });\r\n\r\n\r\n        }\r\n\r\n    }\r\n  \r\n    return userToken\r\n  };\r\n\r\n  const [Token, setToken] = useState(getToken());\r\n\r\n  const saveToken = userToken => {\r\n\r\n    const now = new Date()\r\n  \r\n          // `item` is an object which contains the original value\r\n          // as well as the time when it's supposed to expire\r\n          const item = {\r\n            value: userToken,\r\n            expiry: now.setMinutes( now.getMinutes() + 180 )\r\n            ,\r\n          }\r\n\r\n    localStorage.setItem('Token', JSON.stringify(item));\r\n    setToken(userToken);\r\n  };\r\n\r\n  return {\r\n    setToken: saveToken,\r\n    Token\r\n  }\r\n}\r\nexport default useToken;"]},"metadata":{},"sourceType":"module"}