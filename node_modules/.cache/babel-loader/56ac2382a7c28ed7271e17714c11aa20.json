{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.row_dragging.js)\r\n * Version: 21.2.5\r\n * Build date: Mon Jan 17 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport { setWidth, getWidth } from \"../../core/utils/size\";\nimport $ from \"../../core/renderer\";\nimport { extend } from \"../../core/utils/extend\";\nimport Sortable from \"../sortable\";\nimport gridCoreUtils from \"./ui.grid_core.utils\";\nvar COMMAND_HANDLE_CLASS = \"dx-command-drag\";\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\nvar HANDLE_ICON_CLASS = \"drag-icon\";\nvar ROWS_VIEW = \"rowsview\";\nvar SORTABLE_WITHOUT_HANDLE_CLASS = \"dx-sortable-without-handle\";\nvar RowDraggingExtender = {\n  init: function () {\n    this.callBase.apply(this, arguments);\n\n    this._updateHandleColumn();\n  },\n  _allowReordering: function () {\n    var rowDragging = this.option(\"rowDragging\");\n    return !!(rowDragging && (rowDragging.allowReordering || rowDragging.allowDropInsideItem || rowDragging.group));\n  },\n  _updateHandleColumn: function () {\n    var rowDragging = this.option(\"rowDragging\");\n\n    var allowReordering = this._allowReordering();\n\n    var columnsController = this._columnsController;\n    var isHandleColumnVisible = allowReordering && rowDragging.showDragIcons;\n    columnsController && columnsController.addCommandColumn({\n      type: \"drag\",\n      command: \"drag\",\n      visibleIndex: -2,\n      alignment: \"center\",\n      cssClass: COMMAND_HANDLE_CLASS,\n      width: \"auto\",\n      cellTemplate: this._getHandleTemplate(),\n      visible: isHandleColumnVisible\n    });\n    columnsController.columnOption(\"type:drag\", \"visible\", isHandleColumnVisible);\n  },\n  _renderContent: function () {\n    var rowDragging = this.option(\"rowDragging\");\n\n    var allowReordering = this._allowReordering();\n\n    var $content = this.callBase.apply(this, arguments);\n    var isFixedTableRendering = this._isFixedTableRendering;\n    var sortableName = \"_sortable\";\n    var sortableFixedName = \"_sortableFixed\";\n    var currentSortableName = isFixedTableRendering ? sortableFixedName : sortableName;\n    var anotherSortableName = isFixedTableRendering ? sortableName : sortableFixedName;\n\n    var togglePointerEventsStyle = toggle => {\n      var _this$sortableFixedNa;\n\n      null === (_this$sortableFixedNa = this[sortableFixedName]) || void 0 === _this$sortableFixedNa ? void 0 : _this$sortableFixedNa.$element().css(\"pointerEvents\", toggle ? \"auto\" : \"\");\n    };\n\n    var filter = this.option(\"dataRowTemplate\") ? \"> table > tbody.dx-row:not(.dx-freespace-row):not(.dx-virtual-row)\" : \"> table > tbody > .dx-row:not(.dx-freespace-row):not(.dx-virtual-row)\";\n\n    if ((allowReordering || this[currentSortableName]) && $content.length) {\n      this[currentSortableName] = this._createComponent($content, Sortable, extend({\n        component: this.component,\n        contentTemplate: null,\n        filter: filter,\n        dragTemplate: this._getDraggableRowTemplate(),\n        handle: rowDragging.showDragIcons && \".\".concat(COMMAND_HANDLE_CLASS),\n        dropFeedbackMode: \"indicate\"\n      }, rowDragging, {\n        onDragStart: e => {\n          var _this$getController, _rowDragging$onDragSt;\n\n          null === (_this$getController = this.getController(\"keyboardNavigation\")) || void 0 === _this$getController ? void 0 : _this$getController._resetFocusedCell();\n          var row = e.component.getVisibleRows()[e.fromIndex];\n          e.itemData = row && row.data;\n          var isDataRow = row && \"data\" === row.rowType;\n          e.cancel = !allowReordering || !isDataRow;\n          null === (_rowDragging$onDragSt = rowDragging.onDragStart) || void 0 === _rowDragging$onDragSt ? void 0 : _rowDragging$onDragSt.call(rowDragging, e);\n        },\n        onDragEnter: () => {\n          togglePointerEventsStyle(true);\n        },\n        onDragLeave: () => {\n          togglePointerEventsStyle(false);\n        },\n        onDragEnd: e => {\n          var _rowDragging$onDragEn;\n\n          togglePointerEventsStyle(false);\n          null === (_rowDragging$onDragEn = rowDragging.onDragEnd) || void 0 === _rowDragging$onDragEn ? void 0 : _rowDragging$onDragEn.call(rowDragging, e);\n        },\n        onAdd: e => {\n          var _rowDragging$onAdd;\n\n          togglePointerEventsStyle(false);\n          null === (_rowDragging$onAdd = rowDragging.onAdd) || void 0 === _rowDragging$onAdd ? void 0 : _rowDragging$onAdd.call(rowDragging, e);\n        },\n        dropFeedbackMode: rowDragging.dropFeedbackMode,\n        onOptionChanged: e => {\n          var hasFixedSortable = this[sortableFixedName];\n\n          if (hasFixedSortable) {\n            if (\"fromIndex\" === e.name || \"toIndex\" === e.name) {\n              this[anotherSortableName].option(e.name, e.value);\n            }\n          }\n        }\n      }));\n      $content.toggleClass(\"dx-scrollable-container\", isFixedTableRendering);\n      $content.toggleClass(SORTABLE_WITHOUT_HANDLE_CLASS, allowReordering && !rowDragging.showDragIcons);\n    }\n\n    return $content;\n  },\n  _resizeCore: function () {\n    this.callBase.apply(this, arguments);\n\n    var offset = this._dataController.getRowIndexOffset();\n\n    [this._sortable, this._sortableFixed].forEach(sortable => {\n      null === sortable || void 0 === sortable ? void 0 : sortable.option(\"offset\", offset);\n      null === sortable || void 0 === sortable ? void 0 : sortable.update();\n    });\n  },\n  _getDraggableGridOptions: function (options) {\n    var gridOptions = this.option();\n    var columns = this.getColumns();\n    var $rowElement = $(this.getRowElement(options.rowIndex));\n    return {\n      dataSource: [{\n        id: 1,\n        parentId: 0\n      }],\n      showBorders: true,\n      showColumnHeaders: false,\n      scrolling: {\n        useNative: false,\n        showScrollbar: \"never\"\n      },\n      pager: {\n        visible: false\n      },\n      loadingTimeout: null,\n      columnFixing: gridOptions.columnFixing,\n      columnAutoWidth: gridOptions.columnAutoWidth,\n      showColumnLines: gridOptions.showColumnLines,\n      columns: columns.map(column => ({\n        width: column.width || column.visibleWidth,\n        fixed: column.fixed,\n        fixedPosition: column.fixedPosition\n      })),\n      onRowPrepared: e => {\n        var rowsView = e.component.getView(\"rowsView\");\n        $(e.rowElement).replaceWith($rowElement.eq(rowsView._isFixedTableRendering ? 1 : 0).clone());\n      }\n    };\n  },\n  _getDraggableRowTemplate: function () {\n    return options => {\n      var $rootElement = this.component.$element();\n      var $dataGridContainer = $(\"<div>\");\n      setWidth($dataGridContainer, getWidth($rootElement));\n\n      var items = this._dataController.items();\n\n      var row = items && items[options.fromIndex];\n\n      var gridOptions = this._getDraggableGridOptions(row);\n\n      this._createComponent($dataGridContainer, this.component.NAME, gridOptions);\n\n      $dataGridContainer.find(\".dx-gridbase-container\").children(\":not(.\".concat(this.addWidgetPrefix(ROWS_VIEW), \")\")).hide();\n      return $dataGridContainer;\n    };\n  },\n  _getHandleTemplate: function () {\n    return (container, options) => {\n      if (\"data\" === options.rowType) {\n        $(container).addClass(CELL_FOCUS_DISABLED_CLASS);\n        return $(\"<span>\").addClass(this.addWidgetPrefix(HANDLE_ICON_CLASS));\n      } else {\n        gridCoreUtils.setEmptyText($(container));\n      }\n    };\n  },\n  optionChanged: function (args) {\n    if (\"rowDragging\" === args.name) {\n      this._updateHandleColumn();\n\n      this._invalidate(true, true);\n\n      args.handled = true;\n    }\n\n    this.callBase.apply(this, arguments);\n  }\n};\nexport var rowDraggingModule = {\n  defaultOptions: function () {\n    return {\n      rowDragging: {\n        showDragIcons: true,\n        dropFeedbackMode: \"indicate\",\n        allowReordering: false,\n        allowDropInsideItem: false\n      }\n    };\n  },\n  extenders: {\n    views: {\n      rowsView: RowDraggingExtender\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Valen/OneDrive/Documentos/Proyecto AWS/FrontServerless/node_modules/devextreme/esm/ui/grid_core/ui.grid_core.row_dragging.js"],"names":["setWidth","getWidth","$","extend","Sortable","gridCoreUtils","COMMAND_HANDLE_CLASS","CELL_FOCUS_DISABLED_CLASS","HANDLE_ICON_CLASS","ROWS_VIEW","SORTABLE_WITHOUT_HANDLE_CLASS","RowDraggingExtender","init","callBase","apply","arguments","_updateHandleColumn","_allowReordering","rowDragging","option","allowReordering","allowDropInsideItem","group","columnsController","_columnsController","isHandleColumnVisible","showDragIcons","addCommandColumn","type","command","visibleIndex","alignment","cssClass","width","cellTemplate","_getHandleTemplate","visible","columnOption","_renderContent","$content","isFixedTableRendering","_isFixedTableRendering","sortableName","sortableFixedName","currentSortableName","anotherSortableName","togglePointerEventsStyle","toggle","_this$sortableFixedNa","$element","css","filter","length","_createComponent","component","contentTemplate","dragTemplate","_getDraggableRowTemplate","handle","concat","dropFeedbackMode","onDragStart","e","_this$getController","_rowDragging$onDragSt","getController","_resetFocusedCell","row","getVisibleRows","fromIndex","itemData","data","isDataRow","rowType","cancel","call","onDragEnter","onDragLeave","onDragEnd","_rowDragging$onDragEn","onAdd","_rowDragging$onAdd","onOptionChanged","hasFixedSortable","name","value","toggleClass","_resizeCore","offset","_dataController","getRowIndexOffset","_sortable","_sortableFixed","forEach","sortable","update","_getDraggableGridOptions","options","gridOptions","columns","getColumns","$rowElement","getRowElement","rowIndex","dataSource","id","parentId","showBorders","showColumnHeaders","scrolling","useNative","showScrollbar","pager","loadingTimeout","columnFixing","columnAutoWidth","showColumnLines","map","column","visibleWidth","fixed","fixedPosition","onRowPrepared","rowsView","getView","rowElement","replaceWith","eq","clone","$rootElement","$dataGridContainer","items","NAME","find","children","addWidgetPrefix","hide","container","addClass","setEmptyText","optionChanged","args","_invalidate","handled","rowDraggingModule","defaultOptions","extenders","views"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/grid_core/ui.grid_core.row_dragging.js)\r\n * Version: 21.2.5\r\n * Build date: Mon Jan 17 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport {\r\n    setWidth,\r\n    getWidth\r\n} from \"../../core/utils/size\";\r\nimport $ from \"../../core/renderer\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport Sortable from \"../sortable\";\r\nimport gridCoreUtils from \"./ui.grid_core.utils\";\r\nvar COMMAND_HANDLE_CLASS = \"dx-command-drag\";\r\nvar CELL_FOCUS_DISABLED_CLASS = \"dx-cell-focus-disabled\";\r\nvar HANDLE_ICON_CLASS = \"drag-icon\";\r\nvar ROWS_VIEW = \"rowsview\";\r\nvar SORTABLE_WITHOUT_HANDLE_CLASS = \"dx-sortable-without-handle\";\r\nvar RowDraggingExtender = {\r\n    init: function() {\r\n        this.callBase.apply(this, arguments);\r\n        this._updateHandleColumn()\r\n    },\r\n    _allowReordering: function() {\r\n        var rowDragging = this.option(\"rowDragging\");\r\n        return !!(rowDragging && (rowDragging.allowReordering || rowDragging.allowDropInsideItem || rowDragging.group))\r\n    },\r\n    _updateHandleColumn: function() {\r\n        var rowDragging = this.option(\"rowDragging\");\r\n        var allowReordering = this._allowReordering();\r\n        var columnsController = this._columnsController;\r\n        var isHandleColumnVisible = allowReordering && rowDragging.showDragIcons;\r\n        columnsController && columnsController.addCommandColumn({\r\n            type: \"drag\",\r\n            command: \"drag\",\r\n            visibleIndex: -2,\r\n            alignment: \"center\",\r\n            cssClass: COMMAND_HANDLE_CLASS,\r\n            width: \"auto\",\r\n            cellTemplate: this._getHandleTemplate(),\r\n            visible: isHandleColumnVisible\r\n        });\r\n        columnsController.columnOption(\"type:drag\", \"visible\", isHandleColumnVisible)\r\n    },\r\n    _renderContent: function() {\r\n        var rowDragging = this.option(\"rowDragging\");\r\n        var allowReordering = this._allowReordering();\r\n        var $content = this.callBase.apply(this, arguments);\r\n        var isFixedTableRendering = this._isFixedTableRendering;\r\n        var sortableName = \"_sortable\";\r\n        var sortableFixedName = \"_sortableFixed\";\r\n        var currentSortableName = isFixedTableRendering ? sortableFixedName : sortableName;\r\n        var anotherSortableName = isFixedTableRendering ? sortableName : sortableFixedName;\r\n        var togglePointerEventsStyle = toggle => {\r\n            var _this$sortableFixedNa;\r\n            null === (_this$sortableFixedNa = this[sortableFixedName]) || void 0 === _this$sortableFixedNa ? void 0 : _this$sortableFixedNa.$element().css(\"pointerEvents\", toggle ? \"auto\" : \"\")\r\n        };\r\n        var filter = this.option(\"dataRowTemplate\") ? \"> table > tbody.dx-row:not(.dx-freespace-row):not(.dx-virtual-row)\" : \"> table > tbody > .dx-row:not(.dx-freespace-row):not(.dx-virtual-row)\";\r\n        if ((allowReordering || this[currentSortableName]) && $content.length) {\r\n            this[currentSortableName] = this._createComponent($content, Sortable, extend({\r\n                component: this.component,\r\n                contentTemplate: null,\r\n                filter: filter,\r\n                dragTemplate: this._getDraggableRowTemplate(),\r\n                handle: rowDragging.showDragIcons && \".\".concat(COMMAND_HANDLE_CLASS),\r\n                dropFeedbackMode: \"indicate\"\r\n            }, rowDragging, {\r\n                onDragStart: e => {\r\n                    var _this$getController, _rowDragging$onDragSt;\r\n                    null === (_this$getController = this.getController(\"keyboardNavigation\")) || void 0 === _this$getController ? void 0 : _this$getController._resetFocusedCell();\r\n                    var row = e.component.getVisibleRows()[e.fromIndex];\r\n                    e.itemData = row && row.data;\r\n                    var isDataRow = row && \"data\" === row.rowType;\r\n                    e.cancel = !allowReordering || !isDataRow;\r\n                    null === (_rowDragging$onDragSt = rowDragging.onDragStart) || void 0 === _rowDragging$onDragSt ? void 0 : _rowDragging$onDragSt.call(rowDragging, e)\r\n                },\r\n                onDragEnter: () => {\r\n                    togglePointerEventsStyle(true)\r\n                },\r\n                onDragLeave: () => {\r\n                    togglePointerEventsStyle(false)\r\n                },\r\n                onDragEnd: e => {\r\n                    var _rowDragging$onDragEn;\r\n                    togglePointerEventsStyle(false);\r\n                    null === (_rowDragging$onDragEn = rowDragging.onDragEnd) || void 0 === _rowDragging$onDragEn ? void 0 : _rowDragging$onDragEn.call(rowDragging, e)\r\n                },\r\n                onAdd: e => {\r\n                    var _rowDragging$onAdd;\r\n                    togglePointerEventsStyle(false);\r\n                    null === (_rowDragging$onAdd = rowDragging.onAdd) || void 0 === _rowDragging$onAdd ? void 0 : _rowDragging$onAdd.call(rowDragging, e)\r\n                },\r\n                dropFeedbackMode: rowDragging.dropFeedbackMode,\r\n                onOptionChanged: e => {\r\n                    var hasFixedSortable = this[sortableFixedName];\r\n                    if (hasFixedSortable) {\r\n                        if (\"fromIndex\" === e.name || \"toIndex\" === e.name) {\r\n                            this[anotherSortableName].option(e.name, e.value)\r\n                        }\r\n                    }\r\n                }\r\n            }));\r\n            $content.toggleClass(\"dx-scrollable-container\", isFixedTableRendering);\r\n            $content.toggleClass(SORTABLE_WITHOUT_HANDLE_CLASS, allowReordering && !rowDragging.showDragIcons)\r\n        }\r\n        return $content\r\n    },\r\n    _resizeCore: function() {\r\n        this.callBase.apply(this, arguments);\r\n        var offset = this._dataController.getRowIndexOffset();\r\n        [this._sortable, this._sortableFixed].forEach(sortable => {\r\n            null === sortable || void 0 === sortable ? void 0 : sortable.option(\"offset\", offset);\r\n            null === sortable || void 0 === sortable ? void 0 : sortable.update()\r\n        })\r\n    },\r\n    _getDraggableGridOptions: function(options) {\r\n        var gridOptions = this.option();\r\n        var columns = this.getColumns();\r\n        var $rowElement = $(this.getRowElement(options.rowIndex));\r\n        return {\r\n            dataSource: [{\r\n                id: 1,\r\n                parentId: 0\r\n            }],\r\n            showBorders: true,\r\n            showColumnHeaders: false,\r\n            scrolling: {\r\n                useNative: false,\r\n                showScrollbar: \"never\"\r\n            },\r\n            pager: {\r\n                visible: false\r\n            },\r\n            loadingTimeout: null,\r\n            columnFixing: gridOptions.columnFixing,\r\n            columnAutoWidth: gridOptions.columnAutoWidth,\r\n            showColumnLines: gridOptions.showColumnLines,\r\n            columns: columns.map(column => ({\r\n                width: column.width || column.visibleWidth,\r\n                fixed: column.fixed,\r\n                fixedPosition: column.fixedPosition\r\n            })),\r\n            onRowPrepared: e => {\r\n                var rowsView = e.component.getView(\"rowsView\");\r\n                $(e.rowElement).replaceWith($rowElement.eq(rowsView._isFixedTableRendering ? 1 : 0).clone())\r\n            }\r\n        }\r\n    },\r\n    _getDraggableRowTemplate: function() {\r\n        return options => {\r\n            var $rootElement = this.component.$element();\r\n            var $dataGridContainer = $(\"<div>\");\r\n            setWidth($dataGridContainer, getWidth($rootElement));\r\n            var items = this._dataController.items();\r\n            var row = items && items[options.fromIndex];\r\n            var gridOptions = this._getDraggableGridOptions(row);\r\n            this._createComponent($dataGridContainer, this.component.NAME, gridOptions);\r\n            $dataGridContainer.find(\".dx-gridbase-container\").children(\":not(.\".concat(this.addWidgetPrefix(ROWS_VIEW), \")\")).hide();\r\n            return $dataGridContainer\r\n        }\r\n    },\r\n    _getHandleTemplate: function() {\r\n        return (container, options) => {\r\n            if (\"data\" === options.rowType) {\r\n                $(container).addClass(CELL_FOCUS_DISABLED_CLASS);\r\n                return $(\"<span>\").addClass(this.addWidgetPrefix(HANDLE_ICON_CLASS))\r\n            } else {\r\n                gridCoreUtils.setEmptyText($(container))\r\n            }\r\n        }\r\n    },\r\n    optionChanged: function(args) {\r\n        if (\"rowDragging\" === args.name) {\r\n            this._updateHandleColumn();\r\n            this._invalidate(true, true);\r\n            args.handled = true\r\n        }\r\n        this.callBase.apply(this, arguments)\r\n    }\r\n};\r\nexport var rowDraggingModule = {\r\n    defaultOptions: function() {\r\n        return {\r\n            rowDragging: {\r\n                showDragIcons: true,\r\n                dropFeedbackMode: \"indicate\",\r\n                allowReordering: false,\r\n                allowDropInsideItem: false\r\n            }\r\n        }\r\n    },\r\n    extenders: {\r\n        views: {\r\n            rowsView: RowDraggingExtender\r\n        }\r\n    }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}