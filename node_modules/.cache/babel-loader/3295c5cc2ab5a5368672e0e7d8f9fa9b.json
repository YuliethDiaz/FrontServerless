{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useMemo = useMemo;\n\nvar _disposables = require(\"./disposables\");\n\nfunction useMemo(cb, keyResolver) {\n  let cache = new Map();\n\n  function clearCache() {\n    cache.clear();\n\n    _disposables.shared.add(clearCache);\n  }\n\n  _disposables.shared.add(clearCache);\n\n  return (...args) => {\n    let key = keyResolver(...args);\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n\n    let result = cb(...args);\n    cache.set(key, result);\n    return result;\n  };\n}","map":{"version":3,"sources":["C:/Users/Valen/OneDrive/Documentos/Proyecto AWS/FrontServerless/node_modules/tailwindcss/lib/util/useMemo.js"],"names":["Object","defineProperty","exports","value","useMemo","_disposables","require","cb","keyResolver","cache","Map","clearCache","clear","shared","add","args","key","has","get","result","set"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBA,OAAlB;;AAEA,IAAIC,YAAY,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AAEA,SAASF,OAAT,CAAiBG,EAAjB,EAAqBC,WAArB,EAAkC;AAChC,MAAIC,KAAK,GAAG,IAAIC,GAAJ,EAAZ;;AAEA,WAASC,UAAT,GAAsB;AACpBF,IAAAA,KAAK,CAACG,KAAN;;AAEAP,IAAAA,YAAY,CAACQ,MAAb,CAAoBC,GAApB,CAAwBH,UAAxB;AACD;;AAEDN,EAAAA,YAAY,CAACQ,MAAb,CAAoBC,GAApB,CAAwBH,UAAxB;;AAEA,SAAO,CAAC,GAAGI,IAAJ,KAAa;AAClB,QAAIC,GAAG,GAAGR,WAAW,CAAC,GAAGO,IAAJ,CAArB;;AAEA,QAAIN,KAAK,CAACQ,GAAN,CAAUD,GAAV,CAAJ,EAAoB;AAClB,aAAOP,KAAK,CAACS,GAAN,CAAUF,GAAV,CAAP;AACD;;AAED,QAAIG,MAAM,GAAGZ,EAAE,CAAC,GAAGQ,IAAJ,CAAf;AACAN,IAAAA,KAAK,CAACW,GAAN,CAAUJ,GAAV,EAAeG,MAAf;AACA,WAAOA,MAAP;AACD,GAVD;AAWD","sourcesContent":["\"use strict\";\r\n\r\nObject.defineProperty(exports, \"__esModule\", {\r\n  value: true\r\n});\r\nexports.useMemo = useMemo;\r\n\r\nvar _disposables = require(\"./disposables\");\r\n\r\nfunction useMemo(cb, keyResolver) {\r\n  let cache = new Map();\r\n\r\n  function clearCache() {\r\n    cache.clear();\r\n\r\n    _disposables.shared.add(clearCache);\r\n  }\r\n\r\n  _disposables.shared.add(clearCache);\r\n\r\n  return (...args) => {\r\n    let key = keyResolver(...args);\r\n\r\n    if (cache.has(key)) {\r\n      return cache.get(key);\r\n    }\r\n\r\n    let result = cb(...args);\r\n    cache.set(key, result);\r\n    return result;\r\n  };\r\n}"]},"metadata":{},"sourceType":"script"}