{"ast":null,"code":"'use strict';\n\nvar isGlob = require('is-glob');\n\nvar pathPosixDirname = require('path').posix.dirname;\n\nvar isWin32 = require('os').platform() === 'win32';\nvar slash = '/';\nvar backslash = /\\\\/g;\nvar escaped = /\\\\([!*?|[\\](){}])/g;\n/**\r\n * @param {string} str\r\n * @param {Object} opts\r\n * @param {boolean} [opts.flipBackslashes=true]\r\n */\n\nmodule.exports = function globParent(str, opts) {\n  var options = Object.assign({\n    flipBackslashes: true\n  }, opts); // flip windows path separators\n\n  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {\n    str = str.replace(backslash, slash);\n  } // special case for strings ending in enclosure containing path separator\n\n\n  if (isEnclosure(str)) {\n    str += slash;\n  } // preserves full path in case of trailing path separator\n\n\n  str += 'a'; // remove path parts that are globby\n\n  do {\n    str = pathPosixDirname(str);\n  } while (isGlobby(str)); // remove escape chars and return result\n\n\n  return str.replace(escaped, '$1');\n};\n\nfunction isEnclosure(str) {\n  var lastChar = str.slice(-1);\n  var enclosureStart;\n\n  switch (lastChar) {\n    case '}':\n      enclosureStart = '{';\n      break;\n\n    case ']':\n      enclosureStart = '[';\n      break;\n\n    default:\n      return false;\n  }\n\n  var foundIndex = str.indexOf(enclosureStart);\n\n  if (foundIndex < 0) {\n    return false;\n  }\n\n  return str.slice(foundIndex + 1, -1).includes(slash);\n}\n\nfunction isGlobby(str) {\n  if (/\\([^()]+$/.test(str)) {\n    return true;\n  }\n\n  if (str[0] === '{' || str[0] === '[') {\n    return true;\n  }\n\n  if (/[^\\\\][{[]/.test(str)) {\n    return true;\n  }\n\n  return isGlob(str);\n}","map":{"version":3,"sources":["C:/Users/Valen/OneDrive/Documentos/Proyecto AWS/FrontServerless/node_modules/tailwindcss/node_modules/glob-parent/index.js"],"names":["isGlob","require","pathPosixDirname","posix","dirname","isWin32","platform","slash","backslash","escaped","module","exports","globParent","str","opts","options","Object","assign","flipBackslashes","indexOf","replace","isEnclosure","isGlobby","lastChar","slice","enclosureStart","foundIndex","includes","test"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,SAAD,CAApB;;AACA,IAAIC,gBAAgB,GAAGD,OAAO,CAAC,MAAD,CAAP,CAAgBE,KAAhB,CAAsBC,OAA7C;;AACA,IAAIC,OAAO,GAAGJ,OAAO,CAAC,IAAD,CAAP,CAAcK,QAAd,OAA6B,OAA3C;AAEA,IAAIC,KAAK,GAAG,GAAZ;AACA,IAAIC,SAAS,GAAG,KAAhB;AACA,IAAIC,OAAO,GAAG,oBAAd;AAEA;AACA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,UAAT,CAAoBC,GAApB,EAAyBC,IAAzB,EAA+B;AAC9C,MAAIC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc;AAAEC,IAAAA,eAAe,EAAE;AAAnB,GAAd,EAAyCJ,IAAzC,CAAd,CAD8C,CAG9C;;AACA,MAAIC,OAAO,CAACG,eAAR,IAA2Bb,OAA3B,IAAsCQ,GAAG,CAACM,OAAJ,CAAYZ,KAAZ,IAAqB,CAA/D,EAAkE;AAChEM,IAAAA,GAAG,GAAGA,GAAG,CAACO,OAAJ,CAAYZ,SAAZ,EAAuBD,KAAvB,CAAN;AACD,GAN6C,CAQ9C;;;AACA,MAAIc,WAAW,CAACR,GAAD,CAAf,EAAsB;AACpBA,IAAAA,GAAG,IAAIN,KAAP;AACD,GAX6C,CAa9C;;;AACAM,EAAAA,GAAG,IAAI,GAAP,CAd8C,CAgB9C;;AACA,KAAG;AACDA,IAAAA,GAAG,GAAGX,gBAAgB,CAACW,GAAD,CAAtB;AACD,GAFD,QAESS,QAAQ,CAACT,GAAD,CAFjB,EAjB8C,CAqB9C;;;AACA,SAAOA,GAAG,CAACO,OAAJ,CAAYX,OAAZ,EAAqB,IAArB,CAAP;AACD,CAvBD;;AAyBA,SAASY,WAAT,CAAqBR,GAArB,EAA0B;AACxB,MAAIU,QAAQ,GAAGV,GAAG,CAACW,KAAJ,CAAU,CAAC,CAAX,CAAf;AAEA,MAAIC,cAAJ;;AACA,UAAQF,QAAR;AACE,SAAK,GAAL;AACEE,MAAAA,cAAc,GAAG,GAAjB;AACA;;AACF,SAAK,GAAL;AACEA,MAAAA,cAAc,GAAG,GAAjB;AACA;;AACF;AACE,aAAO,KAAP;AARJ;;AAWA,MAAIC,UAAU,GAAGb,GAAG,CAACM,OAAJ,CAAYM,cAAZ,CAAjB;;AACA,MAAIC,UAAU,GAAG,CAAjB,EAAoB;AAClB,WAAO,KAAP;AACD;;AAED,SAAOb,GAAG,CAACW,KAAJ,CAAUE,UAAU,GAAG,CAAvB,EAA0B,CAAC,CAA3B,EAA8BC,QAA9B,CAAuCpB,KAAvC,CAAP;AACD;;AAED,SAASe,QAAT,CAAkBT,GAAlB,EAAuB;AACrB,MAAI,YAAYe,IAAZ,CAAiBf,GAAjB,CAAJ,EAA2B;AACzB,WAAO,IAAP;AACD;;AACD,MAAIA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAX,IAAkBA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAjC,EAAsC;AACpC,WAAO,IAAP;AACD;;AACD,MAAI,YAAYe,IAAZ,CAAiBf,GAAjB,CAAJ,EAA2B;AACzB,WAAO,IAAP;AACD;;AACD,SAAOb,MAAM,CAACa,GAAD,CAAb;AACD","sourcesContent":["'use strict';\r\n\r\nvar isGlob = require('is-glob');\r\nvar pathPosixDirname = require('path').posix.dirname;\r\nvar isWin32 = require('os').platform() === 'win32';\r\n\r\nvar slash = '/';\r\nvar backslash = /\\\\/g;\r\nvar escaped = /\\\\([!*?|[\\](){}])/g;\r\n\r\n/**\r\n * @param {string} str\r\n * @param {Object} opts\r\n * @param {boolean} [opts.flipBackslashes=true]\r\n */\r\nmodule.exports = function globParent(str, opts) {\r\n  var options = Object.assign({ flipBackslashes: true }, opts);\r\n\r\n  // flip windows path separators\r\n  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {\r\n    str = str.replace(backslash, slash);\r\n  }\r\n\r\n  // special case for strings ending in enclosure containing path separator\r\n  if (isEnclosure(str)) {\r\n    str += slash;\r\n  }\r\n\r\n  // preserves full path in case of trailing path separator\r\n  str += 'a';\r\n\r\n  // remove path parts that are globby\r\n  do {\r\n    str = pathPosixDirname(str);\r\n  } while (isGlobby(str));\r\n\r\n  // remove escape chars and return result\r\n  return str.replace(escaped, '$1');\r\n};\r\n\r\nfunction isEnclosure(str) {\r\n  var lastChar = str.slice(-1);\r\n\r\n  var enclosureStart;\r\n  switch (lastChar) {\r\n    case '}':\r\n      enclosureStart = '{';\r\n      break;\r\n    case ']':\r\n      enclosureStart = '[';\r\n      break;\r\n    default:\r\n      return false;\r\n  }\r\n\r\n  var foundIndex = str.indexOf(enclosureStart);\r\n  if (foundIndex < 0) {\r\n    return false;\r\n  }\r\n\r\n  return str.slice(foundIndex + 1, -1).includes(slash);\r\n}\r\n\r\nfunction isGlobby(str) {\r\n  if (/\\([^()]+$/.test(str)) {\r\n    return true;\r\n  }\r\n  if (str[0] === '{' || str[0] === '[') {\r\n    return true;\r\n  }\r\n  if (/[^\\\\][{[]/.test(str)) {\r\n    return true;\r\n  }\r\n  return isGlob(str);\r\n}\r\n"]},"metadata":{},"sourceType":"script"}