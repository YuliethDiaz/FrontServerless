{"ast":null,"code":"const NUMBER_STYLES = ['animation-iteration-count', 'border-image-outset', 'border-image-slice', 'border-image-width', 'box-flex', 'box-flex-group', 'box-ordinal-group', 'column-count', 'fill-opacity', 'flex', 'flex-grow', 'flex-negative', 'flex-order', 'flex-positive', 'flex-shrink', 'flood-opacity', 'font-weight', 'grid-column', 'grid-row', 'line-clamp', 'line-height', 'opacity', 'order', 'orphans', 'stop-opacity', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'tab-size', 'widows', 'z-index', 'zoom'];\nconst uppercasePattern = /[A-Z]/g;\n\nconst kebabCase = str => str.replace(uppercasePattern, '-$&').toLowerCase();\n\nconst isNumeric = value => {\n  if (typeof value === 'number') return true;\n  return !isNaN(Number(value));\n};\n\nconst getNumberStyleValue = (style, value) => NUMBER_STYLES.indexOf(style) > -1 ? value : `${value}px`;\n\nexport const normalizeStyles = styles => {\n  if (!(styles instanceof Object)) return undefined;\n  return Object.keys(styles).reduce((result, key) => {\n    const value = styles[key];\n    const kebabString = kebabCase(key);\n    result[kebabString] = isNumeric(value) ? getNumberStyleValue(kebabString, value) : value;\n    return result;\n  }, {});\n};","map":{"version":3,"sources":["C:/Personal/Tracker/FrontServerless/node_modules/@devextreme/runtime/esm/inferno/utils.js"],"names":["NUMBER_STYLES","uppercasePattern","kebabCase","str","replace","toLowerCase","isNumeric","value","isNaN","Number","getNumberStyleValue","style","indexOf","normalizeStyles","styles","Object","undefined","keys","reduce","result","key","kebabString"],"mappings":"AAAA,MAAMA,aAAa,GAAG,CAClB,2BADkB,EAElB,qBAFkB,EAGlB,oBAHkB,EAIlB,oBAJkB,EAKlB,UALkB,EAMlB,gBANkB,EAOlB,mBAPkB,EAQlB,cARkB,EASlB,cATkB,EAUlB,MAVkB,EAWlB,WAXkB,EAYlB,eAZkB,EAalB,YAbkB,EAclB,eAdkB,EAelB,aAfkB,EAgBlB,eAhBkB,EAiBlB,aAjBkB,EAkBlB,aAlBkB,EAmBlB,UAnBkB,EAoBlB,YApBkB,EAqBlB,aArBkB,EAsBlB,SAtBkB,EAuBlB,OAvBkB,EAwBlB,SAxBkB,EAyBlB,cAzBkB,EA0BlB,kBA1BkB,EA2BlB,mBA3BkB,EA4BlB,mBA5BkB,EA6BlB,gBA7BkB,EA8BlB,cA9BkB,EA+BlB,UA/BkB,EAgClB,QAhCkB,EAiClB,SAjCkB,EAkClB,MAlCkB,CAAtB;AAoCA,MAAMC,gBAAgB,GAAG,QAAzB;;AACA,MAAMC,SAAS,GAAIC,GAAD,IAASA,GAAG,CAACC,OAAJ,CAAYH,gBAAZ,EAA8B,KAA9B,EAAqCI,WAArC,EAA3B;;AACA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AACzB,MAAI,OAAOA,KAAP,KAAiB,QAArB,EACI,OAAO,IAAP;AACJ,SAAO,CAACC,KAAK,CAACC,MAAM,CAACF,KAAD,CAAP,CAAb;AACH,CAJD;;AAKA,MAAMG,mBAAmB,GAAG,CAACC,KAAD,EAAQJ,KAAR,KAAmBP,aAAa,CAACY,OAAd,CAAsBD,KAAtB,IAA+B,CAAC,CAAhC,GAAoCJ,KAApC,GAA6C,GAAEA,KAAM,IAApG;;AACA,OAAO,MAAMM,eAAe,GAAIC,MAAD,IAAY;AACvC,MAAI,EAAEA,MAAM,YAAYC,MAApB,CAAJ,EACI,OAAOC,SAAP;AACJ,SAAOD,MAAM,CAACE,IAAP,CAAYH,MAAZ,EAAoBI,MAApB,CAA2B,CAACC,MAAD,EAASC,GAAT,KAAiB;AAC/C,UAAMb,KAAK,GAAGO,MAAM,CAACM,GAAD,CAApB;AACA,UAAMC,WAAW,GAAGnB,SAAS,CAACkB,GAAD,CAA7B;AACAD,IAAAA,MAAM,CAACE,WAAD,CAAN,GAAsBf,SAAS,CAACC,KAAD,CAAT,GAChBG,mBAAmB,CAACW,WAAD,EAAcd,KAAd,CADH,GAEhBA,KAFN;AAGA,WAAOY,MAAP;AACH,GAPM,EAOJ,EAPI,CAAP;AAQH,CAXM","sourcesContent":["const NUMBER_STYLES = [\r\n    'animation-iteration-count',\r\n    'border-image-outset',\r\n    'border-image-slice',\r\n    'border-image-width',\r\n    'box-flex',\r\n    'box-flex-group',\r\n    'box-ordinal-group',\r\n    'column-count',\r\n    'fill-opacity',\r\n    'flex',\r\n    'flex-grow',\r\n    'flex-negative',\r\n    'flex-order',\r\n    'flex-positive',\r\n    'flex-shrink',\r\n    'flood-opacity',\r\n    'font-weight',\r\n    'grid-column',\r\n    'grid-row',\r\n    'line-clamp',\r\n    'line-height',\r\n    'opacity',\r\n    'order',\r\n    'orphans',\r\n    'stop-opacity',\r\n    'stroke-dasharray',\r\n    'stroke-dashoffset',\r\n    'stroke-miterlimit',\r\n    'stroke-opacity',\r\n    'stroke-width',\r\n    'tab-size',\r\n    'widows',\r\n    'z-index',\r\n    'zoom',\r\n];\r\nconst uppercasePattern = /[A-Z]/g;\r\nconst kebabCase = (str) => str.replace(uppercasePattern, '-$&').toLowerCase();\r\nconst isNumeric = (value) => {\r\n    if (typeof value === 'number')\r\n        return true;\r\n    return !isNaN(Number(value));\r\n};\r\nconst getNumberStyleValue = (style, value) => (NUMBER_STYLES.indexOf(style) > -1 ? value : `${value}px`);\r\nexport const normalizeStyles = (styles) => {\r\n    if (!(styles instanceof Object))\r\n        return undefined;\r\n    return Object.keys(styles).reduce((result, key) => {\r\n        const value = styles[key];\r\n        const kebabString = kebabCase(key);\r\n        result[kebabString] = isNumeric(value)\r\n            ? getNumberStyleValue(kebabString, value)\r\n            : value;\r\n        return result;\r\n    }, {});\r\n};\r\n"]},"metadata":{},"sourceType":"module"}