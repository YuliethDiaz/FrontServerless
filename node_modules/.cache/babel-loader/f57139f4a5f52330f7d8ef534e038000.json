{"ast":null,"code":"let postcss = require('postcss');\n\nlet IMPORTANT = /\\s*!important\\s*$/i;\nlet UNITLESS = {\n  'box-flex': true,\n  'box-flex-group': true,\n  'column-count': true,\n  'flex': true,\n  'flex-grow': true,\n  'flex-positive': true,\n  'flex-shrink': true,\n  'flex-negative': true,\n  'font-weight': true,\n  'line-clamp': true,\n  'line-height': true,\n  'opacity': true,\n  'order': true,\n  'orphans': true,\n  'tab-size': true,\n  'widows': true,\n  'z-index': true,\n  'zoom': true,\n  'fill-opacity': true,\n  'stroke-dashoffset': true,\n  'stroke-opacity': true,\n  'stroke-width': true\n};\n\nfunction dashify(str) {\n  return str.replace(/([A-Z])/g, '-$1').replace(/^ms-/, '-ms-').toLowerCase();\n}\n\nfunction decl(parent, name, value) {\n  if (value === false || value === null) return;\n  name = dashify(name);\n\n  if (typeof value === 'number') {\n    if (value === 0 || UNITLESS[name]) {\n      value = value.toString();\n    } else {\n      value += 'px';\n    }\n  }\n\n  if (name === 'css-float') name = 'float';\n\n  if (IMPORTANT.test(value)) {\n    value = value.replace(IMPORTANT, '');\n    parent.push(postcss.decl({\n      prop: name,\n      value,\n      important: true\n    }));\n  } else {\n    parent.push(postcss.decl({\n      prop: name,\n      value\n    }));\n  }\n}\n\nfunction atRule(parent, parts, value) {\n  let node = postcss.atRule({\n    name: parts[1],\n    params: parts[3] || ''\n  });\n\n  if (typeof value === 'object') {\n    node.nodes = [];\n    parse(value, node);\n  }\n\n  parent.push(node);\n}\n\nfunction parse(obj, parent) {\n  let name, value, node;\n\n  for (name in obj) {\n    value = obj[name];\n\n    if (value === null || typeof value === 'undefined') {\n      continue;\n    } else if (name[0] === '@') {\n      let parts = name.match(/@(\\S+)(\\s+([\\W\\w]*)\\s*)?/);\n\n      if (Array.isArray(value)) {\n        for (let i of value) {\n          atRule(parent, parts, i);\n        }\n      } else {\n        atRule(parent, parts, value);\n      }\n    } else if (Array.isArray(value)) {\n      for (let i of value) {\n        decl(parent, name, i);\n      }\n    } else if (typeof value === 'object') {\n      node = postcss.rule({\n        selector: name\n      });\n      parse(value, node);\n      parent.push(node);\n    } else {\n      decl(parent, name, value);\n    }\n  }\n}\n\nmodule.exports = function (obj) {\n  let root = postcss.root();\n  parse(obj, root);\n  return root;\n};","map":{"version":3,"sources":["C:/Users/Valen/OneDrive/Documentos/Proyecto AWS/FrontServerless/node_modules/postcss-js/parser.js"],"names":["postcss","require","IMPORTANT","UNITLESS","dashify","str","replace","toLowerCase","decl","parent","name","value","toString","test","push","prop","important","atRule","parts","node","params","nodes","parse","obj","match","Array","isArray","i","rule","selector","module","exports","root"],"mappings":"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","sourcesContent":["let postcss = require('postcss')\r\n\r\nlet IMPORTANT = /\\s*!important\\s*$/i\r\n\r\nlet UNITLESS = {\r\n  'box-flex': true,\r\n  'box-flex-group': true,\r\n  'column-count': true,\r\n  'flex': true,\r\n  'flex-grow': true,\r\n  'flex-positive': true,\r\n  'flex-shrink': true,\r\n  'flex-negative': true,\r\n  'font-weight': true,\r\n  'line-clamp': true,\r\n  'line-height': true,\r\n  'opacity': true,\r\n  'order': true,\r\n  'orphans': true,\r\n  'tab-size': true,\r\n  'widows': true,\r\n  'z-index': true,\r\n  'zoom': true,\r\n  'fill-opacity': true,\r\n  'stroke-dashoffset': true,\r\n  'stroke-opacity': true,\r\n  'stroke-width': true\r\n}\r\n\r\nfunction dashify (str) {\r\n  return str\r\n    .replace(/([A-Z])/g, '-$1')\r\n    .replace(/^ms-/, '-ms-')\r\n    .toLowerCase()\r\n}\r\n\r\nfunction decl (parent, name, value) {\r\n  if (value === false || value === null) return\r\n\r\n  name = dashify(name)\r\n  if (typeof value === 'number') {\r\n    if (value === 0 || UNITLESS[name]) {\r\n      value = value.toString()\r\n    } else {\r\n      value += 'px'\r\n    }\r\n  }\r\n\r\n  if (name === 'css-float') name = 'float'\r\n\r\n  if (IMPORTANT.test(value)) {\r\n    value = value.replace(IMPORTANT, '')\r\n    parent.push(postcss.decl({ prop: name, value, important: true }))\r\n  } else {\r\n    parent.push(postcss.decl({ prop: name, value }))\r\n  }\r\n}\r\n\r\nfunction atRule (parent, parts, value) {\r\n  let node = postcss.atRule({ name: parts[1], params: parts[3] || '' })\r\n  if (typeof value === 'object') {\r\n    node.nodes = []\r\n    parse(value, node)\r\n  }\r\n  parent.push(node)\r\n}\r\n\r\nfunction parse (obj, parent) {\r\n  let name, value, node\r\n  for (name in obj) {\r\n    value = obj[name]\r\n    if (value === null || typeof value === 'undefined') {\r\n      continue\r\n    } else if (name[0] === '@') {\r\n      let parts = name.match(/@(\\S+)(\\s+([\\W\\w]*)\\s*)?/)\r\n      if (Array.isArray(value)) {\r\n        for (let i of value) {\r\n          atRule(parent, parts, i)\r\n        }\r\n      } else {\r\n        atRule(parent, parts, value)\r\n      }\r\n    } else if (Array.isArray(value)) {\r\n      for (let i of value) {\r\n        decl(parent, name, i)\r\n      }\r\n    } else if (typeof value === 'object') {\r\n      node = postcss.rule({ selector: name })\r\n      parse(value, node)\r\n      parent.push(node)\r\n    } else {\r\n      decl(parent, name, value)\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = function (obj) {\r\n  let root = postcss.root()\r\n  parse(obj, root)\r\n  return root\r\n}\r\n"]},"metadata":{},"sourceType":"script"}