{"ast":null,"code":"/**\r\n * DevExtreme (esm/ui/form/ui.form.js)\r\n * Version: 21.2.5\r\n * Build date: Mon Jan 17 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport $ from \"../../core/renderer\";\nimport eventsEngine from \"../../events/core/events_engine\";\nimport registerComponent from \"../../core/component_registrator\";\nimport Guid from \"../../core/guid\";\nimport { ensureDefined } from \"../../core/utils/common\";\nimport config from \"../../core/config\";\nimport { isDefined, isEmptyObject, isObject, isString } from \"../../core/utils/type\";\nimport { each } from \"../../core/utils/iterator\";\nimport { inArray } from \"../../core/utils/array\";\nimport { extend } from \"../../core/utils/extend\";\nimport { triggerResizeEvent, triggerShownEvent } from \"../../events/visibility_change\";\nimport { getPublicElement } from \"../../core/element\";\nimport messageLocalization from \"../../localization/message\";\nimport Widget from \"../widget/ui.widget\";\nimport Editor from \"../editor/editor\";\nimport { defaultScreenFactorFunc, getCurrentScreenFactor, hasWindow } from \"../../core/utils/window\";\nimport ValidationEngine from \"../validation_engine\";\nimport { default as FormItemsRunTimeInfo } from \"./ui.form.items_runtime_info\";\nimport TabPanel from \"../tab_panel\";\nimport Scrollable from \"../scroll_view/ui.scrollable\";\nimport { Deferred } from \"../../core/utils/deferred\";\nimport { isMaterial } from \"../themes\";\nimport tryCreateItemOptionAction from \"./ui.form.item_options_actions\";\nimport \"./ui.form.layout_manager\";\nimport { concatPaths, createItemPathByIndex, getFullOptionName, getOptionNameFromFullName, tryGetTabPath, getTextWithoutSpaces, isEqualToDataFieldOrNameOrTitleOrCaption, isFullPathContainsTabs, getItemPath, convertToLayoutManagerOptions } from \"./ui.form.utils\";\nimport { convertToLabelMarkOptions } from \"./ui.form.layout_manager.utils\";\nimport { setLabelWidthByMaxLabelWidth } from \"./components/label\";\nimport \"../validation_summary\";\nimport \"../validation_group\";\nimport { FORM_CLASS, FIELD_ITEM_CLASS, FORM_GROUP_CLASS, FORM_GROUP_CONTENT_CLASS, FIELD_ITEM_CONTENT_HAS_GROUP_CLASS, FIELD_ITEM_CONTENT_HAS_TABS_CLASS, FORM_GROUP_WITH_CAPTION_CLASS, FORM_GROUP_CAPTION_CLASS, FIELD_ITEM_TAB_CLASS, FORM_FIELD_ITEM_COL_CLASS, GROUP_COL_COUNT_CLASS, GROUP_COL_COUNT_ATTR, FIELD_ITEM_CONTENT_CLASS, FORM_VALIDATION_SUMMARY, ROOT_SIMPLE_ITEM_CLASS, FORM_UNDERLINED_CLASS } from \"./constants\";\nimport { TOOLBAR_CLASS } from \"../toolbar/constants\";\nvar FOCUSED_STATE_CLASS = \"dx-state-focused\";\nvar ITEM_OPTIONS_FOR_VALIDATION_UPDATING = [\"items\", \"isRequired\", \"validationRules\", \"visible\"];\nvar Form = Widget.inherit({\n  _init: function () {\n    this.callBase();\n    this._cachedColCountOptions = [];\n    this._itemsRunTimeInfo = new FormItemsRunTimeInfo();\n    this._groupsColCount = [];\n\n    this._attachSyncSubscriptions();\n  },\n  _getDefaultOptions: function () {\n    return extend(this.callBase(), {\n      formID: \"dx-\" + new Guid(),\n      formData: {},\n      colCount: 1,\n      screenByWidth: defaultScreenFactorFunc,\n      colCountByScreen: void 0,\n      labelLocation: \"left\",\n      readOnly: false,\n      onFieldDataChanged: null,\n      customizeItem: null,\n      onEditorEnterKey: null,\n      minColWidth: 200,\n      alignItemLabels: true,\n      alignItemLabelsInAllGroups: true,\n      alignRootItemLabels: true,\n      showColonAfterLabel: true,\n      showRequiredMark: true,\n      showOptionalMark: false,\n      requiredMark: \"*\",\n      optionalMark: messageLocalization.format(\"dxForm-optionalMark\"),\n      requiredMessage: messageLocalization.getFormatter(\"dxForm-requiredMessage\"),\n      showValidationSummary: false,\n      items: void 0,\n      scrollingEnabled: false,\n      validationGroup: void 0,\n      stylingMode: config().editorStylingMode,\n      labelMode: \"outside\"\n    });\n  },\n  _defaultOptionsRules: function () {\n    return this.callBase().concat([{\n      device: function () {\n        return isMaterial();\n      },\n      options: {\n        showColonAfterLabel: false,\n        labelLocation: \"top\"\n      }\n    }]);\n  },\n  _setOptionsByReference: function () {\n    this.callBase();\n    extend(this._optionsByReference, {\n      formData: true,\n      validationGroup: true\n    });\n  },\n  _getGroupColCount: function ($element) {\n    return parseInt($element.attr(GROUP_COL_COUNT_ATTR));\n  },\n  _applyLabelsWidthByCol: function ($container, index) {\n    var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\n    var labelMarkOptions = arguments.length > 3 ? arguments[3] : void 0;\n    var fieldItemClass = options.inOneColumn ? FIELD_ITEM_CLASS : FORM_FIELD_ITEM_COL_CLASS + index;\n    var cssExcludeTabbedSelector = options.excludeTabbed ? \":not(.\".concat(FIELD_ITEM_TAB_CLASS, \")\") : \"\";\n    setLabelWidthByMaxLabelWidth($container, \".\".concat(fieldItemClass).concat(cssExcludeTabbedSelector), labelMarkOptions);\n    return;\n  },\n  _applyLabelsWidth: function ($container, excludeTabbed, inOneColumn, colCount, labelMarkOptions) {\n    colCount = inOneColumn ? 1 : colCount || this._getGroupColCount($container);\n    var applyLabelsOptions = {\n      excludeTabbed: excludeTabbed,\n      inOneColumn: inOneColumn\n    };\n    var i;\n\n    for (i = 0; i < colCount; i++) {\n      this._applyLabelsWidthByCol($container, i, applyLabelsOptions, labelMarkOptions);\n    }\n  },\n  _getGroupElementsInColumn: function ($container, columnIndex, colCount) {\n    var cssColCountSelector = isDefined(colCount) ? \".\" + GROUP_COL_COUNT_CLASS + colCount : \"\";\n    var groupSelector = \".\" + FORM_FIELD_ITEM_COL_CLASS + columnIndex + \" > .\" + FIELD_ITEM_CONTENT_CLASS + \" > .\" + FORM_GROUP_CLASS + cssColCountSelector;\n    return $container.find(groupSelector);\n  },\n  _applyLabelsWidthWithGroups: function ($container, colCount, excludeTabbed, labelMarkOptions) {\n    if (true === this.option(\"alignRootItemLabels\")) {\n      var $rootSimpleItems = $container.find(\".\".concat(ROOT_SIMPLE_ITEM_CLASS));\n\n      for (var colIndex = 0; colIndex < colCount; colIndex++) {\n        this._applyLabelsWidthByCol($rootSimpleItems, colIndex, excludeTabbed, labelMarkOptions);\n      }\n    }\n\n    var alignItemLabelsInAllGroups = this.option(\"alignItemLabelsInAllGroups\");\n\n    if (alignItemLabelsInAllGroups) {\n      this._applyLabelsWidthWithNestedGroups($container, colCount, excludeTabbed, labelMarkOptions);\n    } else {\n      var $groups = this.$element().find(\".\" + FORM_GROUP_CLASS);\n      var i;\n\n      for (i = 0; i < $groups.length; i++) {\n        this._applyLabelsWidth($groups.eq(i), excludeTabbed, void 0, void 0, labelMarkOptions);\n      }\n    }\n  },\n  _applyLabelsWidthWithNestedGroups: function ($container, colCount, excludeTabbed, labelMarkOptions) {\n    var applyLabelsOptions = {\n      excludeTabbed: excludeTabbed\n    };\n    var colIndex;\n    var groupsColIndex;\n    var groupColIndex;\n    var $groupsByCol;\n\n    for (colIndex = 0; colIndex < colCount; colIndex++) {\n      $groupsByCol = this._getGroupElementsInColumn($container, colIndex);\n\n      this._applyLabelsWidthByCol($groupsByCol, 0, applyLabelsOptions, labelMarkOptions);\n\n      for (groupsColIndex = 0; groupsColIndex < this._groupsColCount.length; groupsColIndex++) {\n        $groupsByCol = this._getGroupElementsInColumn($container, colIndex, this._groupsColCount[groupsColIndex]);\n\n        var groupColCount = this._getGroupColCount($groupsByCol);\n\n        for (groupColIndex = 1; groupColIndex < groupColCount; groupColIndex++) {\n          this._applyLabelsWidthByCol($groupsByCol, groupColIndex, applyLabelsOptions, labelMarkOptions);\n        }\n      }\n    }\n  },\n  _labelLocation: function () {\n    return this.option(\"labelLocation\");\n  },\n  _alignLabelsInColumn: function (_ref) {\n    var {\n      layoutManager: layoutManager,\n      inOneColumn: inOneColumn,\n      $container: $container,\n      excludeTabbed: excludeTabbed,\n      items: items\n    } = _ref;\n\n    if (!hasWindow() || \"top\" === this._labelLocation()) {\n      return;\n    }\n\n    var labelMarkOptions = convertToLabelMarkOptions(layoutManager._getMarkOptions());\n\n    if (inOneColumn) {\n      this._applyLabelsWidth($container, excludeTabbed, true, void 0, labelMarkOptions);\n    } else if (this._checkGrouping(items)) {\n      this._applyLabelsWidthWithGroups($container, layoutManager._getColCount(), excludeTabbed, labelMarkOptions);\n    } else {\n      this._applyLabelsWidth($container, excludeTabbed, false, layoutManager._getColCount(), labelMarkOptions);\n    }\n  },\n  _prepareFormData: function () {\n    if (!isDefined(this.option(\"formData\"))) {\n      this.option(\"formData\", {});\n    }\n  },\n  _setStylingModeClass: function () {\n    if (\"underlined\" === this.option(\"stylingMode\")) {\n      this.$element().addClass(FORM_UNDERLINED_CLASS);\n    }\n  },\n  _initMarkup: function () {\n    ValidationEngine.addGroup(this._getValidationGroup());\n\n    this._clearCachedInstances();\n\n    this._prepareFormData();\n\n    this.$element().addClass(FORM_CLASS);\n\n    this._setStylingModeClass();\n\n    this.callBase();\n    this.setAria(\"role\", \"form\", this.$element());\n\n    if (this.option(\"scrollingEnabled\")) {\n      this._renderScrollable();\n    }\n\n    this._renderLayout();\n\n    this._renderValidationSummary();\n\n    this._lastMarkupScreenFactor = this._targetScreenFactor || this._getCurrentScreenFactor();\n  },\n  _getCurrentScreenFactor: function () {\n    return hasWindow() ? getCurrentScreenFactor(this.option(\"screenByWidth\")) : \"lg\";\n  },\n  _clearCachedInstances: function () {\n    this._itemsRunTimeInfo.clear();\n\n    this._cachedLayoutManagers = [];\n  },\n  _alignLabels: function (layoutManager, inOneColumn) {\n    this._alignLabelsInColumn({\n      $container: this.$element(),\n      layoutManager: layoutManager,\n      excludeTabbed: true,\n      items: this.option(\"items\"),\n      inOneColumn: inOneColumn\n    });\n\n    triggerResizeEvent(this.$element().find(\".\".concat(TOOLBAR_CLASS)));\n  },\n  _clean: function () {\n    this._clearValidationSummary();\n\n    this.callBase();\n    this._groupsColCount = [];\n    this._cachedColCountOptions = [];\n    this._lastMarkupScreenFactor = void 0;\n  },\n  _renderScrollable: function () {\n    var useNativeScrolling = this.option(\"useNativeScrolling\");\n    this._scrollable = new Scrollable(this.$element(), {\n      useNative: !!useNativeScrolling,\n      useSimulatedScrollbar: !useNativeScrolling,\n      useKeyboard: false,\n      direction: \"both\",\n      bounceEnabled: false\n    });\n  },\n  _getContent: function () {\n    return this.option(\"scrollingEnabled\") ? $(this._scrollable.content()) : this.$element();\n  },\n  _clearValidationSummary: function () {\n    var _this$_$validationSum;\n\n    null === (_this$_$validationSum = this._$validationSummary) || void 0 === _this$_$validationSum ? void 0 : _this$_$validationSum.remove();\n    this._$validationSummary = void 0;\n    this._validationSummary = void 0;\n  },\n  _renderValidationSummary: function () {\n    this._clearValidationSummary();\n\n    if (this.option(\"showValidationSummary\")) {\n      this._$validationSummary = $(\"<div>\").addClass(FORM_VALIDATION_SUMMARY).appendTo(this._getContent());\n      this._validationSummary = this._$validationSummary.dxValidationSummary({\n        validationGroup: this._getValidationGroup()\n      }).dxValidationSummary(\"instance\");\n    }\n  },\n\n  _prepareItems(items, parentIsTabbedItem, currentPath, isTabs) {\n    if (items) {\n      var result = [];\n\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n        var path = concatPaths(currentPath, createItemPathByIndex(i, isTabs));\n        var itemRunTimeInfo = {\n          item: item,\n          itemIndex: i,\n          path: path\n        };\n\n        var guid = this._itemsRunTimeInfo.add(itemRunTimeInfo);\n\n        if (isString(item)) {\n          item = {\n            dataField: item\n          };\n        }\n\n        if (isObject(item)) {\n          var preparedItem = _extends({}, item);\n\n          itemRunTimeInfo.preparedItem = preparedItem;\n          preparedItem.guid = guid;\n\n          this._tryPrepareGroupItem(preparedItem);\n\n          this._tryPrepareTabbedItem(preparedItem, path);\n\n          this._tryPrepareItemTemplate(preparedItem);\n\n          if (parentIsTabbedItem) {\n            preparedItem.cssItemClass = FIELD_ITEM_TAB_CLASS;\n          }\n\n          if (preparedItem.items) {\n            preparedItem.items = this._prepareItems(preparedItem.items, parentIsTabbedItem, path);\n          }\n\n          result.push(preparedItem);\n        } else {\n          result.push(item);\n        }\n      }\n\n      return result;\n    }\n  },\n\n  _tryPrepareGroupItem: function (item) {\n    if (\"group\" === item.itemType) {\n      item.alignItemLabels = ensureDefined(item.alignItemLabels, true);\n\n      item._prepareGroupItemTemplate = itemTemplate => {\n        if (item.template) {\n          item.groupContentTemplate = this._getTemplate(itemTemplate);\n        }\n\n        item.template = this._itemGroupTemplate.bind(this, item);\n      };\n\n      item._prepareGroupItemTemplate(item.template);\n    }\n  },\n  _tryPrepareTabbedItem: function (item, path) {\n    if (\"tabbed\" === item.itemType) {\n      item.template = this._itemTabbedTemplate.bind(this, item);\n      item.tabs = this._prepareItems(item.tabs, true, path, true);\n    }\n  },\n  _tryPrepareItemTemplate: function (item) {\n    if (item.template) {\n      item.template = this._getTemplate(item.template);\n    }\n  },\n  _checkGrouping: function (items) {\n    if (items) {\n      for (var i = 0; i < items.length; i++) {\n        var item = items[i];\n\n        if (\"group\" === item.itemType) {\n          return true;\n        }\n      }\n    }\n  },\n  _renderLayout: function () {\n    var that = this;\n    var items = that.option(\"items\");\n\n    var $content = that._getContent();\n\n    items = that._prepareItems(items);\n    that._rootLayoutManager = that._renderLayoutManager($content, this._createLayoutManagerOptions(items, {\n      isRoot: true,\n      colCount: that.option(\"colCount\"),\n      alignItemLabels: that.option(\"alignItemLabels\"),\n      screenByWidth: this.option(\"screenByWidth\"),\n      colCountByScreen: this.option(\"colCountByScreen\"),\n      onLayoutChanged: function (inOneColumn) {\n        that._alignLabels.bind(that)(that._rootLayoutManager, inOneColumn);\n      },\n      onContentReady: function (e) {\n        that._alignLabels(e.component, e.component.isSingleColumnMode());\n      }\n    }));\n  },\n  _tryGetItemsForTemplate: function (item) {\n    return item.items || [];\n  },\n  _itemTabbedTemplate: function (item, e, $container) {\n    var $tabPanel = $(\"<div>\").appendTo($container);\n    var tabPanelOptions = extend({}, item.tabPanelOptions, {\n      dataSource: item.tabs,\n      onItemRendered: args => triggerShownEvent(args.itemElement),\n      itemTemplate: (itemData, e, container) => {\n        var $container = $(container);\n        var alignItemLabels = ensureDefined(itemData.alignItemLabels, true);\n\n        var layoutManager = this._renderLayoutManager($container, this._createLayoutManagerOptions(this._tryGetItemsForTemplate(itemData), {\n          colCount: itemData.colCount,\n          alignItemLabels: alignItemLabels,\n          screenByWidth: this.option(\"screenByWidth\"),\n          colCountByScreen: itemData.colCountByScreen,\n          cssItemClass: itemData.cssItemClass,\n          onLayoutChanged: inOneColumn => {\n            this._alignLabelsInColumn({\n              $container: $container,\n              layoutManager: layoutManager,\n              items: itemData.items,\n              inOneColumn: inOneColumn\n            });\n          }\n        }));\n\n        if (this._itemsRunTimeInfo) {\n          this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(itemData.guid, {\n            layoutManager: layoutManager\n          });\n        }\n\n        if (alignItemLabels) {\n          this._alignLabelsInColumn({\n            $container: $container,\n            layoutManager: layoutManager,\n            items: itemData.items,\n            inOneColumn: layoutManager.isSingleColumnMode()\n          });\n        }\n      }\n    });\n\n    var tryUpdateTabPanelInstance = (items, instance) => {\n      if (Array.isArray(items)) {\n        items.forEach(item => this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(item.guid, {\n          widgetInstance: instance\n        }));\n      }\n    };\n\n    var tabPanel = this._createComponent($tabPanel, TabPanel, tabPanelOptions);\n\n    $($container).parent().addClass(FIELD_ITEM_CONTENT_HAS_TABS_CLASS);\n    tabPanel.on(\"optionChanged\", e => {\n      if (\"dataSource\" === e.fullName) {\n        tryUpdateTabPanelInstance(e.value, e.component);\n      }\n    });\n    tryUpdateTabPanelInstance([{\n      guid: item.guid\n    }, ...item.tabs], tabPanel);\n  },\n  _itemGroupTemplate: function (item, e, $container) {\n    var $group = $(\"<div>\").toggleClass(FORM_GROUP_WITH_CAPTION_CLASS, isDefined(item.caption) && item.caption.length).addClass(FORM_GROUP_CLASS).appendTo($container);\n    $($container).parent().addClass(FIELD_ITEM_CONTENT_HAS_GROUP_CLASS);\n    var colCount;\n    var layoutManager;\n\n    if (item.caption) {\n      $(\"<span>\").addClass(FORM_GROUP_CAPTION_CLASS).text(item.caption).appendTo($group);\n    }\n\n    var $groupContent = $(\"<div>\").addClass(FORM_GROUP_CONTENT_CLASS).appendTo($group);\n\n    if (item.groupContentTemplate) {\n      item._renderGroupContentTemplate = () => {\n        $groupContent.empty();\n        var data = {\n          formData: this.option(\"formData\"),\n          component: this\n        };\n        item.groupContentTemplate.render({\n          model: data,\n          container: getPublicElement($groupContent)\n        });\n      };\n\n      item._renderGroupContentTemplate();\n    } else {\n      layoutManager = this._renderLayoutManager($groupContent, this._createLayoutManagerOptions(this._tryGetItemsForTemplate(item), {\n        colCount: item.colCount,\n        colCountByScreen: item.colCountByScreen,\n        alignItemLabels: item.alignItemLabels,\n        cssItemClass: item.cssItemClass\n      }));\n      this._itemsRunTimeInfo && this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(item.guid, {\n        layoutManager: layoutManager\n      });\n      colCount = layoutManager._getColCount();\n\n      if (-1 === inArray(colCount, this._groupsColCount)) {\n        this._groupsColCount.push(colCount);\n      }\n\n      $group.addClass(GROUP_COL_COUNT_CLASS + colCount);\n      $group.attr(GROUP_COL_COUNT_ATTR, colCount);\n    }\n  },\n  _createLayoutManagerOptions: function (items, extendedLayoutManagerOptions) {\n    return convertToLayoutManagerOptions({\n      form: this,\n      formOptions: this.option(),\n      $formElement: this.$element(),\n      items: items,\n      validationGroup: this._getValidationGroup(),\n      extendedLayoutManagerOptions: extendedLayoutManagerOptions,\n      onFieldDataChanged: args => {\n        if (!this._isDataUpdating) {\n          this._triggerOnFieldDataChanged(args);\n        }\n      },\n      onContentReady: args => {\n        this._itemsRunTimeInfo.addItemsOrExtendFrom(args.component._itemsRunTimeInfo);\n\n        extendedLayoutManagerOptions.onContentReady && extendedLayoutManagerOptions.onContentReady(args);\n      },\n      onDisposing: _ref2 => {\n        var {\n          component: component\n        } = _ref2;\n        var nestedItemsRunTimeInfo = component.getItemsRunTimeInfo();\n\n        this._itemsRunTimeInfo.removeItemsByItems(nestedItemsRunTimeInfo);\n      }\n    });\n  },\n  _renderLayoutManager: function ($parent, layoutManagerOptions) {\n    var baseColCountByScreen = {\n      lg: layoutManagerOptions.colCount,\n      md: layoutManagerOptions.colCount,\n      sm: layoutManagerOptions.colCount,\n      xs: 1\n    };\n\n    this._cachedColCountOptions.push({\n      colCountByScreen: extend(baseColCountByScreen, layoutManagerOptions.colCountByScreen)\n    });\n\n    var $element = $(\"<div>\");\n    $element.appendTo($parent);\n\n    var instance = this._createComponent($element, \"dxLayoutManager\", layoutManagerOptions);\n\n    instance.on(\"autoColCountChanged\", () => {\n      this._clearAutoColCountChangedTimeout();\n\n      this.autoColCountChangedTimeoutId = setTimeout(() => !this._disposed && this._refresh(), 0);\n    });\n\n    this._cachedLayoutManagers.push(instance);\n\n    return instance;\n  },\n  _getValidationGroup: function () {\n    return this.option(\"validationGroup\") || this;\n  },\n  _createComponent: function ($element, type, config) {\n    config = config || {};\n\n    this._extendConfig(config, {\n      readOnly: this.option(\"readOnly\")\n    });\n\n    return this.callBase($element, type, config);\n  },\n  _attachSyncSubscriptions: function () {\n    var that = this;\n    that.on(\"optionChanged\", function (args) {\n      var optionFullName = args.fullName;\n\n      if (\"formData\" === optionFullName) {\n        if (!isDefined(args.value)) {\n          that._options.silent(\"formData\", args.value = {});\n        }\n\n        that._triggerOnFieldDataChangedByDataSet(args.value);\n      }\n\n      if (that._cachedLayoutManagers.length) {\n        each(that._cachedLayoutManagers, function (index, layoutManager) {\n          if (\"formData\" === optionFullName) {\n            that._isDataUpdating = true;\n            layoutManager.option(\"layoutData\", args.value);\n            that._isDataUpdating = false;\n          }\n\n          if (\"readOnly\" === args.name || \"disabled\" === args.name) {\n            layoutManager.option(optionFullName, args.value);\n          }\n        });\n      }\n    });\n  },\n  _optionChanged: function (args) {\n    var splitFullName = args.fullName.split(\".\");\n\n    if (splitFullName.length > 1 && -1 !== splitFullName[0].search(\"items\") && this._itemsOptionChangedHandler(args)) {\n      return;\n    }\n\n    if (splitFullName.length > 1 && -1 !== splitFullName[0].search(\"formData\") && this._formDataOptionChangedHandler(args)) {\n      return;\n    }\n\n    this._defaultOptionChangedHandler(args);\n  },\n  _defaultOptionChangedHandler: function (args) {\n    switch (args.name) {\n      case \"formData\":\n        if (!this.option(\"items\")) {\n          this._invalidate();\n        } else if (isEmptyObject(args.value)) {\n          this._resetValues();\n        }\n\n        break;\n\n      case \"onFieldDataChanged\":\n        break;\n\n      case \"items\":\n      case \"colCount\":\n      case \"onEditorEnterKey\":\n      case \"labelLocation\":\n      case \"labelMode\":\n      case \"alignItemLabels\":\n      case \"showColonAfterLabel\":\n      case \"customizeItem\":\n      case \"alignItemLabelsInAllGroups\":\n      case \"showRequiredMark\":\n      case \"showOptionalMark\":\n      case \"requiredMark\":\n      case \"optionalMark\":\n      case \"requiredMessage\":\n      case \"scrollingEnabled\":\n      case \"formID\":\n      case \"colCountByScreen\":\n      case \"screenByWidth\":\n      case \"stylingMode\":\n        this._invalidate();\n\n        break;\n\n      case \"showValidationSummary\":\n        this._renderValidationSummary();\n\n        break;\n\n      case \"minColWidth\":\n        if (\"auto\" === this.option(\"colCount\")) {\n          this._invalidate();\n        }\n\n        break;\n\n      case \"alignRootItemLabels\":\n      case \"readOnly\":\n        break;\n\n      case \"width\":\n        this.callBase(args);\n\n        this._rootLayoutManager.option(args.name, args.value);\n\n        this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode());\n\n        break;\n\n      case \"visible\":\n        this.callBase(args);\n\n        if (args.value) {\n          triggerShownEvent(this.$element());\n        }\n\n        break;\n\n      case \"validationGroup\":\n        ValidationEngine.removeGroup(args.previousValue || this);\n\n        this._invalidate();\n\n        break;\n\n      default:\n        this.callBase(args);\n    }\n  },\n  _itemsOptionChangedHandler: function (args) {\n    var nameParts = args.fullName.split(\".\");\n    var value = args.value;\n\n    var itemPath = this._getItemPath(nameParts);\n\n    var item = this.option(itemPath);\n    var optionNameWithoutPath = args.fullName.replace(itemPath + \".\", \"\");\n    var simpleOptionName = optionNameWithoutPath.split(\".\")[0].replace(/\\[\\d+]/, \"\");\n\n    var itemAction = this._tryCreateItemOptionAction(simpleOptionName, item, item[simpleOptionName], args.previousValue, itemPath);\n\n    var result = this._tryExecuteItemOptionAction(itemAction) || this._tryChangeLayoutManagerItemOption(args.fullName, value);\n\n    if (!result && item) {\n      this._changeItemOption(item, optionNameWithoutPath, value);\n\n      var items = this._generateItemsFromData(this.option(\"items\"));\n\n      this.option(\"items\", items);\n      result = true;\n    }\n\n    return result;\n  },\n  _formDataOptionChangedHandler: function (args) {\n    var nameParts = args.fullName.split(\".\");\n    var value = args.value;\n    var dataField = nameParts.slice(1).join(\".\");\n    var editor = this.getEditor(dataField);\n\n    if (editor) {\n      editor.option(\"value\", value);\n    } else {\n      this._triggerOnFieldDataChanged({\n        dataField: dataField,\n        value: value\n      });\n    }\n\n    return true;\n  },\n  _tryCreateItemOptionAction: function (optionName, item, value, previousValue, itemPath) {\n    if (\"tabs\" === optionName) {\n      this._itemsRunTimeInfo.removeItemsByPathStartWith(\"\".concat(itemPath, \".tabs\"));\n\n      value = this._prepareItems(value, true, itemPath, true);\n    }\n\n    return tryCreateItemOptionAction(optionName, {\n      item: item,\n      value: value,\n      previousValue: previousValue,\n      itemsRunTimeInfo: this._itemsRunTimeInfo\n    });\n  },\n  _tryExecuteItemOptionAction: function (action) {\n    return action && action.tryExecute();\n  },\n  _updateValidationGroupAndSummaryIfNeeded: function (fullName) {\n    var optionName = getOptionNameFromFullName(fullName);\n\n    if (ITEM_OPTIONS_FOR_VALIDATION_UPDATING.indexOf(optionName) > -1) {\n      ValidationEngine.addGroup(this._getValidationGroup());\n\n      if (this.option(\"showValidationSummary\")) {\n        this._validationSummary && this._validationSummary._initGroupRegistration();\n      }\n    }\n  },\n\n  _setLayoutManagerItemOption(layoutManager, optionName, value, path) {\n    if (this._updateLockCount > 0) {\n      !layoutManager._updateLockCount && layoutManager.beginUpdate();\n\n      var key = this._itemsRunTimeInfo.findKeyByPath(path);\n\n      this.postponedOperations.add(key, () => {\n        !layoutManager._disposed && layoutManager.endUpdate();\n        return new Deferred().resolve();\n      });\n    }\n\n    var contentReadyHandler = e => {\n      e.component.off(\"contentReady\", contentReadyHandler);\n\n      if (isFullPathContainsTabs(path)) {\n        var tabPath = tryGetTabPath(path);\n\n        var tabLayoutManager = this._itemsRunTimeInfo.findGroupOrTabLayoutManagerByPath(tabPath);\n\n        if (tabLayoutManager) {\n          this._alignLabelsInColumn({\n            items: tabLayoutManager.option(\"items\"),\n            layoutManager: tabLayoutManager,\n            $container: tabLayoutManager.$element(),\n            inOneColumn: tabLayoutManager.isSingleColumnMode()\n          });\n        }\n      } else {\n        this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode());\n      }\n    };\n\n    layoutManager.on(\"contentReady\", contentReadyHandler);\n    layoutManager.option(optionName, value);\n\n    this._updateValidationGroupAndSummaryIfNeeded(optionName);\n  },\n\n  _tryChangeLayoutManagerItemOption(fullName, value) {\n    var nameParts = fullName.split(\".\");\n    var optionName = getOptionNameFromFullName(fullName);\n\n    if (\"items\" === optionName && nameParts.length > 1) {\n      var itemPath = this._getItemPath(nameParts);\n\n      var layoutManager = this._itemsRunTimeInfo.findGroupOrTabLayoutManagerByPath(itemPath);\n\n      if (layoutManager) {\n        this._itemsRunTimeInfo.removeItemsByItems(layoutManager.getItemsRunTimeInfo());\n\n        var items = this._prepareItems(value, false, itemPath);\n\n        this._setLayoutManagerItemOption(layoutManager, optionName, items, itemPath);\n\n        return true;\n      }\n    } else if (nameParts.length > 2) {\n      var endPartIndex = nameParts.length - 2;\n\n      var _itemPath = this._getItemPath(nameParts.slice(0, endPartIndex));\n\n      var _layoutManager = this._itemsRunTimeInfo.findGroupOrTabLayoutManagerByPath(_itemPath);\n\n      if (_layoutManager) {\n        var fullOptionName = getFullOptionName(nameParts[endPartIndex], optionName);\n\n        if (\"editorType\" === optionName) {\n          if (_layoutManager.option(fullOptionName) !== value) {\n            return false;\n          }\n        }\n\n        if (\"visible\" === optionName) {\n          var formItems = this.option(getFullOptionName(_itemPath, \"items\"));\n\n          if (formItems && formItems.length) {\n            var layoutManagerItems = _layoutManager.option(\"items\");\n\n            formItems.forEach((item, index) => {\n              var layoutItem = layoutManagerItems[index];\n              layoutItem.visibleIndex = item.visibleIndex;\n            });\n          }\n        }\n\n        this._setLayoutManagerItemOption(_layoutManager, fullOptionName, value, _itemPath);\n\n        return true;\n      }\n    }\n\n    return false;\n  },\n\n  _tryChangeLayoutManagerItemOptions(itemPath, options) {\n    var result;\n    this.beginUpdate();\n    each(options, (optionName, optionValue) => {\n      result = this._tryChangeLayoutManagerItemOption(getFullOptionName(itemPath, optionName), optionValue);\n\n      if (!result) {\n        return false;\n      }\n    });\n    this.endUpdate();\n    return result;\n  },\n\n  _getItemPath: function (nameParts) {\n    var itemPath = nameParts[0];\n    var i;\n\n    for (i = 1; i < nameParts.length; i++) {\n      if (-1 !== nameParts[i].search(/items\\[\\d+]|tabs\\[\\d+]/)) {\n        itemPath += \".\" + nameParts[i];\n      } else {\n        break;\n      }\n    }\n\n    return itemPath;\n  },\n  _triggerOnFieldDataChanged: function (args) {\n    this._createActionByOption(\"onFieldDataChanged\")(args);\n  },\n  _triggerOnFieldDataChangedByDataSet: function (data) {\n    var that = this;\n\n    if (data && isObject(data)) {\n      each(data, function (dataField, value) {\n        that._triggerOnFieldDataChanged({\n          dataField: dataField,\n          value: value\n        });\n      });\n    }\n  },\n  _updateFieldValue: function (dataField, value) {\n    if (isDefined(this.option(\"formData\"))) {\n      var editor = this.getEditor(dataField);\n      this.option(\"formData.\" + dataField, value);\n\n      if (editor) {\n        var editorValue = editor.option(\"value\");\n\n        if (editorValue !== value) {\n          editor.option(\"value\", value);\n        }\n      }\n    }\n  },\n  _generateItemsFromData: function (items) {\n    var formData = this.option(\"formData\");\n    var result = [];\n\n    if (!items && isDefined(formData)) {\n      each(formData, function (dataField) {\n        result.push({\n          dataField: dataField\n        });\n      });\n    }\n\n    if (items) {\n      each(items, function (index, item) {\n        if (isObject(item)) {\n          result.push(item);\n        } else {\n          result.push({\n            dataField: item\n          });\n        }\n      });\n    }\n\n    return result;\n  },\n  _getItemByField: function (field, items) {\n    var that = this;\n    var fieldParts = isObject(field) ? field : that._getFieldParts(field);\n    var fieldName = fieldParts.fieldName;\n    var fieldPath = fieldParts.fieldPath;\n    var resultItem;\n\n    if (items.length) {\n      each(items, function (index, item) {\n        var itemType = item.itemType;\n\n        if (fieldPath.length) {\n          var path = fieldPath.slice();\n          item = that._getItemByFieldPath(path, fieldName, item);\n        } else if (\"group\" === itemType && !(item.caption || item.name) || \"tabbed\" === itemType && !item.name) {\n          var subItemsField = that._getSubItemField(itemType);\n\n          item.items = that._generateItemsFromData(item.items);\n          item = that._getItemByField({\n            fieldName: fieldName,\n            fieldPath: fieldPath\n          }, item[subItemsField]);\n        }\n\n        if (isEqualToDataFieldOrNameOrTitleOrCaption(item, fieldName)) {\n          resultItem = item;\n          return false;\n        }\n      });\n    }\n\n    return resultItem;\n  },\n  _getFieldParts: function (field) {\n    var fieldName = field;\n    var separatorIndex = fieldName.indexOf(\".\");\n    var resultPath = [];\n\n    while (-1 !== separatorIndex) {\n      resultPath.push(fieldName.substr(0, separatorIndex));\n      fieldName = fieldName.substr(separatorIndex + 1);\n      separatorIndex = fieldName.indexOf(\".\");\n    }\n\n    return {\n      fieldName: fieldName,\n      fieldPath: resultPath.reverse()\n    };\n  },\n  _getItemByFieldPath: function (path, fieldName, item) {\n    var itemType = item.itemType;\n\n    var subItemsField = this._getSubItemField(itemType);\n\n    var isItemWithSubItems = \"group\" === itemType || \"tabbed\" === itemType || item.title;\n    var result;\n\n    do {\n      if (isItemWithSubItems) {\n        var name = item.name || item.caption || item.title;\n        var isGroupWithName = isDefined(name);\n        var nameWithoutSpaces = getTextWithoutSpaces(name);\n        var pathNode = void 0;\n        item[subItemsField] = this._generateItemsFromData(item[subItemsField]);\n\n        if (isGroupWithName) {\n          pathNode = path.pop();\n        }\n\n        if (!path.length) {\n          result = this._getItemByField(fieldName, item[subItemsField]);\n\n          if (result) {\n            break;\n          }\n        }\n\n        if (!isGroupWithName || isGroupWithName && nameWithoutSpaces === pathNode) {\n          if (path.length) {\n            result = this._searchItemInEverySubItem(path, fieldName, item[subItemsField]);\n          }\n        }\n      } else {\n        break;\n      }\n    } while (path.length && !isDefined(result));\n\n    return result;\n  },\n  _getSubItemField: function (itemType) {\n    return \"tabbed\" === itemType ? \"tabs\" : \"items\";\n  },\n  _searchItemInEverySubItem: function (path, fieldName, items) {\n    var that = this;\n    var result;\n    each(items, function (index, groupItem) {\n      result = that._getItemByFieldPath(path.slice(), fieldName, groupItem);\n\n      if (result) {\n        return false;\n      }\n    });\n\n    if (!result) {\n      result = false;\n    }\n\n    return result;\n  },\n  _changeItemOption: function (item, option, value) {\n    if (isObject(item)) {\n      item[option] = value;\n    }\n  },\n  _dimensionChanged: function () {\n    var currentScreenFactor = this._getCurrentScreenFactor();\n\n    if (this._lastMarkupScreenFactor !== currentScreenFactor) {\n      if (this._isColCountChanged(this._lastMarkupScreenFactor, currentScreenFactor)) {\n        this._targetScreenFactor = currentScreenFactor;\n\n        this._refresh();\n\n        this._targetScreenFactor = void 0;\n      }\n\n      this._lastMarkupScreenFactor = currentScreenFactor;\n    }\n  },\n  _isColCountChanged: function (oldScreenSize, newScreenSize) {\n    var isChanged = false;\n    each(this._cachedColCountOptions, function (index, item) {\n      if (item.colCountByScreen[oldScreenSize] !== item.colCountByScreen[newScreenSize]) {\n        isChanged = true;\n        return false;\n      }\n    });\n    return isChanged;\n  },\n  _refresh: function () {\n    var editorSelector = \".\" + FOCUSED_STATE_CLASS + \" input, .\" + FOCUSED_STATE_CLASS + \" textarea\";\n    eventsEngine.trigger(this.$element().find(editorSelector), \"change\");\n    this.callBase();\n  },\n  _resetValues: function () {\n    this._itemsRunTimeInfo.each(function (_, itemRunTimeInfo) {\n      if (isDefined(itemRunTimeInfo.widgetInstance) && Editor.isEditor(itemRunTimeInfo.widgetInstance)) {\n        itemRunTimeInfo.widgetInstance.reset();\n        itemRunTimeInfo.widgetInstance.option(\"isValid\", true);\n      }\n    });\n\n    ValidationEngine.resetGroup(this._getValidationGroup());\n  },\n  _updateData: function (data, value, isComplexData) {\n    var that = this;\n\n    var _data = isComplexData ? value : data;\n\n    if (isObject(_data)) {\n      each(_data, function (dataField, fieldValue) {\n        that._updateData(isComplexData ? data + \".\" + dataField : dataField, fieldValue, isObject(fieldValue));\n      });\n    } else if (isString(data)) {\n      that._updateFieldValue(data, value);\n    }\n  },\n  registerKeyHandler: function (key, handler) {\n    this.callBase(key, handler);\n\n    this._itemsRunTimeInfo.each(function (_, itemRunTimeInfo) {\n      if (isDefined(itemRunTimeInfo.widgetInstance)) {\n        itemRunTimeInfo.widgetInstance.registerKeyHandler(key, handler);\n      }\n    });\n  },\n  _focusTarget: function () {\n    return this.$element().find(\".\" + FIELD_ITEM_CONTENT_CLASS + \" [tabindex]\").first();\n  },\n  _visibilityChanged: function () {},\n  _clearAutoColCountChangedTimeout: function () {\n    if (this.autoColCountChangedTimeoutId) {\n      clearTimeout(this.autoColCountChangedTimeoutId);\n      this.autoColCountChangedTimeoutId = void 0;\n    }\n  },\n  _dispose: function () {\n    this._clearAutoColCountChangedTimeout();\n\n    ValidationEngine.removeGroup(this._getValidationGroup());\n    this.callBase();\n  },\n  resetValues: function () {\n    this._resetValues();\n  },\n  updateData: function (data, value) {\n    this._updateData(data, value);\n  },\n  getEditor: function (dataField) {\n    return this._itemsRunTimeInfo.findWidgetInstanceByDataField(dataField) || this._itemsRunTimeInfo.findWidgetInstanceByName(dataField);\n  },\n  getButton: function (name) {\n    return this._itemsRunTimeInfo.findWidgetInstanceByName(name);\n  },\n  updateDimensions: function () {\n    var that = this;\n    var deferred = new Deferred();\n\n    if (that._scrollable) {\n      that._scrollable.update().done(function () {\n        deferred.resolveWith(that);\n      });\n    } else {\n      deferred.resolveWith(that);\n    }\n\n    return deferred.promise();\n  },\n  itemOption: function (id, option, value) {\n    var items = this._generateItemsFromData(this.option(\"items\"));\n\n    var item = this._getItemByField(id, items);\n\n    var path = getItemPath(items, item);\n\n    if (!item) {\n      return;\n    }\n\n    switch (arguments.length) {\n      case 1:\n        return item;\n\n      case 3:\n        var itemAction = this._tryCreateItemOptionAction(option, item, value, item[option], path);\n\n        this._changeItemOption(item, option, value);\n\n        var fullName = getFullOptionName(path, option);\n\n        if (!this._tryExecuteItemOptionAction(itemAction) && !this._tryChangeLayoutManagerItemOption(fullName, value)) {\n          this.option(\"items\", items);\n        }\n\n        break;\n\n      default:\n        if (isObject(option)) {\n          if (!this._tryChangeLayoutManagerItemOptions(path, option)) {\n            var allowUpdateItems;\n            each(option, (optionName, optionValue) => {\n              var itemAction = this._tryCreateItemOptionAction(optionName, item, optionValue, item[optionName], path);\n\n              this._changeItemOption(item, optionName, optionValue);\n\n              if (!allowUpdateItems && !this._tryExecuteItemOptionAction(itemAction)) {\n                allowUpdateItems = true;\n              }\n            });\n            allowUpdateItems && this.option(\"items\", items);\n          }\n        }\n\n    }\n  },\n  validate: function () {\n    return ValidationEngine.validateGroup(this._getValidationGroup());\n  },\n  getItemID: function (name) {\n    return \"dx_\" + this.option(\"formID\") + \"_\" + (name || new Guid());\n  },\n  getTargetScreenFactor: function () {\n    return this._targetScreenFactor;\n  }\n});\nregisterComponent(\"dxForm\", Form);\nexport default Form;","map":{"version":3,"sources":["C:/Personal/Tracker/FrontServerless/node_modules/devextreme/esm/ui/form/ui.form.js"],"names":["_extends","$","eventsEngine","registerComponent","Guid","ensureDefined","config","isDefined","isEmptyObject","isObject","isString","each","inArray","extend","triggerResizeEvent","triggerShownEvent","getPublicElement","messageLocalization","Widget","Editor","defaultScreenFactorFunc","getCurrentScreenFactor","hasWindow","ValidationEngine","default","FormItemsRunTimeInfo","TabPanel","Scrollable","Deferred","isMaterial","tryCreateItemOptionAction","concatPaths","createItemPathByIndex","getFullOptionName","getOptionNameFromFullName","tryGetTabPath","getTextWithoutSpaces","isEqualToDataFieldOrNameOrTitleOrCaption","isFullPathContainsTabs","getItemPath","convertToLayoutManagerOptions","convertToLabelMarkOptions","setLabelWidthByMaxLabelWidth","FORM_CLASS","FIELD_ITEM_CLASS","FORM_GROUP_CLASS","FORM_GROUP_CONTENT_CLASS","FIELD_ITEM_CONTENT_HAS_GROUP_CLASS","FIELD_ITEM_CONTENT_HAS_TABS_CLASS","FORM_GROUP_WITH_CAPTION_CLASS","FORM_GROUP_CAPTION_CLASS","FIELD_ITEM_TAB_CLASS","FORM_FIELD_ITEM_COL_CLASS","GROUP_COL_COUNT_CLASS","GROUP_COL_COUNT_ATTR","FIELD_ITEM_CONTENT_CLASS","FORM_VALIDATION_SUMMARY","ROOT_SIMPLE_ITEM_CLASS","FORM_UNDERLINED_CLASS","TOOLBAR_CLASS","FOCUSED_STATE_CLASS","ITEM_OPTIONS_FOR_VALIDATION_UPDATING","Form","inherit","_init","callBase","_cachedColCountOptions","_itemsRunTimeInfo","_groupsColCount","_attachSyncSubscriptions","_getDefaultOptions","formID","formData","colCount","screenByWidth","colCountByScreen","labelLocation","readOnly","onFieldDataChanged","customizeItem","onEditorEnterKey","minColWidth","alignItemLabels","alignItemLabelsInAllGroups","alignRootItemLabels","showColonAfterLabel","showRequiredMark","showOptionalMark","requiredMark","optionalMark","format","requiredMessage","getFormatter","showValidationSummary","items","scrollingEnabled","validationGroup","stylingMode","editorStylingMode","labelMode","_defaultOptionsRules","concat","device","options","_setOptionsByReference","_optionsByReference","_getGroupColCount","$element","parseInt","attr","_applyLabelsWidthByCol","$container","index","arguments","length","labelMarkOptions","fieldItemClass","inOneColumn","cssExcludeTabbedSelector","excludeTabbed","_applyLabelsWidth","applyLabelsOptions","i","_getGroupElementsInColumn","columnIndex","cssColCountSelector","groupSelector","find","_applyLabelsWidthWithGroups","option","$rootSimpleItems","colIndex","_applyLabelsWidthWithNestedGroups","$groups","eq","groupsColIndex","groupColIndex","$groupsByCol","groupColCount","_labelLocation","_alignLabelsInColumn","_ref","layoutManager","_getMarkOptions","_checkGrouping","_getColCount","_prepareFormData","_setStylingModeClass","addClass","_initMarkup","addGroup","_getValidationGroup","_clearCachedInstances","setAria","_renderScrollable","_renderLayout","_renderValidationSummary","_lastMarkupScreenFactor","_targetScreenFactor","_getCurrentScreenFactor","clear","_cachedLayoutManagers","_alignLabels","_clean","_clearValidationSummary","useNativeScrolling","_scrollable","useNative","useSimulatedScrollbar","useKeyboard","direction","bounceEnabled","_getContent","content","_this$_$validationSum","_$validationSummary","remove","_validationSummary","appendTo","dxValidationSummary","_prepareItems","parentIsTabbedItem","currentPath","isTabs","result","item","path","itemRunTimeInfo","itemIndex","guid","add","dataField","preparedItem","_tryPrepareGroupItem","_tryPrepareTabbedItem","_tryPrepareItemTemplate","cssItemClass","push","itemType","_prepareGroupItemTemplate","itemTemplate","template","groupContentTemplate","_getTemplate","_itemGroupTemplate","bind","_itemTabbedTemplate","tabs","that","$content","_rootLayoutManager","_renderLayoutManager","_createLayoutManagerOptions","isRoot","onLayoutChanged","onContentReady","e","component","isSingleColumnMode","_tryGetItemsForTemplate","$tabPanel","tabPanelOptions","dataSource","onItemRendered","args","itemElement","itemData","container","extendRunTimeItemInfoByKey","tryUpdateTabPanelInstance","instance","Array","isArray","forEach","widgetInstance","tabPanel","_createComponent","parent","on","fullName","value","$group","toggleClass","caption","text","$groupContent","_renderGroupContentTemplate","empty","data","render","model","extendedLayoutManagerOptions","form","formOptions","$formElement","_isDataUpdating","_triggerOnFieldDataChanged","addItemsOrExtendFrom","onDisposing","_ref2","nestedItemsRunTimeInfo","getItemsRunTimeInfo","removeItemsByItems","$parent","layoutManagerOptions","baseColCountByScreen","lg","md","sm","xs","_clearAutoColCountChangedTimeout","autoColCountChangedTimeoutId","setTimeout","_disposed","_refresh","type","_extendConfig","optionFullName","_options","silent","_triggerOnFieldDataChangedByDataSet","name","_optionChanged","splitFullName","split","search","_itemsOptionChangedHandler","_formDataOptionChangedHandler","_defaultOptionChangedHandler","_invalidate","_resetValues","removeGroup","previousValue","nameParts","itemPath","_getItemPath","optionNameWithoutPath","replace","simpleOptionName","itemAction","_tryCreateItemOptionAction","_tryExecuteItemOptionAction","_tryChangeLayoutManagerItemOption","_changeItemOption","_generateItemsFromData","slice","join","editor","getEditor","optionName","removeItemsByPathStartWith","itemsRunTimeInfo","action","tryExecute","_updateValidationGroupAndSummaryIfNeeded","indexOf","_initGroupRegistration","_setLayoutManagerItemOption","_updateLockCount","beginUpdate","key","findKeyByPath","postponedOperations","endUpdate","resolve","contentReadyHandler","off","tabPath","tabLayoutManager","findGroupOrTabLayoutManagerByPath","endPartIndex","_itemPath","_layoutManager","fullOptionName","formItems","layoutManagerItems","layoutItem","visibleIndex","_tryChangeLayoutManagerItemOptions","optionValue","_createActionByOption","_updateFieldValue","editorValue","_getItemByField","field","fieldParts","_getFieldParts","fieldName","fieldPath","resultItem","_getItemByFieldPath","subItemsField","_getSubItemField","separatorIndex","resultPath","substr","reverse","isItemWithSubItems","title","isGroupWithName","nameWithoutSpaces","pathNode","pop","_searchItemInEverySubItem","groupItem","_dimensionChanged","currentScreenFactor","_isColCountChanged","oldScreenSize","newScreenSize","isChanged","editorSelector","trigger","_","isEditor","reset","resetGroup","_updateData","isComplexData","_data","fieldValue","registerKeyHandler","handler","_focusTarget","first","_visibilityChanged","clearTimeout","_dispose","resetValues","updateData","findWidgetInstanceByDataField","findWidgetInstanceByName","getButton","updateDimensions","deferred","update","done","resolveWith","promise","itemOption","id","allowUpdateItems","validate","validateGroup","getItemID","getTargetScreenFactor"],"mappings":"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","sourcesContent":["/**\r\n * DevExtreme (esm/ui/form/ui.form.js)\r\n * Version: 21.2.5\r\n * Build date: Mon Jan 17 2022\r\n *\r\n * Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED\r\n * Read about DevExtreme licensing here: https://js.devexpress.com/Licensing/\r\n */\r\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport $ from \"../../core/renderer\";\r\nimport eventsEngine from \"../../events/core/events_engine\";\r\nimport registerComponent from \"../../core/component_registrator\";\r\nimport Guid from \"../../core/guid\";\r\nimport {\r\n    ensureDefined\r\n} from \"../../core/utils/common\";\r\nimport config from \"../../core/config\";\r\nimport {\r\n    isDefined,\r\n    isEmptyObject,\r\n    isObject,\r\n    isString\r\n} from \"../../core/utils/type\";\r\nimport {\r\n    each\r\n} from \"../../core/utils/iterator\";\r\nimport {\r\n    inArray\r\n} from \"../../core/utils/array\";\r\nimport {\r\n    extend\r\n} from \"../../core/utils/extend\";\r\nimport {\r\n    triggerResizeEvent,\r\n    triggerShownEvent\r\n} from \"../../events/visibility_change\";\r\nimport {\r\n    getPublicElement\r\n} from \"../../core/element\";\r\nimport messageLocalization from \"../../localization/message\";\r\nimport Widget from \"../widget/ui.widget\";\r\nimport Editor from \"../editor/editor\";\r\nimport {\r\n    defaultScreenFactorFunc,\r\n    getCurrentScreenFactor,\r\n    hasWindow\r\n} from \"../../core/utils/window\";\r\nimport ValidationEngine from \"../validation_engine\";\r\nimport {\r\n    default as FormItemsRunTimeInfo\r\n} from \"./ui.form.items_runtime_info\";\r\nimport TabPanel from \"../tab_panel\";\r\nimport Scrollable from \"../scroll_view/ui.scrollable\";\r\nimport {\r\n    Deferred\r\n} from \"../../core/utils/deferred\";\r\nimport {\r\n    isMaterial\r\n} from \"../themes\";\r\nimport tryCreateItemOptionAction from \"./ui.form.item_options_actions\";\r\nimport \"./ui.form.layout_manager\";\r\nimport {\r\n    concatPaths,\r\n    createItemPathByIndex,\r\n    getFullOptionName,\r\n    getOptionNameFromFullName,\r\n    tryGetTabPath,\r\n    getTextWithoutSpaces,\r\n    isEqualToDataFieldOrNameOrTitleOrCaption,\r\n    isFullPathContainsTabs,\r\n    getItemPath,\r\n    convertToLayoutManagerOptions\r\n} from \"./ui.form.utils\";\r\nimport {\r\n    convertToLabelMarkOptions\r\n} from \"./ui.form.layout_manager.utils\";\r\nimport {\r\n    setLabelWidthByMaxLabelWidth\r\n} from \"./components/label\";\r\nimport \"../validation_summary\";\r\nimport \"../validation_group\";\r\nimport {\r\n    FORM_CLASS,\r\n    FIELD_ITEM_CLASS,\r\n    FORM_GROUP_CLASS,\r\n    FORM_GROUP_CONTENT_CLASS,\r\n    FIELD_ITEM_CONTENT_HAS_GROUP_CLASS,\r\n    FIELD_ITEM_CONTENT_HAS_TABS_CLASS,\r\n    FORM_GROUP_WITH_CAPTION_CLASS,\r\n    FORM_GROUP_CAPTION_CLASS,\r\n    FIELD_ITEM_TAB_CLASS,\r\n    FORM_FIELD_ITEM_COL_CLASS,\r\n    GROUP_COL_COUNT_CLASS,\r\n    GROUP_COL_COUNT_ATTR,\r\n    FIELD_ITEM_CONTENT_CLASS,\r\n    FORM_VALIDATION_SUMMARY,\r\n    ROOT_SIMPLE_ITEM_CLASS,\r\n    FORM_UNDERLINED_CLASS\r\n} from \"./constants\";\r\nimport {\r\n    TOOLBAR_CLASS\r\n} from \"../toolbar/constants\";\r\nvar FOCUSED_STATE_CLASS = \"dx-state-focused\";\r\nvar ITEM_OPTIONS_FOR_VALIDATION_UPDATING = [\"items\", \"isRequired\", \"validationRules\", \"visible\"];\r\nvar Form = Widget.inherit({\r\n    _init: function() {\r\n        this.callBase();\r\n        this._cachedColCountOptions = [];\r\n        this._itemsRunTimeInfo = new FormItemsRunTimeInfo;\r\n        this._groupsColCount = [];\r\n        this._attachSyncSubscriptions()\r\n    },\r\n    _getDefaultOptions: function() {\r\n        return extend(this.callBase(), {\r\n            formID: \"dx-\" + new Guid,\r\n            formData: {},\r\n            colCount: 1,\r\n            screenByWidth: defaultScreenFactorFunc,\r\n            colCountByScreen: void 0,\r\n            labelLocation: \"left\",\r\n            readOnly: false,\r\n            onFieldDataChanged: null,\r\n            customizeItem: null,\r\n            onEditorEnterKey: null,\r\n            minColWidth: 200,\r\n            alignItemLabels: true,\r\n            alignItemLabelsInAllGroups: true,\r\n            alignRootItemLabels: true,\r\n            showColonAfterLabel: true,\r\n            showRequiredMark: true,\r\n            showOptionalMark: false,\r\n            requiredMark: \"*\",\r\n            optionalMark: messageLocalization.format(\"dxForm-optionalMark\"),\r\n            requiredMessage: messageLocalization.getFormatter(\"dxForm-requiredMessage\"),\r\n            showValidationSummary: false,\r\n            items: void 0,\r\n            scrollingEnabled: false,\r\n            validationGroup: void 0,\r\n            stylingMode: config().editorStylingMode,\r\n            labelMode: \"outside\"\r\n        })\r\n    },\r\n    _defaultOptionsRules: function() {\r\n        return this.callBase().concat([{\r\n            device: function() {\r\n                return isMaterial()\r\n            },\r\n            options: {\r\n                showColonAfterLabel: false,\r\n                labelLocation: \"top\"\r\n            }\r\n        }])\r\n    },\r\n    _setOptionsByReference: function() {\r\n        this.callBase();\r\n        extend(this._optionsByReference, {\r\n            formData: true,\r\n            validationGroup: true\r\n        })\r\n    },\r\n    _getGroupColCount: function($element) {\r\n        return parseInt($element.attr(GROUP_COL_COUNT_ATTR))\r\n    },\r\n    _applyLabelsWidthByCol: function($container, index) {\r\n        var options = arguments.length > 2 && void 0 !== arguments[2] ? arguments[2] : {};\r\n        var labelMarkOptions = arguments.length > 3 ? arguments[3] : void 0;\r\n        var fieldItemClass = options.inOneColumn ? FIELD_ITEM_CLASS : FORM_FIELD_ITEM_COL_CLASS + index;\r\n        var cssExcludeTabbedSelector = options.excludeTabbed ? \":not(.\".concat(FIELD_ITEM_TAB_CLASS, \")\") : \"\";\r\n        setLabelWidthByMaxLabelWidth($container, \".\".concat(fieldItemClass).concat(cssExcludeTabbedSelector), labelMarkOptions);\r\n        return\r\n    },\r\n    _applyLabelsWidth: function($container, excludeTabbed, inOneColumn, colCount, labelMarkOptions) {\r\n        colCount = inOneColumn ? 1 : colCount || this._getGroupColCount($container);\r\n        var applyLabelsOptions = {\r\n            excludeTabbed: excludeTabbed,\r\n            inOneColumn: inOneColumn\r\n        };\r\n        var i;\r\n        for (i = 0; i < colCount; i++) {\r\n            this._applyLabelsWidthByCol($container, i, applyLabelsOptions, labelMarkOptions)\r\n        }\r\n    },\r\n    _getGroupElementsInColumn: function($container, columnIndex, colCount) {\r\n        var cssColCountSelector = isDefined(colCount) ? \".\" + GROUP_COL_COUNT_CLASS + colCount : \"\";\r\n        var groupSelector = \".\" + FORM_FIELD_ITEM_COL_CLASS + columnIndex + \" > .\" + FIELD_ITEM_CONTENT_CLASS + \" > .\" + FORM_GROUP_CLASS + cssColCountSelector;\r\n        return $container.find(groupSelector)\r\n    },\r\n    _applyLabelsWidthWithGroups: function($container, colCount, excludeTabbed, labelMarkOptions) {\r\n        if (true === this.option(\"alignRootItemLabels\")) {\r\n            var $rootSimpleItems = $container.find(\".\".concat(ROOT_SIMPLE_ITEM_CLASS));\r\n            for (var colIndex = 0; colIndex < colCount; colIndex++) {\r\n                this._applyLabelsWidthByCol($rootSimpleItems, colIndex, excludeTabbed, labelMarkOptions)\r\n            }\r\n        }\r\n        var alignItemLabelsInAllGroups = this.option(\"alignItemLabelsInAllGroups\");\r\n        if (alignItemLabelsInAllGroups) {\r\n            this._applyLabelsWidthWithNestedGroups($container, colCount, excludeTabbed, labelMarkOptions)\r\n        } else {\r\n            var $groups = this.$element().find(\".\" + FORM_GROUP_CLASS);\r\n            var i;\r\n            for (i = 0; i < $groups.length; i++) {\r\n                this._applyLabelsWidth($groups.eq(i), excludeTabbed, void 0, void 0, labelMarkOptions)\r\n            }\r\n        }\r\n    },\r\n    _applyLabelsWidthWithNestedGroups: function($container, colCount, excludeTabbed, labelMarkOptions) {\r\n        var applyLabelsOptions = {\r\n            excludeTabbed: excludeTabbed\r\n        };\r\n        var colIndex;\r\n        var groupsColIndex;\r\n        var groupColIndex;\r\n        var $groupsByCol;\r\n        for (colIndex = 0; colIndex < colCount; colIndex++) {\r\n            $groupsByCol = this._getGroupElementsInColumn($container, colIndex);\r\n            this._applyLabelsWidthByCol($groupsByCol, 0, applyLabelsOptions, labelMarkOptions);\r\n            for (groupsColIndex = 0; groupsColIndex < this._groupsColCount.length; groupsColIndex++) {\r\n                $groupsByCol = this._getGroupElementsInColumn($container, colIndex, this._groupsColCount[groupsColIndex]);\r\n                var groupColCount = this._getGroupColCount($groupsByCol);\r\n                for (groupColIndex = 1; groupColIndex < groupColCount; groupColIndex++) {\r\n                    this._applyLabelsWidthByCol($groupsByCol, groupColIndex, applyLabelsOptions, labelMarkOptions)\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _labelLocation: function() {\r\n        return this.option(\"labelLocation\")\r\n    },\r\n    _alignLabelsInColumn: function(_ref) {\r\n        var {\r\n            layoutManager: layoutManager,\r\n            inOneColumn: inOneColumn,\r\n            $container: $container,\r\n            excludeTabbed: excludeTabbed,\r\n            items: items\r\n        } = _ref;\r\n        if (!hasWindow() || \"top\" === this._labelLocation()) {\r\n            return\r\n        }\r\n        var labelMarkOptions = convertToLabelMarkOptions(layoutManager._getMarkOptions());\r\n        if (inOneColumn) {\r\n            this._applyLabelsWidth($container, excludeTabbed, true, void 0, labelMarkOptions)\r\n        } else if (this._checkGrouping(items)) {\r\n            this._applyLabelsWidthWithGroups($container, layoutManager._getColCount(), excludeTabbed, labelMarkOptions)\r\n        } else {\r\n            this._applyLabelsWidth($container, excludeTabbed, false, layoutManager._getColCount(), labelMarkOptions)\r\n        }\r\n    },\r\n    _prepareFormData: function() {\r\n        if (!isDefined(this.option(\"formData\"))) {\r\n            this.option(\"formData\", {})\r\n        }\r\n    },\r\n    _setStylingModeClass: function() {\r\n        if (\"underlined\" === this.option(\"stylingMode\")) {\r\n            this.$element().addClass(FORM_UNDERLINED_CLASS)\r\n        }\r\n    },\r\n    _initMarkup: function() {\r\n        ValidationEngine.addGroup(this._getValidationGroup());\r\n        this._clearCachedInstances();\r\n        this._prepareFormData();\r\n        this.$element().addClass(FORM_CLASS);\r\n        this._setStylingModeClass();\r\n        this.callBase();\r\n        this.setAria(\"role\", \"form\", this.$element());\r\n        if (this.option(\"scrollingEnabled\")) {\r\n            this._renderScrollable()\r\n        }\r\n        this._renderLayout();\r\n        this._renderValidationSummary();\r\n        this._lastMarkupScreenFactor = this._targetScreenFactor || this._getCurrentScreenFactor()\r\n    },\r\n    _getCurrentScreenFactor: function() {\r\n        return hasWindow() ? getCurrentScreenFactor(this.option(\"screenByWidth\")) : \"lg\"\r\n    },\r\n    _clearCachedInstances: function() {\r\n        this._itemsRunTimeInfo.clear();\r\n        this._cachedLayoutManagers = []\r\n    },\r\n    _alignLabels: function(layoutManager, inOneColumn) {\r\n        this._alignLabelsInColumn({\r\n            $container: this.$element(),\r\n            layoutManager: layoutManager,\r\n            excludeTabbed: true,\r\n            items: this.option(\"items\"),\r\n            inOneColumn: inOneColumn\r\n        });\r\n        triggerResizeEvent(this.$element().find(\".\".concat(TOOLBAR_CLASS)))\r\n    },\r\n    _clean: function() {\r\n        this._clearValidationSummary();\r\n        this.callBase();\r\n        this._groupsColCount = [];\r\n        this._cachedColCountOptions = [];\r\n        this._lastMarkupScreenFactor = void 0\r\n    },\r\n    _renderScrollable: function() {\r\n        var useNativeScrolling = this.option(\"useNativeScrolling\");\r\n        this._scrollable = new Scrollable(this.$element(), {\r\n            useNative: !!useNativeScrolling,\r\n            useSimulatedScrollbar: !useNativeScrolling,\r\n            useKeyboard: false,\r\n            direction: \"both\",\r\n            bounceEnabled: false\r\n        })\r\n    },\r\n    _getContent: function() {\r\n        return this.option(\"scrollingEnabled\") ? $(this._scrollable.content()) : this.$element()\r\n    },\r\n    _clearValidationSummary: function() {\r\n        var _this$_$validationSum;\r\n        null === (_this$_$validationSum = this._$validationSummary) || void 0 === _this$_$validationSum ? void 0 : _this$_$validationSum.remove();\r\n        this._$validationSummary = void 0;\r\n        this._validationSummary = void 0\r\n    },\r\n    _renderValidationSummary: function() {\r\n        this._clearValidationSummary();\r\n        if (this.option(\"showValidationSummary\")) {\r\n            this._$validationSummary = $(\"<div>\").addClass(FORM_VALIDATION_SUMMARY).appendTo(this._getContent());\r\n            this._validationSummary = this._$validationSummary.dxValidationSummary({\r\n                validationGroup: this._getValidationGroup()\r\n            }).dxValidationSummary(\"instance\")\r\n        }\r\n    },\r\n    _prepareItems(items, parentIsTabbedItem, currentPath, isTabs) {\r\n        if (items) {\r\n            var result = [];\r\n            for (var i = 0; i < items.length; i++) {\r\n                var item = items[i];\r\n                var path = concatPaths(currentPath, createItemPathByIndex(i, isTabs));\r\n                var itemRunTimeInfo = {\r\n                    item: item,\r\n                    itemIndex: i,\r\n                    path: path\r\n                };\r\n                var guid = this._itemsRunTimeInfo.add(itemRunTimeInfo);\r\n                if (isString(item)) {\r\n                    item = {\r\n                        dataField: item\r\n                    }\r\n                }\r\n                if (isObject(item)) {\r\n                    var preparedItem = _extends({}, item);\r\n                    itemRunTimeInfo.preparedItem = preparedItem;\r\n                    preparedItem.guid = guid;\r\n                    this._tryPrepareGroupItem(preparedItem);\r\n                    this._tryPrepareTabbedItem(preparedItem, path);\r\n                    this._tryPrepareItemTemplate(preparedItem);\r\n                    if (parentIsTabbedItem) {\r\n                        preparedItem.cssItemClass = FIELD_ITEM_TAB_CLASS\r\n                    }\r\n                    if (preparedItem.items) {\r\n                        preparedItem.items = this._prepareItems(preparedItem.items, parentIsTabbedItem, path)\r\n                    }\r\n                    result.push(preparedItem)\r\n                } else {\r\n                    result.push(item)\r\n                }\r\n            }\r\n            return result\r\n        }\r\n    },\r\n    _tryPrepareGroupItem: function(item) {\r\n        if (\"group\" === item.itemType) {\r\n            item.alignItemLabels = ensureDefined(item.alignItemLabels, true);\r\n            item._prepareGroupItemTemplate = itemTemplate => {\r\n                if (item.template) {\r\n                    item.groupContentTemplate = this._getTemplate(itemTemplate)\r\n                }\r\n                item.template = this._itemGroupTemplate.bind(this, item)\r\n            };\r\n            item._prepareGroupItemTemplate(item.template)\r\n        }\r\n    },\r\n    _tryPrepareTabbedItem: function(item, path) {\r\n        if (\"tabbed\" === item.itemType) {\r\n            item.template = this._itemTabbedTemplate.bind(this, item);\r\n            item.tabs = this._prepareItems(item.tabs, true, path, true)\r\n        }\r\n    },\r\n    _tryPrepareItemTemplate: function(item) {\r\n        if (item.template) {\r\n            item.template = this._getTemplate(item.template)\r\n        }\r\n    },\r\n    _checkGrouping: function(items) {\r\n        if (items) {\r\n            for (var i = 0; i < items.length; i++) {\r\n                var item = items[i];\r\n                if (\"group\" === item.itemType) {\r\n                    return true\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _renderLayout: function() {\r\n        var that = this;\r\n        var items = that.option(\"items\");\r\n        var $content = that._getContent();\r\n        items = that._prepareItems(items);\r\n        that._rootLayoutManager = that._renderLayoutManager($content, this._createLayoutManagerOptions(items, {\r\n            isRoot: true,\r\n            colCount: that.option(\"colCount\"),\r\n            alignItemLabels: that.option(\"alignItemLabels\"),\r\n            screenByWidth: this.option(\"screenByWidth\"),\r\n            colCountByScreen: this.option(\"colCountByScreen\"),\r\n            onLayoutChanged: function(inOneColumn) {\r\n                that._alignLabels.bind(that)(that._rootLayoutManager, inOneColumn)\r\n            },\r\n            onContentReady: function(e) {\r\n                that._alignLabels(e.component, e.component.isSingleColumnMode())\r\n            }\r\n        }))\r\n    },\r\n    _tryGetItemsForTemplate: function(item) {\r\n        return item.items || []\r\n    },\r\n    _itemTabbedTemplate: function(item, e, $container) {\r\n        var $tabPanel = $(\"<div>\").appendTo($container);\r\n        var tabPanelOptions = extend({}, item.tabPanelOptions, {\r\n            dataSource: item.tabs,\r\n            onItemRendered: args => triggerShownEvent(args.itemElement),\r\n            itemTemplate: (itemData, e, container) => {\r\n                var $container = $(container);\r\n                var alignItemLabels = ensureDefined(itemData.alignItemLabels, true);\r\n                var layoutManager = this._renderLayoutManager($container, this._createLayoutManagerOptions(this._tryGetItemsForTemplate(itemData), {\r\n                    colCount: itemData.colCount,\r\n                    alignItemLabels: alignItemLabels,\r\n                    screenByWidth: this.option(\"screenByWidth\"),\r\n                    colCountByScreen: itemData.colCountByScreen,\r\n                    cssItemClass: itemData.cssItemClass,\r\n                    onLayoutChanged: inOneColumn => {\r\n                        this._alignLabelsInColumn({\r\n                            $container: $container,\r\n                            layoutManager: layoutManager,\r\n                            items: itemData.items,\r\n                            inOneColumn: inOneColumn\r\n                        })\r\n                    }\r\n                }));\r\n                if (this._itemsRunTimeInfo) {\r\n                    this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(itemData.guid, {\r\n                        layoutManager: layoutManager\r\n                    })\r\n                }\r\n                if (alignItemLabels) {\r\n                    this._alignLabelsInColumn({\r\n                        $container: $container,\r\n                        layoutManager: layoutManager,\r\n                        items: itemData.items,\r\n                        inOneColumn: layoutManager.isSingleColumnMode()\r\n                    })\r\n                }\r\n            }\r\n        });\r\n        var tryUpdateTabPanelInstance = (items, instance) => {\r\n            if (Array.isArray(items)) {\r\n                items.forEach(item => this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(item.guid, {\r\n                    widgetInstance: instance\r\n                }))\r\n            }\r\n        };\r\n        var tabPanel = this._createComponent($tabPanel, TabPanel, tabPanelOptions);\r\n        $($container).parent().addClass(FIELD_ITEM_CONTENT_HAS_TABS_CLASS);\r\n        tabPanel.on(\"optionChanged\", e => {\r\n            if (\"dataSource\" === e.fullName) {\r\n                tryUpdateTabPanelInstance(e.value, e.component)\r\n            }\r\n        });\r\n        tryUpdateTabPanelInstance([{\r\n            guid: item.guid\r\n        }, ...item.tabs], tabPanel)\r\n    },\r\n    _itemGroupTemplate: function(item, e, $container) {\r\n        var $group = $(\"<div>\").toggleClass(FORM_GROUP_WITH_CAPTION_CLASS, isDefined(item.caption) && item.caption.length).addClass(FORM_GROUP_CLASS).appendTo($container);\r\n        $($container).parent().addClass(FIELD_ITEM_CONTENT_HAS_GROUP_CLASS);\r\n        var colCount;\r\n        var layoutManager;\r\n        if (item.caption) {\r\n            $(\"<span>\").addClass(FORM_GROUP_CAPTION_CLASS).text(item.caption).appendTo($group)\r\n        }\r\n        var $groupContent = $(\"<div>\").addClass(FORM_GROUP_CONTENT_CLASS).appendTo($group);\r\n        if (item.groupContentTemplate) {\r\n            item._renderGroupContentTemplate = () => {\r\n                $groupContent.empty();\r\n                var data = {\r\n                    formData: this.option(\"formData\"),\r\n                    component: this\r\n                };\r\n                item.groupContentTemplate.render({\r\n                    model: data,\r\n                    container: getPublicElement($groupContent)\r\n                })\r\n            };\r\n            item._renderGroupContentTemplate()\r\n        } else {\r\n            layoutManager = this._renderLayoutManager($groupContent, this._createLayoutManagerOptions(this._tryGetItemsForTemplate(item), {\r\n                colCount: item.colCount,\r\n                colCountByScreen: item.colCountByScreen,\r\n                alignItemLabels: item.alignItemLabels,\r\n                cssItemClass: item.cssItemClass\r\n            }));\r\n            this._itemsRunTimeInfo && this._itemsRunTimeInfo.extendRunTimeItemInfoByKey(item.guid, {\r\n                layoutManager: layoutManager\r\n            });\r\n            colCount = layoutManager._getColCount();\r\n            if (-1 === inArray(colCount, this._groupsColCount)) {\r\n                this._groupsColCount.push(colCount)\r\n            }\r\n            $group.addClass(GROUP_COL_COUNT_CLASS + colCount);\r\n            $group.attr(GROUP_COL_COUNT_ATTR, colCount)\r\n        }\r\n    },\r\n    _createLayoutManagerOptions: function(items, extendedLayoutManagerOptions) {\r\n        return convertToLayoutManagerOptions({\r\n            form: this,\r\n            formOptions: this.option(),\r\n            $formElement: this.$element(),\r\n            items: items,\r\n            validationGroup: this._getValidationGroup(),\r\n            extendedLayoutManagerOptions: extendedLayoutManagerOptions,\r\n            onFieldDataChanged: args => {\r\n                if (!this._isDataUpdating) {\r\n                    this._triggerOnFieldDataChanged(args)\r\n                }\r\n            },\r\n            onContentReady: args => {\r\n                this._itemsRunTimeInfo.addItemsOrExtendFrom(args.component._itemsRunTimeInfo);\r\n                extendedLayoutManagerOptions.onContentReady && extendedLayoutManagerOptions.onContentReady(args)\r\n            },\r\n            onDisposing: _ref2 => {\r\n                var {\r\n                    component: component\r\n                } = _ref2;\r\n                var nestedItemsRunTimeInfo = component.getItemsRunTimeInfo();\r\n                this._itemsRunTimeInfo.removeItemsByItems(nestedItemsRunTimeInfo)\r\n            }\r\n        })\r\n    },\r\n    _renderLayoutManager: function($parent, layoutManagerOptions) {\r\n        var baseColCountByScreen = {\r\n            lg: layoutManagerOptions.colCount,\r\n            md: layoutManagerOptions.colCount,\r\n            sm: layoutManagerOptions.colCount,\r\n            xs: 1\r\n        };\r\n        this._cachedColCountOptions.push({\r\n            colCountByScreen: extend(baseColCountByScreen, layoutManagerOptions.colCountByScreen)\r\n        });\r\n        var $element = $(\"<div>\");\r\n        $element.appendTo($parent);\r\n        var instance = this._createComponent($element, \"dxLayoutManager\", layoutManagerOptions);\r\n        instance.on(\"autoColCountChanged\", () => {\r\n            this._clearAutoColCountChangedTimeout();\r\n            this.autoColCountChangedTimeoutId = setTimeout(() => !this._disposed && this._refresh(), 0)\r\n        });\r\n        this._cachedLayoutManagers.push(instance);\r\n        return instance\r\n    },\r\n    _getValidationGroup: function() {\r\n        return this.option(\"validationGroup\") || this\r\n    },\r\n    _createComponent: function($element, type, config) {\r\n        config = config || {};\r\n        this._extendConfig(config, {\r\n            readOnly: this.option(\"readOnly\")\r\n        });\r\n        return this.callBase($element, type, config)\r\n    },\r\n    _attachSyncSubscriptions: function() {\r\n        var that = this;\r\n        that.on(\"optionChanged\", (function(args) {\r\n            var optionFullName = args.fullName;\r\n            if (\"formData\" === optionFullName) {\r\n                if (!isDefined(args.value)) {\r\n                    that._options.silent(\"formData\", args.value = {})\r\n                }\r\n                that._triggerOnFieldDataChangedByDataSet(args.value)\r\n            }\r\n            if (that._cachedLayoutManagers.length) {\r\n                each(that._cachedLayoutManagers, (function(index, layoutManager) {\r\n                    if (\"formData\" === optionFullName) {\r\n                        that._isDataUpdating = true;\r\n                        layoutManager.option(\"layoutData\", args.value);\r\n                        that._isDataUpdating = false\r\n                    }\r\n                    if (\"readOnly\" === args.name || \"disabled\" === args.name) {\r\n                        layoutManager.option(optionFullName, args.value)\r\n                    }\r\n                }))\r\n            }\r\n        }))\r\n    },\r\n    _optionChanged: function(args) {\r\n        var splitFullName = args.fullName.split(\".\");\r\n        if (splitFullName.length > 1 && -1 !== splitFullName[0].search(\"items\") && this._itemsOptionChangedHandler(args)) {\r\n            return\r\n        }\r\n        if (splitFullName.length > 1 && -1 !== splitFullName[0].search(\"formData\") && this._formDataOptionChangedHandler(args)) {\r\n            return\r\n        }\r\n        this._defaultOptionChangedHandler(args)\r\n    },\r\n    _defaultOptionChangedHandler: function(args) {\r\n        switch (args.name) {\r\n            case \"formData\":\r\n                if (!this.option(\"items\")) {\r\n                    this._invalidate()\r\n                } else if (isEmptyObject(args.value)) {\r\n                    this._resetValues()\r\n                }\r\n                break;\r\n            case \"onFieldDataChanged\":\r\n                break;\r\n            case \"items\":\r\n            case \"colCount\":\r\n            case \"onEditorEnterKey\":\r\n            case \"labelLocation\":\r\n            case \"labelMode\":\r\n            case \"alignItemLabels\":\r\n            case \"showColonAfterLabel\":\r\n            case \"customizeItem\":\r\n            case \"alignItemLabelsInAllGroups\":\r\n            case \"showRequiredMark\":\r\n            case \"showOptionalMark\":\r\n            case \"requiredMark\":\r\n            case \"optionalMark\":\r\n            case \"requiredMessage\":\r\n            case \"scrollingEnabled\":\r\n            case \"formID\":\r\n            case \"colCountByScreen\":\r\n            case \"screenByWidth\":\r\n            case \"stylingMode\":\r\n                this._invalidate();\r\n                break;\r\n            case \"showValidationSummary\":\r\n                this._renderValidationSummary();\r\n                break;\r\n            case \"minColWidth\":\r\n                if (\"auto\" === this.option(\"colCount\")) {\r\n                    this._invalidate()\r\n                }\r\n                break;\r\n            case \"alignRootItemLabels\":\r\n            case \"readOnly\":\r\n                break;\r\n            case \"width\":\r\n                this.callBase(args);\r\n                this._rootLayoutManager.option(args.name, args.value);\r\n                this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode());\r\n                break;\r\n            case \"visible\":\r\n                this.callBase(args);\r\n                if (args.value) {\r\n                    triggerShownEvent(this.$element())\r\n                }\r\n                break;\r\n            case \"validationGroup\":\r\n                ValidationEngine.removeGroup(args.previousValue || this);\r\n                this._invalidate();\r\n                break;\r\n            default:\r\n                this.callBase(args)\r\n        }\r\n    },\r\n    _itemsOptionChangedHandler: function(args) {\r\n        var nameParts = args.fullName.split(\".\");\r\n        var value = args.value;\r\n        var itemPath = this._getItemPath(nameParts);\r\n        var item = this.option(itemPath);\r\n        var optionNameWithoutPath = args.fullName.replace(itemPath + \".\", \"\");\r\n        var simpleOptionName = optionNameWithoutPath.split(\".\")[0].replace(/\\[\\d+]/, \"\");\r\n        var itemAction = this._tryCreateItemOptionAction(simpleOptionName, item, item[simpleOptionName], args.previousValue, itemPath);\r\n        var result = this._tryExecuteItemOptionAction(itemAction) || this._tryChangeLayoutManagerItemOption(args.fullName, value);\r\n        if (!result && item) {\r\n            this._changeItemOption(item, optionNameWithoutPath, value);\r\n            var items = this._generateItemsFromData(this.option(\"items\"));\r\n            this.option(\"items\", items);\r\n            result = true\r\n        }\r\n        return result\r\n    },\r\n    _formDataOptionChangedHandler: function(args) {\r\n        var nameParts = args.fullName.split(\".\");\r\n        var value = args.value;\r\n        var dataField = nameParts.slice(1).join(\".\");\r\n        var editor = this.getEditor(dataField);\r\n        if (editor) {\r\n            editor.option(\"value\", value)\r\n        } else {\r\n            this._triggerOnFieldDataChanged({\r\n                dataField: dataField,\r\n                value: value\r\n            })\r\n        }\r\n        return true\r\n    },\r\n    _tryCreateItemOptionAction: function(optionName, item, value, previousValue, itemPath) {\r\n        if (\"tabs\" === optionName) {\r\n            this._itemsRunTimeInfo.removeItemsByPathStartWith(\"\".concat(itemPath, \".tabs\"));\r\n            value = this._prepareItems(value, true, itemPath, true)\r\n        }\r\n        return tryCreateItemOptionAction(optionName, {\r\n            item: item,\r\n            value: value,\r\n            previousValue: previousValue,\r\n            itemsRunTimeInfo: this._itemsRunTimeInfo\r\n        })\r\n    },\r\n    _tryExecuteItemOptionAction: function(action) {\r\n        return action && action.tryExecute()\r\n    },\r\n    _updateValidationGroupAndSummaryIfNeeded: function(fullName) {\r\n        var optionName = getOptionNameFromFullName(fullName);\r\n        if (ITEM_OPTIONS_FOR_VALIDATION_UPDATING.indexOf(optionName) > -1) {\r\n            ValidationEngine.addGroup(this._getValidationGroup());\r\n            if (this.option(\"showValidationSummary\")) {\r\n                this._validationSummary && this._validationSummary._initGroupRegistration()\r\n            }\r\n        }\r\n    },\r\n    _setLayoutManagerItemOption(layoutManager, optionName, value, path) {\r\n        if (this._updateLockCount > 0) {\r\n            !layoutManager._updateLockCount && layoutManager.beginUpdate();\r\n            var key = this._itemsRunTimeInfo.findKeyByPath(path);\r\n            this.postponedOperations.add(key, () => {\r\n                !layoutManager._disposed && layoutManager.endUpdate();\r\n                return (new Deferred).resolve()\r\n            })\r\n        }\r\n        var contentReadyHandler = e => {\r\n            e.component.off(\"contentReady\", contentReadyHandler);\r\n            if (isFullPathContainsTabs(path)) {\r\n                var tabPath = tryGetTabPath(path);\r\n                var tabLayoutManager = this._itemsRunTimeInfo.findGroupOrTabLayoutManagerByPath(tabPath);\r\n                if (tabLayoutManager) {\r\n                    this._alignLabelsInColumn({\r\n                        items: tabLayoutManager.option(\"items\"),\r\n                        layoutManager: tabLayoutManager,\r\n                        $container: tabLayoutManager.$element(),\r\n                        inOneColumn: tabLayoutManager.isSingleColumnMode()\r\n                    })\r\n                }\r\n            } else {\r\n                this._alignLabels(this._rootLayoutManager, this._rootLayoutManager.isSingleColumnMode())\r\n            }\r\n        };\r\n        layoutManager.on(\"contentReady\", contentReadyHandler);\r\n        layoutManager.option(optionName, value);\r\n        this._updateValidationGroupAndSummaryIfNeeded(optionName)\r\n    },\r\n    _tryChangeLayoutManagerItemOption(fullName, value) {\r\n        var nameParts = fullName.split(\".\");\r\n        var optionName = getOptionNameFromFullName(fullName);\r\n        if (\"items\" === optionName && nameParts.length > 1) {\r\n            var itemPath = this._getItemPath(nameParts);\r\n            var layoutManager = this._itemsRunTimeInfo.findGroupOrTabLayoutManagerByPath(itemPath);\r\n            if (layoutManager) {\r\n                this._itemsRunTimeInfo.removeItemsByItems(layoutManager.getItemsRunTimeInfo());\r\n                var items = this._prepareItems(value, false, itemPath);\r\n                this._setLayoutManagerItemOption(layoutManager, optionName, items, itemPath);\r\n                return true\r\n            }\r\n        } else if (nameParts.length > 2) {\r\n            var endPartIndex = nameParts.length - 2;\r\n            var _itemPath = this._getItemPath(nameParts.slice(0, endPartIndex));\r\n            var _layoutManager = this._itemsRunTimeInfo.findGroupOrTabLayoutManagerByPath(_itemPath);\r\n            if (_layoutManager) {\r\n                var fullOptionName = getFullOptionName(nameParts[endPartIndex], optionName);\r\n                if (\"editorType\" === optionName) {\r\n                    if (_layoutManager.option(fullOptionName) !== value) {\r\n                        return false\r\n                    }\r\n                }\r\n                if (\"visible\" === optionName) {\r\n                    var formItems = this.option(getFullOptionName(_itemPath, \"items\"));\r\n                    if (formItems && formItems.length) {\r\n                        var layoutManagerItems = _layoutManager.option(\"items\");\r\n                        formItems.forEach((item, index) => {\r\n                            var layoutItem = layoutManagerItems[index];\r\n                            layoutItem.visibleIndex = item.visibleIndex\r\n                        })\r\n                    }\r\n                }\r\n                this._setLayoutManagerItemOption(_layoutManager, fullOptionName, value, _itemPath);\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    },\r\n    _tryChangeLayoutManagerItemOptions(itemPath, options) {\r\n        var result;\r\n        this.beginUpdate();\r\n        each(options, (optionName, optionValue) => {\r\n            result = this._tryChangeLayoutManagerItemOption(getFullOptionName(itemPath, optionName), optionValue);\r\n            if (!result) {\r\n                return false\r\n            }\r\n        });\r\n        this.endUpdate();\r\n        return result\r\n    },\r\n    _getItemPath: function(nameParts) {\r\n        var itemPath = nameParts[0];\r\n        var i;\r\n        for (i = 1; i < nameParts.length; i++) {\r\n            if (-1 !== nameParts[i].search(/items\\[\\d+]|tabs\\[\\d+]/)) {\r\n                itemPath += \".\" + nameParts[i]\r\n            } else {\r\n                break\r\n            }\r\n        }\r\n        return itemPath\r\n    },\r\n    _triggerOnFieldDataChanged: function(args) {\r\n        this._createActionByOption(\"onFieldDataChanged\")(args)\r\n    },\r\n    _triggerOnFieldDataChangedByDataSet: function(data) {\r\n        var that = this;\r\n        if (data && isObject(data)) {\r\n            each(data, (function(dataField, value) {\r\n                that._triggerOnFieldDataChanged({\r\n                    dataField: dataField,\r\n                    value: value\r\n                })\r\n            }))\r\n        }\r\n    },\r\n    _updateFieldValue: function(dataField, value) {\r\n        if (isDefined(this.option(\"formData\"))) {\r\n            var editor = this.getEditor(dataField);\r\n            this.option(\"formData.\" + dataField, value);\r\n            if (editor) {\r\n                var editorValue = editor.option(\"value\");\r\n                if (editorValue !== value) {\r\n                    editor.option(\"value\", value)\r\n                }\r\n            }\r\n        }\r\n    },\r\n    _generateItemsFromData: function(items) {\r\n        var formData = this.option(\"formData\");\r\n        var result = [];\r\n        if (!items && isDefined(formData)) {\r\n            each(formData, (function(dataField) {\r\n                result.push({\r\n                    dataField: dataField\r\n                })\r\n            }))\r\n        }\r\n        if (items) {\r\n            each(items, (function(index, item) {\r\n                if (isObject(item)) {\r\n                    result.push(item)\r\n                } else {\r\n                    result.push({\r\n                        dataField: item\r\n                    })\r\n                }\r\n            }))\r\n        }\r\n        return result\r\n    },\r\n    _getItemByField: function(field, items) {\r\n        var that = this;\r\n        var fieldParts = isObject(field) ? field : that._getFieldParts(field);\r\n        var fieldName = fieldParts.fieldName;\r\n        var fieldPath = fieldParts.fieldPath;\r\n        var resultItem;\r\n        if (items.length) {\r\n            each(items, (function(index, item) {\r\n                var itemType = item.itemType;\r\n                if (fieldPath.length) {\r\n                    var path = fieldPath.slice();\r\n                    item = that._getItemByFieldPath(path, fieldName, item)\r\n                } else if (\"group\" === itemType && !(item.caption || item.name) || \"tabbed\" === itemType && !item.name) {\r\n                    var subItemsField = that._getSubItemField(itemType);\r\n                    item.items = that._generateItemsFromData(item.items);\r\n                    item = that._getItemByField({\r\n                        fieldName: fieldName,\r\n                        fieldPath: fieldPath\r\n                    }, item[subItemsField])\r\n                }\r\n                if (isEqualToDataFieldOrNameOrTitleOrCaption(item, fieldName)) {\r\n                    resultItem = item;\r\n                    return false\r\n                }\r\n            }))\r\n        }\r\n        return resultItem\r\n    },\r\n    _getFieldParts: function(field) {\r\n        var fieldName = field;\r\n        var separatorIndex = fieldName.indexOf(\".\");\r\n        var resultPath = [];\r\n        while (-1 !== separatorIndex) {\r\n            resultPath.push(fieldName.substr(0, separatorIndex));\r\n            fieldName = fieldName.substr(separatorIndex + 1);\r\n            separatorIndex = fieldName.indexOf(\".\")\r\n        }\r\n        return {\r\n            fieldName: fieldName,\r\n            fieldPath: resultPath.reverse()\r\n        }\r\n    },\r\n    _getItemByFieldPath: function(path, fieldName, item) {\r\n        var itemType = item.itemType;\r\n        var subItemsField = this._getSubItemField(itemType);\r\n        var isItemWithSubItems = \"group\" === itemType || \"tabbed\" === itemType || item.title;\r\n        var result;\r\n        do {\r\n            if (isItemWithSubItems) {\r\n                var name = item.name || item.caption || item.title;\r\n                var isGroupWithName = isDefined(name);\r\n                var nameWithoutSpaces = getTextWithoutSpaces(name);\r\n                var pathNode = void 0;\r\n                item[subItemsField] = this._generateItemsFromData(item[subItemsField]);\r\n                if (isGroupWithName) {\r\n                    pathNode = path.pop()\r\n                }\r\n                if (!path.length) {\r\n                    result = this._getItemByField(fieldName, item[subItemsField]);\r\n                    if (result) {\r\n                        break\r\n                    }\r\n                }\r\n                if (!isGroupWithName || isGroupWithName && nameWithoutSpaces === pathNode) {\r\n                    if (path.length) {\r\n                        result = this._searchItemInEverySubItem(path, fieldName, item[subItemsField])\r\n                    }\r\n                }\r\n            } else {\r\n                break\r\n            }\r\n        } while (path.length && !isDefined(result));\r\n        return result\r\n    },\r\n    _getSubItemField: function(itemType) {\r\n        return \"tabbed\" === itemType ? \"tabs\" : \"items\"\r\n    },\r\n    _searchItemInEverySubItem: function(path, fieldName, items) {\r\n        var that = this;\r\n        var result;\r\n        each(items, (function(index, groupItem) {\r\n            result = that._getItemByFieldPath(path.slice(), fieldName, groupItem);\r\n            if (result) {\r\n                return false\r\n            }\r\n        }));\r\n        if (!result) {\r\n            result = false\r\n        }\r\n        return result\r\n    },\r\n    _changeItemOption: function(item, option, value) {\r\n        if (isObject(item)) {\r\n            item[option] = value\r\n        }\r\n    },\r\n    _dimensionChanged: function() {\r\n        var currentScreenFactor = this._getCurrentScreenFactor();\r\n        if (this._lastMarkupScreenFactor !== currentScreenFactor) {\r\n            if (this._isColCountChanged(this._lastMarkupScreenFactor, currentScreenFactor)) {\r\n                this._targetScreenFactor = currentScreenFactor;\r\n                this._refresh();\r\n                this._targetScreenFactor = void 0\r\n            }\r\n            this._lastMarkupScreenFactor = currentScreenFactor\r\n        }\r\n    },\r\n    _isColCountChanged: function(oldScreenSize, newScreenSize) {\r\n        var isChanged = false;\r\n        each(this._cachedColCountOptions, (function(index, item) {\r\n            if (item.colCountByScreen[oldScreenSize] !== item.colCountByScreen[newScreenSize]) {\r\n                isChanged = true;\r\n                return false\r\n            }\r\n        }));\r\n        return isChanged\r\n    },\r\n    _refresh: function() {\r\n        var editorSelector = \".\" + FOCUSED_STATE_CLASS + \" input, .\" + FOCUSED_STATE_CLASS + \" textarea\";\r\n        eventsEngine.trigger(this.$element().find(editorSelector), \"change\");\r\n        this.callBase()\r\n    },\r\n    _resetValues: function() {\r\n        this._itemsRunTimeInfo.each((function(_, itemRunTimeInfo) {\r\n            if (isDefined(itemRunTimeInfo.widgetInstance) && Editor.isEditor(itemRunTimeInfo.widgetInstance)) {\r\n                itemRunTimeInfo.widgetInstance.reset();\r\n                itemRunTimeInfo.widgetInstance.option(\"isValid\", true)\r\n            }\r\n        }));\r\n        ValidationEngine.resetGroup(this._getValidationGroup())\r\n    },\r\n    _updateData: function(data, value, isComplexData) {\r\n        var that = this;\r\n        var _data = isComplexData ? value : data;\r\n        if (isObject(_data)) {\r\n            each(_data, (function(dataField, fieldValue) {\r\n                that._updateData(isComplexData ? data + \".\" + dataField : dataField, fieldValue, isObject(fieldValue))\r\n            }))\r\n        } else if (isString(data)) {\r\n            that._updateFieldValue(data, value)\r\n        }\r\n    },\r\n    registerKeyHandler: function(key, handler) {\r\n        this.callBase(key, handler);\r\n        this._itemsRunTimeInfo.each((function(_, itemRunTimeInfo) {\r\n            if (isDefined(itemRunTimeInfo.widgetInstance)) {\r\n                itemRunTimeInfo.widgetInstance.registerKeyHandler(key, handler)\r\n            }\r\n        }))\r\n    },\r\n    _focusTarget: function() {\r\n        return this.$element().find(\".\" + FIELD_ITEM_CONTENT_CLASS + \" [tabindex]\").first()\r\n    },\r\n    _visibilityChanged: function() {},\r\n    _clearAutoColCountChangedTimeout: function() {\r\n        if (this.autoColCountChangedTimeoutId) {\r\n            clearTimeout(this.autoColCountChangedTimeoutId);\r\n            this.autoColCountChangedTimeoutId = void 0\r\n        }\r\n    },\r\n    _dispose: function() {\r\n        this._clearAutoColCountChangedTimeout();\r\n        ValidationEngine.removeGroup(this._getValidationGroup());\r\n        this.callBase()\r\n    },\r\n    resetValues: function() {\r\n        this._resetValues()\r\n    },\r\n    updateData: function(data, value) {\r\n        this._updateData(data, value)\r\n    },\r\n    getEditor: function(dataField) {\r\n        return this._itemsRunTimeInfo.findWidgetInstanceByDataField(dataField) || this._itemsRunTimeInfo.findWidgetInstanceByName(dataField)\r\n    },\r\n    getButton: function(name) {\r\n        return this._itemsRunTimeInfo.findWidgetInstanceByName(name)\r\n    },\r\n    updateDimensions: function() {\r\n        var that = this;\r\n        var deferred = new Deferred;\r\n        if (that._scrollable) {\r\n            that._scrollable.update().done((function() {\r\n                deferred.resolveWith(that)\r\n            }))\r\n        } else {\r\n            deferred.resolveWith(that)\r\n        }\r\n        return deferred.promise()\r\n    },\r\n    itemOption: function(id, option, value) {\r\n        var items = this._generateItemsFromData(this.option(\"items\"));\r\n        var item = this._getItemByField(id, items);\r\n        var path = getItemPath(items, item);\r\n        if (!item) {\r\n            return\r\n        }\r\n        switch (arguments.length) {\r\n            case 1:\r\n                return item;\r\n            case 3:\r\n                var itemAction = this._tryCreateItemOptionAction(option, item, value, item[option], path);\r\n                this._changeItemOption(item, option, value);\r\n                var fullName = getFullOptionName(path, option);\r\n                if (!this._tryExecuteItemOptionAction(itemAction) && !this._tryChangeLayoutManagerItemOption(fullName, value)) {\r\n                    this.option(\"items\", items)\r\n                }\r\n                break;\r\n            default:\r\n                if (isObject(option)) {\r\n                    if (!this._tryChangeLayoutManagerItemOptions(path, option)) {\r\n                        var allowUpdateItems;\r\n                        each(option, (optionName, optionValue) => {\r\n                            var itemAction = this._tryCreateItemOptionAction(optionName, item, optionValue, item[optionName], path);\r\n                            this._changeItemOption(item, optionName, optionValue);\r\n                            if (!allowUpdateItems && !this._tryExecuteItemOptionAction(itemAction)) {\r\n                                allowUpdateItems = true\r\n                            }\r\n                        });\r\n                        allowUpdateItems && this.option(\"items\", items)\r\n                    }\r\n                }\r\n        }\r\n    },\r\n    validate: function() {\r\n        return ValidationEngine.validateGroup(this._getValidationGroup())\r\n    },\r\n    getItemID: function(name) {\r\n        return \"dx_\" + this.option(\"formID\") + \"_\" + (name || new Guid)\r\n    },\r\n    getTargetScreenFactor: function() {\r\n        return this._targetScreenFactor\r\n    }\r\n});\r\nregisterComponent(\"dxForm\", Form);\r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}